
Node_MeshNetwork.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ac  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  08008350  08008350  00018350  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008be8  08008be8  000201ec  2**0
                  CONTENTS
  4 .ARM          00000000  08008be8  08008be8  000201ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008be8  08008be8  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008be8  08008be8  00018be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bec  08008bec  00018bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  08008bf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  200001f0  08008ddc  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ac  08008ddc  000205ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9eb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f3c  00000000  00000000  0002fc07  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  00031b48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ea8  00000000  00000000  00032ae8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e490  00000000  00000000  00033990  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b5db  00000000  00000000  00051e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b2f31  00000000  00000000  0005d3fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011032c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c14  00000000  00000000  001103a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008334 	.word	0x08008334

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08008334 	.word	0x08008334

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000c04:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <NRF24_DelayMicroSeconds+0x38>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <NRF24_DelayMicroSeconds+0x3c>)
 8000c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c0e:	0c9a      	lsrs	r2, r3, #18
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	fb02 f303 	mul.w	r3, r2, r3
 8000c16:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000c18:	bf00      	nop
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	1e5a      	subs	r2, r3, #1
 8000c1e:	60fa      	str	r2, [r7, #12]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1fa      	bne.n	8000c1a <NRF24_DelayMicroSeconds+0x22>
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	20000010 	.word	0x20000010
 8000c34:	165e9f81 	.word	0x165e9f81

08000c38 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d008      	beq.n	8000c58 <NRF24_csn+0x20>
 8000c46:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <NRF24_csn+0x38>)
 8000c48:	6818      	ldr	r0, [r3, #0]
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <NRF24_csn+0x3c>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	2201      	movs	r2, #1
 8000c50:	4619      	mov	r1, r3
 8000c52:	f002 f9cf 	bl	8002ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000c56:	e007      	b.n	8000c68 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000c58:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <NRF24_csn+0x38>)
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <NRF24_csn+0x3c>)
 8000c5e:	881b      	ldrh	r3, [r3, #0]
 8000c60:	2200      	movs	r2, #0
 8000c62:	4619      	mov	r1, r3
 8000c64:	f002 f9c6 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000220 	.word	0x20000220
 8000c74:	20000224 	.word	0x20000224

08000c78 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d008      	beq.n	8000c98 <NRF24_ce+0x20>
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <NRF24_ce+0x38>)
 8000c88:	6818      	ldr	r0, [r3, #0]
 8000c8a:	4b0a      	ldr	r3, [pc, #40]	; (8000cb4 <NRF24_ce+0x3c>)
 8000c8c:	881b      	ldrh	r3, [r3, #0]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	4619      	mov	r1, r3
 8000c92:	f002 f9af 	bl	8002ff4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000c96:	e007      	b.n	8000ca8 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000c98:	4b05      	ldr	r3, [pc, #20]	; (8000cb0 <NRF24_ce+0x38>)
 8000c9a:	6818      	ldr	r0, [r3, #0]
 8000c9c:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <NRF24_ce+0x3c>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	f002 f9a6 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000220 	.word	0x20000220
 8000cb4:	20000226 	.word	0x20000226

08000cb8 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ffb8 	bl	8000c38 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000cd2:	f107 010c 	add.w	r1, r7, #12
 8000cd6:	2364      	movs	r3, #100	; 0x64
 8000cd8:	2201      	movs	r2, #1
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <NRF24_read_register+0x4c>)
 8000cdc:	f003 fd9e 	bl	800481c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	1c59      	adds	r1, r3, #1
 8000ce6:	2364      	movs	r3, #100	; 0x64
 8000ce8:	2201      	movs	r2, #1
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <NRF24_read_register+0x4c>)
 8000cec:	f003 fefc 	bl	8004ae8 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000cf0:	7b7b      	ldrb	r3, [r7, #13]
 8000cf2:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	f7ff ff9f 	bl	8000c38 <NRF24_csn>
	return retData;
 8000cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000228 	.word	0x20000228

08000d08 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	6039      	str	r1, [r7, #0]
 8000d12:	71fb      	strb	r3, [r7, #7]
 8000d14:	4613      	mov	r3, r2
 8000d16:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f7ff ff8d 	bl	8000c38 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000d1e:	79fb      	ldrb	r3, [r7, #7]
 8000d20:	f003 031f 	and.w	r3, r3, #31
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d28:	f107 010c 	add.w	r1, r7, #12
 8000d2c:	2364      	movs	r3, #100	; 0x64
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <NRF24_read_registerN+0x4c>)
 8000d32:	f003 fd73 	bl	800481c <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000d36:	79bb      	ldrb	r3, [r7, #6]
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	2364      	movs	r3, #100	; 0x64
 8000d3c:	6839      	ldr	r1, [r7, #0]
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <NRF24_read_registerN+0x4c>)
 8000d40:	f003 fed2 	bl	8004ae8 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000d44:	2001      	movs	r0, #1
 8000d46:	f7ff ff77 	bl	8000c38 <NRF24_csn>
}
 8000d4a:	bf00      	nop
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000228 	.word	0x20000228

08000d58 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	460a      	mov	r2, r1
 8000d62:	71fb      	strb	r3, [r7, #7]
 8000d64:	4613      	mov	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d68:	2000      	movs	r0, #0
 8000d6a:	f7ff ff65 	bl	8000c38 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f043 0320 	orr.w	r3, r3, #32
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000d78:	79bb      	ldrb	r3, [r7, #6]
 8000d7a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000d7c:	f107 010c 	add.w	r1, r7, #12
 8000d80:	2364      	movs	r3, #100	; 0x64
 8000d82:	2202      	movs	r2, #2
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <NRF24_write_register+0x40>)
 8000d86:	f003 fd49 	bl	800481c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f7ff ff54 	bl	8000c38 <NRF24_csn>
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000228 	.word	0x20000228

08000d9c <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	6039      	str	r1, [r7, #0]
 8000da6:	71fb      	strb	r3, [r7, #7]
 8000da8:	4613      	mov	r3, r2
 8000daa:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000dac:	2000      	movs	r0, #0
 8000dae:	f7ff ff43 	bl	8000c38 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000db2:	79fb      	ldrb	r3, [r7, #7]
 8000db4:	f043 0320 	orr.w	r3, r3, #32
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000dbc:	f107 010c 	add.w	r1, r7, #12
 8000dc0:	2364      	movs	r3, #100	; 0x64
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	4808      	ldr	r0, [pc, #32]	; (8000de8 <NRF24_write_registerN+0x4c>)
 8000dc6:	f003 fd29 	bl	800481c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000dca:	79bb      	ldrb	r3, [r7, #6]
 8000dcc:	b29a      	uxth	r2, r3
 8000dce:	2364      	movs	r3, #100	; 0x64
 8000dd0:	6839      	ldr	r1, [r7, #0]
 8000dd2:	4805      	ldr	r0, [pc, #20]	; (8000de8 <NRF24_write_registerN+0x4c>)
 8000dd4:	f003 fd22 	bl	800481c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000dd8:	2001      	movs	r0, #1
 8000dda:	f7ff ff2d 	bl	8000c38 <NRF24_csn>
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000228 	.word	0x20000228

08000dec <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	460b      	mov	r3, r1
 8000df6:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff ff1d 	bl	8000c38 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000dfe:	23a0      	movs	r3, #160	; 0xa0
 8000e00:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000e02:	f107 010f 	add.w	r1, r7, #15
 8000e06:	2364      	movs	r3, #100	; 0x64
 8000e08:	2201      	movs	r2, #1
 8000e0a:	4808      	ldr	r0, [pc, #32]	; (8000e2c <NRF24_write_payload+0x40>)
 8000e0c:	f003 fd06 	bl	800481c <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	2364      	movs	r3, #100	; 0x64
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <NRF24_write_payload+0x40>)
 8000e1a:	f003 fcff 	bl	800481c <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000e1e:	2001      	movs	r0, #1
 8000e20:	f7ff ff0a 	bl	8000c38 <NRF24_csn>
}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000228 	.word	0x20000228

08000e30 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000e3c:	f000 fa86 	bl	800134c <NRF24_getPayloadSize>
 8000e40:	4603      	mov	r3, r0
 8000e42:	461a      	mov	r2, r3
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d303      	bcc.n	8000e52 <NRF24_read_payload+0x22>
 8000e4a:	f000 fa7f 	bl	800134c <NRF24_getPayloadSize>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	e000      	b.n	8000e54 <NRF24_read_payload+0x24>
 8000e52:	78fb      	ldrb	r3, [r7, #3]
 8000e54:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff feee 	bl	8000c38 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000e5c:	2361      	movs	r3, #97	; 0x61
 8000e5e:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000e60:	f107 010e 	add.w	r1, r7, #14
 8000e64:	2364      	movs	r3, #100	; 0x64
 8000e66:	2201      	movs	r2, #1
 8000e68:	4808      	ldr	r0, [pc, #32]	; (8000e8c <NRF24_read_payload+0x5c>)
 8000e6a:	f003 fcd7 	bl	800481c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000e6e:	7bfb      	ldrb	r3, [r7, #15]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	2364      	movs	r3, #100	; 0x64
 8000e74:	6879      	ldr	r1, [r7, #4]
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <NRF24_read_payload+0x5c>)
 8000e78:	f003 fe36 	bl	8004ae8 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff fedb 	bl	8000c38 <NRF24_csn>
}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000228 	.word	0x20000228

08000e90 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000e94:	21ff      	movs	r1, #255	; 0xff
 8000e96:	20e1      	movs	r0, #225	; 0xe1
 8000e98:	f7ff ff5e 	bl	8000d58 <NRF24_write_register>
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000ea4:	21ff      	movs	r1, #255	; 0xff
 8000ea6:	20e2      	movs	r0, #226	; 0xe2
 8000ea8:	f7ff ff56 	bl	8000d58 <NRF24_write_register>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000eb6:	2007      	movs	r0, #7
 8000eb8:	f7ff fefe 	bl	8000cb8 <NRF24_read_register>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000ecc:	b082      	sub	sp, #8
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b084      	sub	sp, #16
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	61fb      	str	r3, [r7, #28]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
 8000edc:	4613      	mov	r3, r2
 8000ede:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000ee0:	4b66      	ldr	r3, [pc, #408]	; (800107c <NRF24_begin+0x1b0>)
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	2264      	movs	r2, #100	; 0x64
 8000eea:	4619      	mov	r1, r3
 8000eec:	f005 f9dc 	bl	80062a8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000ef0:	4a63      	ldr	r2, [pc, #396]	; (8001080 <NRF24_begin+0x1b4>)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000ef6:	4a63      	ldr	r2, [pc, #396]	; (8001084 <NRF24_begin+0x1b8>)
 8000ef8:	887b      	ldrh	r3, [r7, #2]
 8000efa:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000efc:	4a62      	ldr	r2, [pc, #392]	; (8001088 <NRF24_begin+0x1bc>)
 8000efe:	883b      	ldrh	r3, [r7, #0]
 8000f00:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000f02:	2001      	movs	r0, #1
 8000f04:	f7ff fe98 	bl	8000c38 <NRF24_csn>
	NRF24_ce(0);
 8000f08:	2000      	movs	r0, #0
 8000f0a:	f7ff feb5 	bl	8000c78 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f001 fdc6 	bl	8002aa0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000f14:	2108      	movs	r1, #8
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff ff1e 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000f1c:	213f      	movs	r1, #63	; 0x3f
 8000f1e:	2001      	movs	r0, #1
 8000f20:	f7ff ff1a 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000f24:	2103      	movs	r1, #3
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff ff16 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000f2c:	2103      	movs	r1, #3
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f7ff ff12 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000f34:	2103      	movs	r1, #3
 8000f36:	2004      	movs	r0, #4
 8000f38:	f7ff ff0e 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000f3c:	2102      	movs	r1, #2
 8000f3e:	2005      	movs	r0, #5
 8000f40:	f7ff ff0a 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000f44:	210f      	movs	r1, #15
 8000f46:	2006      	movs	r0, #6
 8000f48:	f7ff ff06 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000f4c:	210e      	movs	r1, #14
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f7ff ff02 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2008      	movs	r0, #8
 8000f58:	f7ff fefe 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2009      	movs	r0, #9
 8000f60:	f7ff fefa 	bl	8000d58 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000f64:	23e7      	movs	r3, #231	; 0xe7
 8000f66:	733b      	strb	r3, [r7, #12]
 8000f68:	23e7      	movs	r3, #231	; 0xe7
 8000f6a:	72fb      	strb	r3, [r7, #11]
 8000f6c:	23e7      	movs	r3, #231	; 0xe7
 8000f6e:	72bb      	strb	r3, [r7, #10]
 8000f70:	23e7      	movs	r3, #231	; 0xe7
 8000f72:	727b      	strb	r3, [r7, #9]
 8000f74:	23e7      	movs	r3, #231	; 0xe7
 8000f76:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000f78:	f107 0308 	add.w	r3, r7, #8
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	4619      	mov	r1, r3
 8000f80:	200a      	movs	r0, #10
 8000f82:	f7ff ff0b 	bl	8000d9c <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000f86:	23c2      	movs	r3, #194	; 0xc2
 8000f88:	733b      	strb	r3, [r7, #12]
 8000f8a:	23c2      	movs	r3, #194	; 0xc2
 8000f8c:	72fb      	strb	r3, [r7, #11]
 8000f8e:	23c2      	movs	r3, #194	; 0xc2
 8000f90:	72bb      	strb	r3, [r7, #10]
 8000f92:	23c2      	movs	r3, #194	; 0xc2
 8000f94:	727b      	strb	r3, [r7, #9]
 8000f96:	23c2      	movs	r3, #194	; 0xc2
 8000f98:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	2205      	movs	r2, #5
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	200b      	movs	r0, #11
 8000fa4:	f7ff fefa 	bl	8000d9c <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000fa8:	21c3      	movs	r1, #195	; 0xc3
 8000faa:	200c      	movs	r0, #12
 8000fac:	f7ff fed4 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000fb0:	21c4      	movs	r1, #196	; 0xc4
 8000fb2:	200d      	movs	r0, #13
 8000fb4:	f7ff fed0 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000fb8:	21c5      	movs	r1, #197	; 0xc5
 8000fba:	200e      	movs	r0, #14
 8000fbc:	f7ff fecc 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000fc0:	21c6      	movs	r1, #198	; 0xc6
 8000fc2:	200f      	movs	r0, #15
 8000fc4:	f7ff fec8 	bl	8000d58 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000fc8:	23e7      	movs	r3, #231	; 0xe7
 8000fca:	733b      	strb	r3, [r7, #12]
 8000fcc:	23e7      	movs	r3, #231	; 0xe7
 8000fce:	72fb      	strb	r3, [r7, #11]
 8000fd0:	23e7      	movs	r3, #231	; 0xe7
 8000fd2:	72bb      	strb	r3, [r7, #10]
 8000fd4:	23e7      	movs	r3, #231	; 0xe7
 8000fd6:	727b      	strb	r3, [r7, #9]
 8000fd8:	23e7      	movs	r3, #231	; 0xe7
 8000fda:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000fdc:	f107 0308 	add.w	r3, r7, #8
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f7ff fed9 	bl	8000d9c <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000fea:	2100      	movs	r1, #0
 8000fec:	2011      	movs	r0, #17
 8000fee:	f7ff feb3 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2012      	movs	r0, #18
 8000ff6:	f7ff feaf 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2013      	movs	r0, #19
 8000ffe:	f7ff feab 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8001002:	2100      	movs	r1, #0
 8001004:	2014      	movs	r0, #20
 8001006:	f7ff fea7 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800100a:	2100      	movs	r1, #0
 800100c:	2015      	movs	r0, #21
 800100e:	f7ff fea3 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8001012:	2100      	movs	r1, #0
 8001014:	2016      	movs	r0, #22
 8001016:	f7ff fe9f 	bl	8000d58 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800101a:	f000 fb29 	bl	8001670 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800101e:	2100      	movs	r1, #0
 8001020:	201c      	movs	r0, #28
 8001022:	f7ff fe99 	bl	8000d58 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001026:	2100      	movs	r1, #0
 8001028:	201d      	movs	r0, #29
 800102a:	f7ff fe95 	bl	8000d58 <NRF24_write_register>
	printRadioSettings();
 800102e:	f000 fb39 	bl	80016a4 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8001032:	210f      	movs	r1, #15
 8001034:	200f      	movs	r0, #15
 8001036:	f000 f941 	bl	80012bc <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800103a:	2003      	movs	r0, #3
 800103c:	f000 f9c7 	bl	80013ce <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8001040:	2001      	movs	r0, #1
 8001042:	f000 f9fd 	bl	8001440 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001046:	2002      	movs	r0, #2
 8001048:	f000 fa40 	bl	80014cc <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 800104c:	f000 f992 	bl	8001374 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8001050:	2020      	movs	r0, #32
 8001052:	f000 f963 	bl	800131c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001056:	f000 fb02 	bl	800165e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800105a:	204c      	movs	r0, #76	; 0x4c
 800105c:	f000 f949 	bl	80012f2 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8001060:	f7ff ff16 	bl	8000e90 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001064:	f7ff ff1c 	bl	8000ea0 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001068:	f000 fa58 	bl	800151c <NRF24_powerDown>
	
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001076:	b002      	add	sp, #8
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20000228 	.word	0x20000228
 8001080:	20000220 	.word	0x20000220
 8001084:	20000224 	.word	0x20000224
 8001088:	20000226 	.word	0x20000226

0800108c <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 800108c:	b598      	push	{r3, r4, r7, lr}
 800108e:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff fe11 	bl	8000cb8 <NRF24_read_register>
 8001096:	4603      	mov	r3, r0
 8001098:	f043 0303 	orr.w	r3, r3, #3
 800109c:	b2db      	uxtb	r3, r3
 800109e:	4619      	mov	r1, r3
 80010a0:	2000      	movs	r0, #0
 80010a2:	f7ff fe59 	bl	8000d58 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 80010a6:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <NRF24_startListening+0x48>)
 80010a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010ac:	4323      	orrs	r3, r4
 80010ae:	d004      	beq.n	80010ba <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 80010b0:	2205      	movs	r2, #5
 80010b2:	4908      	ldr	r1, [pc, #32]	; (80010d4 <NRF24_startListening+0x48>)
 80010b4:	200a      	movs	r0, #10
 80010b6:	f7ff fe71 	bl	8000d9c <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 80010ba:	f7ff fee9 	bl	8000e90 <NRF24_flush_tx>
	NRF24_flush_rx();
 80010be:	f7ff feef 	bl	8000ea0 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fdd8 	bl	8000c78 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 80010c8:	2096      	movs	r0, #150	; 0x96
 80010ca:	f7ff fd95 	bl	8000bf8 <NRF24_DelayMicroSeconds>
}
 80010ce:	bf00      	nop
 80010d0:	bd98      	pop	{r3, r4, r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000210 	.word	0x20000210

080010d8 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80010dc:	2000      	movs	r0, #0
 80010de:	f7ff fdcb 	bl	8000c78 <NRF24_ce>
	NRF24_flush_tx();
 80010e2:	f7ff fed5 	bl	8000e90 <NRF24_flush_tx>
	NRF24_flush_rx();
 80010e6:	f7ff fedb 	bl	8000ea0 <NRF24_flush_rx>
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	460b      	mov	r3, r1
 80010fa:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80010fc:	f000 faaf 	bl	800165e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	4619      	mov	r1, r3
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 fa48 	bl	800159a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 800110a:	f001 fcbd 	bl	8002a88 <HAL_GetTick>
 800110e:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8001110:	230a      	movs	r3, #10
 8001112:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001114:	f107 030d 	add.w	r3, r7, #13
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	2008      	movs	r0, #8
 800111e:	f7ff fdf3 	bl	8000d08 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001122:	f7ff fec5 	bl	8000eb0 <NRF24_get_status>
 8001126:	4603      	mov	r3, r0
 8001128:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001130:	2b00      	cmp	r3, #0
 8001132:	d107      	bne.n	8001144 <NRF24_write+0x54>
 8001134:	f001 fca8 	bl	8002a88 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d8e7      	bhi.n	8001114 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001144:	f107 010b 	add.w	r1, r7, #11
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <NRF24_write+0x90>)
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fa52 	bl	80015f8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001154:	7b3b      	ldrb	r3, [r7, #12]
 8001156:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001158:	4b09      	ldr	r3, [pc, #36]	; (8001180 <NRF24_write+0x90>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d005      	beq.n	800116c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001160:	f000 f900 	bl	8001364 <NRF24_getDynamicPayloadSize>
 8001164:	4603      	mov	r3, r0
 8001166:	461a      	mov	r2, r3
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <NRF24_write+0x94>)
 800116a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 800116c:	f000 f80c 	bl	8001188 <NRF24_available>
	NRF24_flush_tx();
 8001170:	f7ff fe8e 	bl	8000e90 <NRF24_flush_tx>
	return retStatus;
 8001174:	7bbb      	ldrb	r3, [r7, #14]
}
 8001176:	4618      	mov	r0, r3
 8001178:	3718      	adds	r7, #24
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000218 	.word	0x20000218
 8001184:	20000219 	.word	0x20000219

08001188 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f9d4 	bl	800153a <NRF24_availablePipe>
 8001192:	4603      	mov	r3, r0
}
 8001194:	4618      	mov	r0, r3
 8001196:	bd80      	pop	{r7, pc}

08001198 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80011a4:	78fb      	ldrb	r3, [r7, #3]
 80011a6:	4619      	mov	r1, r3
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff fe41 	bl	8000e30 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80011ae:	2017      	movs	r0, #23
 80011b0:	f7ff fd82 	bl	8000cb8 <NRF24_read_register>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80011bc:	f7ff fe70 	bl	8000ea0 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80011c0:	f000 f8d0 	bl	8001364 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	bf14      	ite	ne
 80011ca:	2301      	movne	r3, #1
 80011cc:	2300      	moveq	r3, #0
 80011ce:	b2db      	uxtb	r3, r3
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3710      	adds	r7, #16
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80011e2:	463b      	mov	r3, r7
 80011e4:	2205      	movs	r2, #5
 80011e6:	4619      	mov	r1, r3
 80011e8:	200a      	movs	r0, #10
 80011ea:	f7ff fdd7 	bl	8000d9c <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80011ee:	463b      	mov	r3, r7
 80011f0:	2205      	movs	r2, #5
 80011f2:	4619      	mov	r1, r3
 80011f4:	2010      	movs	r0, #16
 80011f6:	f7ff fdd1 	bl	8000d9c <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80011fa:	2320      	movs	r3, #32
 80011fc:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <NRF24_openWritingPipe+0x44>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	7bfa      	ldrb	r2, [r7, #15]
 8001204:	4293      	cmp	r3, r2
 8001206:	bf28      	it	cs
 8001208:	4613      	movcs	r3, r2
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	2011      	movs	r0, #17
 8001210:	f7ff fda2 	bl	8000d58 <NRF24_write_register>
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000021a 	.word	0x2000021a

08001220 <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	4601      	mov	r1, r0
 8001228:	e9c7 2300 	strd	r2, r3, [r7]
 800122c:	460b      	mov	r3, r1
 800122e:	73fb      	strb	r3, [r7, #15]
	if (number == 0)
 8001230:	7bfb      	ldrb	r3, [r7, #15]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d104      	bne.n	8001240 <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8001236:	e9d7 3400 	ldrd	r3, r4, [r7]
 800123a:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <NRF24_openReadingPipe+0x8c>)
 800123c:	e9c2 3400 	strd	r3, r4, [r2]
	
	if(number <= 6)
 8001240:	7bfb      	ldrb	r3, [r7, #15]
 8001242:	2b06      	cmp	r3, #6
 8001244:	d82d      	bhi.n	80012a2 <NRF24_openReadingPipe+0x82>
	{
		if(number < 2)
 8001246:	7bfb      	ldrb	r3, [r7, #15]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d808      	bhi.n	800125e <NRF24_openReadingPipe+0x3e>
		{
			//Address width is 5 bytes
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <NRF24_openReadingPipe+0x90>)
 8001250:	5cd3      	ldrb	r3, [r2, r3]
 8001252:	4639      	mov	r1, r7
 8001254:	2205      	movs	r2, #5
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff fda0 	bl	8000d9c <NRF24_write_registerN>
 800125c:	e007      	b.n	800126e <NRF24_openReadingPipe+0x4e>
		}
		else
		{
			NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <NRF24_openReadingPipe+0x90>)
 8001262:	5cd3      	ldrb	r3, [r2, r3]
 8001264:	4639      	mov	r1, r7
 8001266:	2201      	movs	r2, #1
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff fd97 	bl	8000d9c <NRF24_write_registerN>
		}
		//Write payload size
		NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800126e:	7bfb      	ldrb	r3, [r7, #15]
 8001270:	4a10      	ldr	r2, [pc, #64]	; (80012b4 <NRF24_openReadingPipe+0x94>)
 8001272:	5cd2      	ldrb	r2, [r2, r3]
 8001274:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <NRF24_openReadingPipe+0x98>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	4619      	mov	r1, r3
 800127a:	4610      	mov	r0, r2
 800127c:	f7ff fd6c 	bl	8000d58 <NRF24_write_register>
		//Enable pipe
		NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 8001280:	2002      	movs	r0, #2
 8001282:	f7ff fd19 	bl	8000cb8 <NRF24_read_register>
 8001286:	4603      	mov	r3, r0
 8001288:	b25a      	sxtb	r2, r3
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2101      	movs	r1, #1
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	b25b      	sxtb	r3, r3
 8001294:	4313      	orrs	r3, r2
 8001296:	b25b      	sxtb	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	4619      	mov	r1, r3
 800129c:	2002      	movs	r0, #2
 800129e:	f7ff fd5b 	bl	8000d58 <NRF24_write_register>
	}
	
}
 80012a2:	bf00      	nop
 80012a4:	3714      	adds	r7, #20
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd90      	pop	{r4, r7, pc}
 80012aa:	bf00      	nop
 80012ac:	20000210 	.word	0x20000210
 80012b0:	08008940 	.word	0x08008940
 80012b4:	08008948 	.word	0x08008948
 80012b8:	2000021a 	.word	0x2000021a

080012bc <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	460a      	mov	r2, r1
 80012c6:	71fb      	strb	r3, [r7, #7]
 80012c8:	4613      	mov	r3, r2
 80012ca:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	011b      	lsls	r3, r3, #4
 80012d0:	b25a      	sxtb	r2, r3
 80012d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b25b      	sxtb	r3, r3
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2004      	movs	r0, #4
 80012e6:	f7ff fd37 	bl	8000d58 <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b084      	sub	sp, #16
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80012fc:	237f      	movs	r3, #127	; 0x7f
 80012fe:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001300:	7bfa      	ldrb	r2, [r7, #15]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4293      	cmp	r3, r2
 8001306:	bf28      	it	cs
 8001308:	4613      	movcs	r3, r2
 800130a:	b2db      	uxtb	r3, r3
 800130c:	4619      	mov	r1, r3
 800130e:	2005      	movs	r0, #5
 8001310:	f7ff fd22 	bl	8000d58 <NRF24_write_register>
}
 8001314:	bf00      	nop
 8001316:	3710      	adds	r7, #16
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	4603      	mov	r3, r0
 8001324:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001326:	2320      	movs	r3, #32
 8001328:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	4293      	cmp	r3, r2
 8001330:	bf28      	it	cs
 8001332:	4613      	movcs	r3, r2
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <NRF24_setPayloadSize+0x2c>)
 8001338:	701a      	strb	r2, [r3, #0]
}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	2000021a 	.word	0x2000021a

0800134c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
	return payload_size;
 8001350:	4b03      	ldr	r3, [pc, #12]	; (8001360 <NRF24_getPayloadSize+0x14>)
 8001352:	781b      	ldrb	r3, [r3, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	2000021a 	.word	0x2000021a

08001364 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8001368:	2060      	movs	r0, #96	; 0x60
 800136a:	f7ff fca5 	bl	8000cb8 <NRF24_read_register>
 800136e:	4603      	mov	r3, r0
}
 8001370:	4618      	mov	r0, r3
 8001372:	bd80      	pop	{r7, pc}

08001374 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001378:	201d      	movs	r0, #29
 800137a:	f7ff fc9d 	bl	8000cb8 <NRF24_read_register>
 800137e:	4603      	mov	r3, r0
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	b2db      	uxtb	r3, r3
 8001386:	4619      	mov	r1, r3
 8001388:	201d      	movs	r0, #29
 800138a:	f7ff fce5 	bl	8000d58 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800138e:	2100      	movs	r1, #0
 8001390:	201c      	movs	r0, #28
 8001392:	f7ff fce1 	bl	8000d58 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001396:	4b02      	ldr	r3, [pc, #8]	; (80013a0 <NRF24_disableDynamicPayloads+0x2c>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	2000021b 	.word	0x2000021b

080013a4 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d004      	beq.n	80013be <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80013b4:	213f      	movs	r1, #63	; 0x3f
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff fcce 	bl	8000d58 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80013bc:	e003      	b.n	80013c6 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80013be:	2100      	movs	r1, #0
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff fcc9 	bl	8000d58 <NRF24_write_register>
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80013d8:	2006      	movs	r0, #6
 80013da:	f7ff fc6d 	bl	8000cb8 <NRF24_read_register>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	f023 0306 	bic.w	r3, r3, #6
 80013e8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b03      	cmp	r3, #3
 80013ee:	d104      	bne.n	80013fa <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	f043 0306 	orr.w	r3, r3, #6
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e019      	b.n	800142e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d104      	bne.n	800140a <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	73fb      	strb	r3, [r7, #15]
 8001408:	e011      	b.n	800142e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d104      	bne.n	800141a <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	f043 0302 	orr.w	r3, r3, #2
 8001416:	73fb      	strb	r3, [r7, #15]
 8001418:	e009      	b.n	800142e <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d006      	beq.n	800142e <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	2b04      	cmp	r3, #4
 8001424:	d103      	bne.n	800142e <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	f043 0306 	orr.w	r3, r3, #6
 800142c:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	4619      	mov	r1, r3
 8001432:	2006      	movs	r0, #6
 8001434:	f7ff fc90 	bl	8000d58 <NRF24_write_register>
}
 8001438:	bf00      	nop
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800144a:	2300      	movs	r3, #0
 800144c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800144e:	2006      	movs	r0, #6
 8001450:	f7ff fc32 	bl	8000cb8 <NRF24_read_register>
 8001454:	4603      	mov	r3, r0
 8001456:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001458:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <NRF24_setDataRate+0x88>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800145e:	7bbb      	ldrb	r3, [r7, #14]
 8001460:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001464:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d107      	bne.n	800147c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <NRF24_setDataRate+0x88>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001472:	7bbb      	ldrb	r3, [r7, #14]
 8001474:	f043 0320 	orr.w	r3, r3, #32
 8001478:	73bb      	strb	r3, [r7, #14]
 800147a:	e00d      	b.n	8001498 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d107      	bne.n	8001492 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <NRF24_setDataRate+0x88>)
 8001484:	2201      	movs	r2, #1
 8001486:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001488:	7bbb      	ldrb	r3, [r7, #14]
 800148a:	f043 0308 	orr.w	r3, r3, #8
 800148e:	73bb      	strb	r3, [r7, #14]
 8001490:	e002      	b.n	8001498 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <NRF24_setDataRate+0x88>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	4619      	mov	r1, r3
 800149c:	2006      	movs	r0, #6
 800149e:	f7ff fc5b 	bl	8000d58 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80014a2:	2006      	movs	r0, #6
 80014a4:	f7ff fc08 	bl	8000cb8 <NRF24_read_register>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	7bbb      	ldrb	r3, [r7, #14]
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d102      	bne.n	80014b8 <NRF24_setDataRate+0x78>
  {
    result = true;
 80014b2:	2301      	movs	r3, #1
 80014b4:	73fb      	strb	r3, [r7, #15]
 80014b6:	e002      	b.n	80014be <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80014b8:	4b03      	ldr	r3, [pc, #12]	; (80014c8 <NRF24_setDataRate+0x88>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80014be:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3710      	adds	r7, #16
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000021c 	.word	0x2000021c

080014cc <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fbee 	bl	8000cb8 <NRF24_read_register>
 80014dc:	4603      	mov	r3, r0
 80014de:	f023 030c 	bic.w	r3, r3, #12
 80014e2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d00f      	beq.n	800150a <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d104      	bne.n	80014fa <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80014f0:	7bfb      	ldrb	r3, [r7, #15]
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	73fb      	strb	r3, [r7, #15]
 80014f8:	e007      	b.n	800150a <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	f043 0308 	orr.w	r3, r3, #8
 8001500:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800150a:	7bfb      	ldrb	r3, [r7, #15]
 800150c:	4619      	mov	r1, r3
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fc22 	bl	8000d58 <NRF24_write_register>
}
 8001514:	bf00      	nop
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001520:	2000      	movs	r0, #0
 8001522:	f7ff fbc9 	bl	8000cb8 <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f023 0302 	bic.w	r3, r3, #2
 800152c:	b2db      	uxtb	r3, r3
 800152e:	4619      	mov	r1, r3
 8001530:	2000      	movs	r0, #0
 8001532:	f7ff fc11 	bl	8000d58 <NRF24_write_register>
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}

0800153a <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001542:	f7ff fcb5 	bl	8000eb0 <NRF24_get_status>
 8001546:	4603      	mov	r3, r0
 8001548:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800154a:	7bfb      	ldrb	r3, [r7, #15]
 800154c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001550:	2b00      	cmp	r3, #0
 8001552:	bf14      	ite	ne
 8001554:	2301      	movne	r3, #1
 8001556:	2300      	moveq	r3, #0
 8001558:	73bb      	strb	r3, [r7, #14]

  if (result)
 800155a:	7bbb      	ldrb	r3, [r7, #14]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d017      	beq.n	8001590 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	085b      	lsrs	r3, r3, #1
 800156a:	b2db      	uxtb	r3, r3
 800156c:	f003 0307 	and.w	r3, r3, #7
 8001570:	b2da      	uxtb	r2, r3
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	2007      	movs	r0, #7
 800157a:	f7ff fbed 	bl	8000d58 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800157e:	7bfb      	ldrb	r3, [r7, #15]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	2b00      	cmp	r3, #0
 8001586:	d003      	beq.n	8001590 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001588:	2120      	movs	r1, #32
 800158a:	2007      	movs	r0, #7
 800158c:	f7ff fbe4 	bl	8000d58 <NRF24_write_register>
    }
  }
  return result;
 8001590:	7bbb      	ldrb	r3, [r7, #14]
}
 8001592:	4618      	mov	r0, r3
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
 80015a2:	460b      	mov	r3, r1
 80015a4:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80015a6:	2000      	movs	r0, #0
 80015a8:	f7ff fb66 	bl	8000c78 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff fb83 	bl	8000cb8 <NRF24_read_register>
 80015b2:	4603      	mov	r3, r0
 80015b4:	f043 0302 	orr.w	r3, r3, #2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	f023 0301 	bic.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	4619      	mov	r1, r3
 80015c2:	2000      	movs	r0, #0
 80015c4:	f7ff fbc8 	bl	8000d58 <NRF24_write_register>
  NRF24_ce(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f7ff fb55 	bl	8000c78 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 80015ce:	2096      	movs	r0, #150	; 0x96
 80015d0:	f7ff fb12 	bl	8000bf8 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80015d4:	78fb      	ldrb	r3, [r7, #3]
 80015d6:	4619      	mov	r1, r3
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff fc07 	bl	8000dec <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80015de:	2001      	movs	r0, #1
 80015e0:	f7ff fb4a 	bl	8000c78 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80015e4:	200f      	movs	r0, #15
 80015e6:	f7ff fb07 	bl	8000bf8 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80015ea:	2000      	movs	r0, #0
 80015ec:	f7ff fb44 	bl	8000c78 <NRF24_ce>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001604:	f7ff fc54 	bl	8000eb0 <NRF24_get_status>
 8001608:	4603      	mov	r3, r0
 800160a:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001612:	2170      	movs	r1, #112	; 0x70
 8001614:	2007      	movs	r0, #7
 8001616:	f7ff fb9f 	bl	8000d58 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	f003 0320 	and.w	r3, r3, #32
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf14      	ite	ne
 8001624:	2301      	movne	r3, #1
 8001626:	2300      	moveq	r3, #0
 8001628:	b2da      	uxtb	r2, r3
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	f003 0310 	and.w	r3, r3, #16
 8001634:	2b00      	cmp	r3, #0
 8001636:	bf14      	ite	ne
 8001638:	2301      	movne	r3, #1
 800163a:	2300      	moveq	r3, #0
 800163c:	b2da      	uxtb	r2, r3
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001642:	7dfb      	ldrb	r3, [r7, #23]
 8001644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001648:	2b00      	cmp	r3, #0
 800164a:	bf14      	ite	ne
 800164c:	2301      	movne	r3, #1
 800164e:	2300      	moveq	r3, #0
 8001650:	b2da      	uxtb	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	701a      	strb	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	3718      	adds	r7, #24
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001662:	2170      	movs	r1, #112	; 0x70
 8001664:	2007      	movs	r0, #7
 8001666:	f7ff fb77 	bl	8000d58 <NRF24_write_register>
}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001676:	2000      	movs	r0, #0
 8001678:	f7ff fade 	bl	8000c38 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800167c:	2350      	movs	r3, #80	; 0x50
 800167e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001680:	2373      	movs	r3, #115	; 0x73
 8001682:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001684:	1d39      	adds	r1, r7, #4
 8001686:	2364      	movs	r3, #100	; 0x64
 8001688:	2202      	movs	r2, #2
 800168a:	4805      	ldr	r0, [pc, #20]	; (80016a0 <NRF24_ACTIVATE_cmd+0x30>)
 800168c:	f003 f8c6 	bl	800481c <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff fad1 	bl	8000c38 <NRF24_csn>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000228 	.word	0x20000228

080016a4 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b0a1      	sub	sp, #132	; 0x84
 80016a8:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80016aa:	f107 0308 	add.w	r3, r7, #8
 80016ae:	4ab6      	ldr	r2, [pc, #728]	; (8001988 <printRadioSettings+0x2e4>)
 80016b0:	461c      	mov	r4, r3
 80016b2:	4615      	mov	r5, r2
 80016b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	461a      	mov	r2, r3
 80016c4:	8022      	strh	r2, [r4, #0]
 80016c6:	3402      	adds	r4, #2
 80016c8:	0c1b      	lsrs	r3, r3, #16
 80016ca:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fd85 	bl	80001e0 <strlen>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f107 0108 	add.w	r1, r7, #8
 80016de:	230a      	movs	r3, #10
 80016e0:	48aa      	ldr	r0, [pc, #680]	; (800198c <printRadioSettings+0x2e8>)
 80016e2:	f004 f9a7 	bl	8005a34 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f7ff fae6 	bl	8000cb8 <NRF24_read_register>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80016f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d020      	beq.n	8001740 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80016fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <printRadioSettings+0x7e>
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4aa0      	ldr	r2, [pc, #640]	; (8001990 <printRadioSettings+0x2ec>)
 8001710:	461c      	mov	r4, r3
 8001712:	4615      	mov	r5, r2
 8001714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001718:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800171c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001720:	e017      	b.n	8001752 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001722:	f107 0308 	add.w	r3, r7, #8
 8001726:	4a9b      	ldr	r2, [pc, #620]	; (8001994 <printRadioSettings+0x2f0>)
 8001728:	461c      	mov	r4, r3
 800172a:	4615      	mov	r5, r2
 800172c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001734:	c403      	stmia	r4!, {r0, r1}
 8001736:	8022      	strh	r2, [r4, #0]
 8001738:	3402      	adds	r4, #2
 800173a:	0c13      	lsrs	r3, r2, #16
 800173c:	7023      	strb	r3, [r4, #0]
 800173e:	e008      	b.n	8001752 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	4a94      	ldr	r2, [pc, #592]	; (8001998 <printRadioSettings+0x2f4>)
 8001746:	461c      	mov	r4, r3
 8001748:	4615      	mov	r5, r2
 800174a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800174c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800174e:	682b      	ldr	r3, [r5, #0]
 8001750:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001752:	f107 0308 	add.w	r3, r7, #8
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe fd42 	bl	80001e0 <strlen>
 800175c:	4603      	mov	r3, r0
 800175e:	b29a      	uxth	r2, r3
 8001760:	f107 0108 	add.w	r1, r7, #8
 8001764:	230a      	movs	r3, #10
 8001766:	4889      	ldr	r0, [pc, #548]	; (800198c <printRadioSettings+0x2e8>)
 8001768:	f004 f964 	bl	8005a34 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800176c:	2001      	movs	r0, #1
 800176e:	f7ff faa3 	bl	8000cb8 <NRF24_read_register>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001778:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800177c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001780:	2b00      	cmp	r3, #0
 8001782:	bfcc      	ite	gt
 8001784:	2301      	movgt	r3, #1
 8001786:	2300      	movle	r3, #0
 8001788:	b2db      	uxtb	r3, r3
 800178a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800178c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001790:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001794:	2b00      	cmp	r3, #0
 8001796:	bfcc      	ite	gt
 8001798:	2301      	movgt	r3, #1
 800179a:	2300      	movle	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017a0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a4:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	bfcc      	ite	gt
 80017ac:	2301      	movgt	r3, #1
 80017ae:	2300      	movle	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017b4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bfcc      	ite	gt
 80017c0:	2301      	movgt	r3, #1
 80017c2:	2300      	movle	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017c8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017cc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	bfcc      	ite	gt
 80017d4:	2301      	movgt	r3, #1
 80017d6:	2300      	movle	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80017dc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bfcc      	ite	gt
 80017e8:	2301      	movgt	r3, #1
 80017ea:	2300      	movle	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	f107 0008 	add.w	r0, r7, #8
 80017f2:	9303      	str	r3, [sp, #12]
 80017f4:	9402      	str	r4, [sp, #8]
 80017f6:	9101      	str	r1, [sp, #4]
 80017f8:	9200      	str	r2, [sp, #0]
 80017fa:	4633      	mov	r3, r6
 80017fc:	462a      	mov	r2, r5
 80017fe:	4967      	ldr	r1, [pc, #412]	; (800199c <printRadioSettings+0x2f8>)
 8001800:	f005 f9c2 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fce9 	bl	80001e0 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	b29a      	uxth	r2, r3
 8001812:	f107 0108 	add.w	r1, r7, #8
 8001816:	230a      	movs	r3, #10
 8001818:	485c      	ldr	r0, [pc, #368]	; (800198c <printRadioSettings+0x2e8>)
 800181a:	f004 f90b 	bl	8005a34 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800181e:	2002      	movs	r0, #2
 8001820:	f7ff fa4a 	bl	8000cb8 <NRF24_read_register>
 8001824:	4603      	mov	r3, r0
 8001826:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800182a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800182e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001832:	2b00      	cmp	r3, #0
 8001834:	bfcc      	ite	gt
 8001836:	2301      	movgt	r3, #1
 8001838:	2300      	movle	r3, #0
 800183a:	b2db      	uxtb	r3, r3
 800183c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800183e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001842:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001846:	2b00      	cmp	r3, #0
 8001848:	bfcc      	ite	gt
 800184a:	2301      	movgt	r3, #1
 800184c:	2300      	movle	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001852:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001856:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800185a:	2b00      	cmp	r3, #0
 800185c:	bfcc      	ite	gt
 800185e:	2301      	movgt	r3, #1
 8001860:	2300      	movle	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001866:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800186a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800186e:	2b00      	cmp	r3, #0
 8001870:	bfcc      	ite	gt
 8001872:	2301      	movgt	r3, #1
 8001874:	2300      	movle	r3, #0
 8001876:	b2db      	uxtb	r3, r3
 8001878:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800187a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800187e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001882:	2b00      	cmp	r3, #0
 8001884:	bfcc      	ite	gt
 8001886:	2301      	movgt	r3, #1
 8001888:	2300      	movle	r3, #0
 800188a:	b2db      	uxtb	r3, r3
 800188c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800188e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001892:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001896:	2b00      	cmp	r3, #0
 8001898:	bfcc      	ite	gt
 800189a:	2301      	movgt	r3, #1
 800189c:	2300      	movle	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	f107 0008 	add.w	r0, r7, #8
 80018a4:	9303      	str	r3, [sp, #12]
 80018a6:	9402      	str	r4, [sp, #8]
 80018a8:	9101      	str	r1, [sp, #4]
 80018aa:	9200      	str	r2, [sp, #0]
 80018ac:	4633      	mov	r3, r6
 80018ae:	462a      	mov	r2, r5
 80018b0:	493b      	ldr	r1, [pc, #236]	; (80019a0 <printRadioSettings+0x2fc>)
 80018b2:	f005 f969 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fc90 	bl	80001e0 <strlen>
 80018c0:	4603      	mov	r3, r0
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	f107 0108 	add.w	r1, r7, #8
 80018c8:	230a      	movs	r3, #10
 80018ca:	4830      	ldr	r0, [pc, #192]	; (800198c <printRadioSettings+0x2e8>)
 80018cc:	f004 f8b2 	bl	8005a34 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80018d0:	2003      	movs	r0, #3
 80018d2:	f7ff f9f1 	bl	8000cb8 <NRF24_read_register>
 80018d6:	4603      	mov	r3, r0
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80018e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80018e4:	3302      	adds	r3, #2
 80018e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80018ea:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80018ee:	f107 0308 	add.w	r3, r7, #8
 80018f2:	492c      	ldr	r1, [pc, #176]	; (80019a4 <printRadioSettings+0x300>)
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 f947 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018fa:	f107 0308 	add.w	r3, r7, #8
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fc6e 	bl	80001e0 <strlen>
 8001904:	4603      	mov	r3, r0
 8001906:	b29a      	uxth	r2, r3
 8001908:	f107 0108 	add.w	r1, r7, #8
 800190c:	230a      	movs	r3, #10
 800190e:	481f      	ldr	r0, [pc, #124]	; (800198c <printRadioSettings+0x2e8>)
 8001910:	f004 f890 	bl	8005a34 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001914:	2005      	movs	r0, #5
 8001916:	f7ff f9cf 	bl	8000cb8 <NRF24_read_register>
 800191a:	4603      	mov	r3, r0
 800191c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001920:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001924:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001928:	f107 0308 	add.w	r3, r7, #8
 800192c:	491e      	ldr	r1, [pc, #120]	; (80019a8 <printRadioSettings+0x304>)
 800192e:	4618      	mov	r0, r3
 8001930:	f005 f92a 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fc51 	bl	80001e0 <strlen>
 800193e:	4603      	mov	r3, r0
 8001940:	b29a      	uxth	r2, r3
 8001942:	f107 0108 	add.w	r1, r7, #8
 8001946:	230a      	movs	r3, #10
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <printRadioSettings+0x2e8>)
 800194a:	f004 f873 	bl	8005a34 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800194e:	2006      	movs	r0, #6
 8001950:	f7ff f9b2 	bl	8000cb8 <NRF24_read_register>
 8001954:	4603      	mov	r3, r0
 8001956:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800195a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800195e:	f003 0308 	and.w	r3, r3, #8
 8001962:	2b00      	cmp	r3, #0
 8001964:	d024      	beq.n	80019b0 <printRadioSettings+0x30c>
 8001966:	f107 0308 	add.w	r3, r7, #8
 800196a:	4a10      	ldr	r2, [pc, #64]	; (80019ac <printRadioSettings+0x308>)
 800196c:	461c      	mov	r4, r3
 800196e:	4615      	mov	r5, r2
 8001970:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001972:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001974:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001978:	6020      	str	r0, [r4, #0]
 800197a:	3404      	adds	r4, #4
 800197c:	8021      	strh	r1, [r4, #0]
 800197e:	3402      	adds	r4, #2
 8001980:	0c0b      	lsrs	r3, r1, #16
 8001982:	7023      	strb	r3, [r4, #0]
 8001984:	e023      	b.n	80019ce <printRadioSettings+0x32a>
 8001986:	bf00      	nop
 8001988:	08008350 	.word	0x08008350
 800198c:	2000028c 	.word	0x2000028c
 8001990:	08008384 	.word	0x08008384
 8001994:	080083a0 	.word	0x080083a0
 8001998:	080083bc 	.word	0x080083bc
 800199c:	080083d0 	.word	0x080083d0
 80019a0:	08008414 	.word	0x08008414
 80019a4:	08008460 	.word	0x08008460
 80019a8:	0800847c 	.word	0x0800847c
 80019ac:	08008490 	.word	0x08008490
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	4a29      	ldr	r2, [pc, #164]	; (8001a5c <printRadioSettings+0x3b8>)
 80019b6:	461c      	mov	r4, r3
 80019b8:	4615      	mov	r5, r2
 80019ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80019c2:	6020      	str	r0, [r4, #0]
 80019c4:	3404      	adds	r4, #4
 80019c6:	8021      	strh	r1, [r4, #0]
 80019c8:	3402      	adds	r4, #2
 80019ca:	0c0b      	lsrs	r3, r1, #16
 80019cc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ce:	f107 0308 	add.w	r3, r7, #8
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fc04 	bl	80001e0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f107 0108 	add.w	r1, r7, #8
 80019e0:	230a      	movs	r3, #10
 80019e2:	481f      	ldr	r0, [pc, #124]	; (8001a60 <printRadioSettings+0x3bc>)
 80019e4:	f004 f826 	bl	8005a34 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80019e8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019ec:	f003 0306 	and.w	r3, r3, #6
 80019f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80019f4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80019f8:	085b      	lsrs	r3, r3, #1
 80019fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80019fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d109      	bne.n	8001a1a <printRadioSettings+0x376>
 8001a06:	f107 0308 	add.w	r3, r7, #8
 8001a0a:	4a16      	ldr	r2, [pc, #88]	; (8001a64 <printRadioSettings+0x3c0>)
 8001a0c:	461c      	mov	r4, r3
 8001a0e:	4615      	mov	r5, r2
 8001a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a14:	682b      	ldr	r3, [r5, #0]
 8001a16:	6023      	str	r3, [r4, #0]
 8001a18:	e037      	b.n	8001a8a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001a1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d109      	bne.n	8001a36 <printRadioSettings+0x392>
 8001a22:	f107 0308 	add.w	r3, r7, #8
 8001a26:	4a10      	ldr	r2, [pc, #64]	; (8001a68 <printRadioSettings+0x3c4>)
 8001a28:	461c      	mov	r4, r3
 8001a2a:	4615      	mov	r5, r2
 8001a2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a30:	682b      	ldr	r3, [r5, #0]
 8001a32:	6023      	str	r3, [r4, #0]
 8001a34:	e029      	b.n	8001a8a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001a36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d118      	bne.n	8001a70 <printRadioSettings+0x3cc>
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <printRadioSettings+0x3c8>)
 8001a44:	461c      	mov	r4, r3
 8001a46:	4615      	mov	r5, r2
 8001a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	8022      	strh	r2, [r4, #0]
 8001a52:	3402      	adds	r4, #2
 8001a54:	0c1b      	lsrs	r3, r3, #16
 8001a56:	7023      	strb	r3, [r4, #0]
 8001a58:	e017      	b.n	8001a8a <printRadioSettings+0x3e6>
 8001a5a:	bf00      	nop
 8001a5c:	080084a8 	.word	0x080084a8
 8001a60:	2000028c 	.word	0x2000028c
 8001a64:	080084c0 	.word	0x080084c0
 8001a68:	080084d4 	.word	0x080084d4
 8001a6c:	080084e8 	.word	0x080084e8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001a70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d108      	bne.n	8001a8a <printRadioSettings+0x3e6>
 8001a78:	f107 0308 	add.w	r3, r7, #8
 8001a7c:	4ad7      	ldr	r2, [pc, #860]	; (8001ddc <printRadioSettings+0x738>)
 8001a7e:	461c      	mov	r4, r3
 8001a80:	4615      	mov	r5, r2
 8001a82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a86:	682b      	ldr	r3, [r5, #0]
 8001a88:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a8a:	f107 0308 	add.w	r3, r7, #8
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fba6 	bl	80001e0 <strlen>
 8001a94:	4603      	mov	r3, r0
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	f107 0108 	add.w	r1, r7, #8
 8001a9c:	230a      	movs	r3, #10
 8001a9e:	48d0      	ldr	r0, [pc, #832]	; (8001de0 <printRadioSettings+0x73c>)
 8001aa0:	f003 ffc8 	bl	8005a34 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	2205      	movs	r2, #5
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	200a      	movs	r0, #10
 8001aac:	f7ff f92c 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001ab0:	793b      	ldrb	r3, [r7, #4]
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	461d      	mov	r5, r3
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	787a      	ldrb	r2, [r7, #1]
 8001abc:	7839      	ldrb	r1, [r7, #0]
 8001abe:	f107 0008 	add.w	r0, r7, #8
 8001ac2:	9102      	str	r1, [sp, #8]
 8001ac4:	9201      	str	r2, [sp, #4]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	462b      	mov	r3, r5
 8001aca:	4622      	mov	r2, r4
 8001acc:	49c5      	ldr	r1, [pc, #788]	; (8001de4 <printRadioSettings+0x740>)
 8001ace:	f005 f85b 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad2:	f107 0308 	add.w	r3, r7, #8
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fb82 	bl	80001e0 <strlen>
 8001adc:	4603      	mov	r3, r0
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	f107 0108 	add.w	r1, r7, #8
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	48be      	ldr	r0, [pc, #760]	; (8001de0 <printRadioSettings+0x73c>)
 8001ae8:	f003 ffa4 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001aec:	463b      	mov	r3, r7
 8001aee:	2205      	movs	r2, #5
 8001af0:	4619      	mov	r1, r3
 8001af2:	200b      	movs	r0, #11
 8001af4:	f7ff f908 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001af8:	793b      	ldrb	r3, [r7, #4]
 8001afa:	461c      	mov	r4, r3
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	461d      	mov	r5, r3
 8001b00:	78bb      	ldrb	r3, [r7, #2]
 8001b02:	787a      	ldrb	r2, [r7, #1]
 8001b04:	7839      	ldrb	r1, [r7, #0]
 8001b06:	f107 0008 	add.w	r0, r7, #8
 8001b0a:	9102      	str	r1, [sp, #8]
 8001b0c:	9201      	str	r2, [sp, #4]
 8001b0e:	9300      	str	r3, [sp, #0]
 8001b10:	462b      	mov	r3, r5
 8001b12:	4622      	mov	r2, r4
 8001b14:	49b4      	ldr	r1, [pc, #720]	; (8001de8 <printRadioSettings+0x744>)
 8001b16:	f005 f837 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b1a:	f107 0308 	add.w	r3, r7, #8
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7fe fb5e 	bl	80001e0 <strlen>
 8001b24:	4603      	mov	r3, r0
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	f107 0108 	add.w	r1, r7, #8
 8001b2c:	230a      	movs	r3, #10
 8001b2e:	48ac      	ldr	r0, [pc, #688]	; (8001de0 <printRadioSettings+0x73c>)
 8001b30:	f003 ff80 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001b34:	463b      	mov	r3, r7
 8001b36:	2201      	movs	r2, #1
 8001b38:	4619      	mov	r1, r3
 8001b3a:	200c      	movs	r0, #12
 8001b3c:	f7ff f8e4 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001b40:	783b      	ldrb	r3, [r7, #0]
 8001b42:	461a      	mov	r2, r3
 8001b44:	f107 0308 	add.w	r3, r7, #8
 8001b48:	49a8      	ldr	r1, [pc, #672]	; (8001dec <printRadioSettings+0x748>)
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f005 f81c 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fb43 	bl	80001e0 <strlen>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b29a      	uxth	r2, r3
 8001b5e:	f107 0108 	add.w	r1, r7, #8
 8001b62:	230a      	movs	r3, #10
 8001b64:	489e      	ldr	r0, [pc, #632]	; (8001de0 <printRadioSettings+0x73c>)
 8001b66:	f003 ff65 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4619      	mov	r1, r3
 8001b70:	200d      	movs	r0, #13
 8001b72:	f7ff f8c9 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001b76:	783b      	ldrb	r3, [r7, #0]
 8001b78:	461a      	mov	r2, r3
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	499c      	ldr	r1, [pc, #624]	; (8001df0 <printRadioSettings+0x74c>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 f801 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fb28 	bl	80001e0 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f107 0108 	add.w	r1, r7, #8
 8001b98:	230a      	movs	r3, #10
 8001b9a:	4891      	ldr	r0, [pc, #580]	; (8001de0 <printRadioSettings+0x73c>)
 8001b9c:	f003 ff4a 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	200e      	movs	r0, #14
 8001ba8:	f7ff f8ae 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001bac:	783b      	ldrb	r3, [r7, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	498f      	ldr	r1, [pc, #572]	; (8001df4 <printRadioSettings+0x750>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f004 ffe6 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bbc:	f107 0308 	add.w	r3, r7, #8
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fb0d 	bl	80001e0 <strlen>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	f107 0108 	add.w	r1, r7, #8
 8001bce:	230a      	movs	r3, #10
 8001bd0:	4883      	ldr	r0, [pc, #524]	; (8001de0 <printRadioSettings+0x73c>)
 8001bd2:	f003 ff2f 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001bd6:	463b      	mov	r3, r7
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4619      	mov	r1, r3
 8001bdc:	200f      	movs	r0, #15
 8001bde:	f7ff f893 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001be2:	783b      	ldrb	r3, [r7, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	f107 0308 	add.w	r3, r7, #8
 8001bea:	4983      	ldr	r1, [pc, #524]	; (8001df8 <printRadioSettings+0x754>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f004 ffcb 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe faf2 	bl	80001e0 <strlen>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f107 0108 	add.w	r1, r7, #8
 8001c04:	230a      	movs	r3, #10
 8001c06:	4876      	ldr	r0, [pc, #472]	; (8001de0 <printRadioSettings+0x73c>)
 8001c08:	f003 ff14 	bl	8005a34 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001c0c:	463b      	mov	r3, r7
 8001c0e:	2205      	movs	r2, #5
 8001c10:	4619      	mov	r1, r3
 8001c12:	2010      	movs	r0, #16
 8001c14:	f7ff f878 	bl	8000d08 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001c18:	793b      	ldrb	r3, [r7, #4]
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	78fb      	ldrb	r3, [r7, #3]
 8001c1e:	461d      	mov	r5, r3
 8001c20:	78bb      	ldrb	r3, [r7, #2]
 8001c22:	787a      	ldrb	r2, [r7, #1]
 8001c24:	7839      	ldrb	r1, [r7, #0]
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9102      	str	r1, [sp, #8]
 8001c2c:	9201      	str	r2, [sp, #4]
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	462b      	mov	r3, r5
 8001c32:	4622      	mov	r2, r4
 8001c34:	4971      	ldr	r1, [pc, #452]	; (8001dfc <printRadioSettings+0x758>)
 8001c36:	f004 ffa7 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3a:	f107 0308 	add.w	r3, r7, #8
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe face 	bl	80001e0 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f107 0108 	add.w	r1, r7, #8
 8001c4c:	230a      	movs	r3, #10
 8001c4e:	4864      	ldr	r0, [pc, #400]	; (8001de0 <printRadioSettings+0x73c>)
 8001c50:	f003 fef0 	bl	8005a34 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001c54:	2011      	movs	r0, #17
 8001c56:	f7ff f82f 	bl	8000cb8 <NRF24_read_register>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c68:	f107 0308 	add.w	r3, r7, #8
 8001c6c:	4964      	ldr	r1, [pc, #400]	; (8001e00 <printRadioSettings+0x75c>)
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f004 ff8a 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fab1 	bl	80001e0 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f107 0108 	add.w	r1, r7, #8
 8001c86:	230a      	movs	r3, #10
 8001c88:	4855      	ldr	r0, [pc, #340]	; (8001de0 <printRadioSettings+0x73c>)
 8001c8a:	f003 fed3 	bl	8005a34 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001c8e:	2012      	movs	r0, #18
 8001c90:	f7ff f812 	bl	8000cb8 <NRF24_read_register>
 8001c94:	4603      	mov	r3, r0
 8001c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001c9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ca2:	f107 0308 	add.w	r3, r7, #8
 8001ca6:	4957      	ldr	r1, [pc, #348]	; (8001e04 <printRadioSettings+0x760>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f004 ff6d 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fa94 	bl	80001e0 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	f107 0108 	add.w	r1, r7, #8
 8001cc0:	230a      	movs	r3, #10
 8001cc2:	4847      	ldr	r0, [pc, #284]	; (8001de0 <printRadioSettings+0x73c>)
 8001cc4:	f003 feb6 	bl	8005a34 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001cc8:	2013      	movs	r0, #19
 8001cca:	f7fe fff5 	bl	8000cb8 <NRF24_read_register>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cd8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cdc:	f107 0308 	add.w	r3, r7, #8
 8001ce0:	4949      	ldr	r1, [pc, #292]	; (8001e08 <printRadioSettings+0x764>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f004 ff50 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ce8:	f107 0308 	add.w	r3, r7, #8
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fa77 	bl	80001e0 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f107 0108 	add.w	r1, r7, #8
 8001cfa:	230a      	movs	r3, #10
 8001cfc:	4838      	ldr	r0, [pc, #224]	; (8001de0 <printRadioSettings+0x73c>)
 8001cfe:	f003 fe99 	bl	8005a34 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001d02:	2014      	movs	r0, #20
 8001d04:	f7fe ffd8 	bl	8000cb8 <NRF24_read_register>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	493c      	ldr	r1, [pc, #240]	; (8001e0c <printRadioSettings+0x768>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f004 ff33 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa5a 	bl	80001e0 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f107 0108 	add.w	r1, r7, #8
 8001d34:	230a      	movs	r3, #10
 8001d36:	482a      	ldr	r0, [pc, #168]	; (8001de0 <printRadioSettings+0x73c>)
 8001d38:	f003 fe7c 	bl	8005a34 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001d3c:	2015      	movs	r0, #21
 8001d3e:	f7fe ffbb 	bl	8000cb8 <NRF24_read_register>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	492e      	ldr	r1, [pc, #184]	; (8001e10 <printRadioSettings+0x76c>)
 8001d56:	4618      	mov	r0, r3
 8001d58:	f004 ff16 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d5c:	f107 0308 	add.w	r3, r7, #8
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe fa3d 	bl	80001e0 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f107 0108 	add.w	r1, r7, #8
 8001d6e:	230a      	movs	r3, #10
 8001d70:	481b      	ldr	r0, [pc, #108]	; (8001de0 <printRadioSettings+0x73c>)
 8001d72:	f003 fe5f 	bl	8005a34 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001d76:	2016      	movs	r0, #22
 8001d78:	f7fe ff9e 	bl	8000cb8 <NRF24_read_register>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001d82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	f107 0308 	add.w	r3, r7, #8
 8001d8e:	4921      	ldr	r1, [pc, #132]	; (8001e14 <printRadioSettings+0x770>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f004 fef9 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fa20 	bl	80001e0 <strlen>
 8001da0:	4603      	mov	r3, r0
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f107 0108 	add.w	r1, r7, #8
 8001da8:	230a      	movs	r3, #10
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <printRadioSettings+0x73c>)
 8001dac:	f003 fe42 	bl	8005a34 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001db0:	201c      	movs	r0, #28
 8001db2:	f7fe ff81 	bl	8000cb8 <NRF24_read_register>
 8001db6:	4603      	mov	r3, r0
 8001db8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001dbc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dc0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bfcc      	ite	gt
 8001dc8:	2301      	movgt	r3, #1
 8001dca:	2300      	movle	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001dd0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	e01e      	b.n	8001e18 <printRadioSettings+0x774>
 8001dda:	bf00      	nop
 8001ddc:	080084fc 	.word	0x080084fc
 8001de0:	2000028c 	.word	0x2000028c
 8001de4:	08008510 	.word	0x08008510
 8001de8:	08008540 	.word	0x08008540
 8001dec:	08008570 	.word	0x08008570
 8001df0:	08008598 	.word	0x08008598
 8001df4:	080085c0 	.word	0x080085c0
 8001df8:	080085e8 	.word	0x080085e8
 8001dfc:	08008610 	.word	0x08008610
 8001e00:	0800863c 	.word	0x0800863c
 8001e04:	08008658 	.word	0x08008658
 8001e08:	08008674 	.word	0x08008674
 8001e0c:	08008690 	.word	0x08008690
 8001e10:	080086ac 	.word	0x080086ac
 8001e14:	080086c8 	.word	0x080086c8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bfcc      	ite	gt
 8001e1c:	2301      	movgt	r3, #1
 8001e1e:	2300      	movle	r3, #0
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e28:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	bfcc      	ite	gt
 8001e30:	2301      	movgt	r3, #1
 8001e32:	2300      	movle	r3, #0
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e3c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	bfcc      	ite	gt
 8001e44:	2301      	movgt	r3, #1
 8001e46:	2300      	movle	r3, #0
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e4c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e50:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	bfcc      	ite	gt
 8001e58:	2301      	movgt	r3, #1
 8001e5a:	2300      	movle	r3, #0
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e60:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e64:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	bfcc      	ite	gt
 8001e6c:	2301      	movgt	r3, #1
 8001e6e:	2300      	movle	r3, #0
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	f107 0008 	add.w	r0, r7, #8
 8001e76:	9303      	str	r3, [sp, #12]
 8001e78:	9402      	str	r4, [sp, #8]
 8001e7a:	9101      	str	r1, [sp, #4]
 8001e7c:	9200      	str	r2, [sp, #0]
 8001e7e:	4633      	mov	r3, r6
 8001e80:	462a      	mov	r2, r5
 8001e82:	494a      	ldr	r1, [pc, #296]	; (8001fac <printRadioSettings+0x908>)
 8001e84:	f004 fe80 	bl	8006b88 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e88:	f107 0308 	add.w	r3, r7, #8
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe f9a7 	bl	80001e0 <strlen>
 8001e92:	4603      	mov	r3, r0
 8001e94:	b29a      	uxth	r2, r3
 8001e96:	f107 0108 	add.w	r1, r7, #8
 8001e9a:	230a      	movs	r3, #10
 8001e9c:	4844      	ldr	r0, [pc, #272]	; (8001fb0 <printRadioSettings+0x90c>)
 8001e9e:	f003 fdc9 	bl	8005a34 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001ea2:	201d      	movs	r0, #29
 8001ea4:	f7fe ff08 	bl	8000cb8 <NRF24_read_register>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001eae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <printRadioSettings+0x830>
 8001eba:	f107 0308 	add.w	r3, r7, #8
 8001ebe:	4a3d      	ldr	r2, [pc, #244]	; (8001fb4 <printRadioSettings+0x910>)
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	4615      	mov	r5, r2
 8001ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ec6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ec8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ecc:	6020      	str	r0, [r4, #0]
 8001ece:	3404      	adds	r4, #4
 8001ed0:	8021      	strh	r1, [r4, #0]
 8001ed2:	e00e      	b.n	8001ef2 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001ed4:	f107 0308 	add.w	r3, r7, #8
 8001ed8:	4a37      	ldr	r2, [pc, #220]	; (8001fb8 <printRadioSettings+0x914>)
 8001eda:	461c      	mov	r4, r3
 8001edc:	4615      	mov	r5, r2
 8001ede:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ee2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001ee6:	6020      	str	r0, [r4, #0]
 8001ee8:	3404      	adds	r4, #4
 8001eea:	8021      	strh	r1, [r4, #0]
 8001eec:	3402      	adds	r4, #2
 8001eee:	0c0b      	lsrs	r3, r1, #16
 8001ef0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ef2:	f107 0308 	add.w	r3, r7, #8
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7fe f972 	bl	80001e0 <strlen>
 8001efc:	4603      	mov	r3, r0
 8001efe:	b29a      	uxth	r2, r3
 8001f00:	f107 0108 	add.w	r1, r7, #8
 8001f04:	230a      	movs	r3, #10
 8001f06:	482a      	ldr	r0, [pc, #168]	; (8001fb0 <printRadioSettings+0x90c>)
 8001f08:	f003 fd94 	bl	8005a34 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001f0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00b      	beq.n	8001f30 <printRadioSettings+0x88c>
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	4a27      	ldr	r2, [pc, #156]	; (8001fbc <printRadioSettings+0x918>)
 8001f1e:	461c      	mov	r4, r3
 8001f20:	4615      	mov	r5, r2
 8001f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f2a:	c403      	stmia	r4!, {r0, r1}
 8001f2c:	8022      	strh	r2, [r4, #0]
 8001f2e:	e00d      	b.n	8001f4c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <printRadioSettings+0x91c>)
 8001f36:	461c      	mov	r4, r3
 8001f38:	4615      	mov	r5, r2
 8001f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001f42:	c403      	stmia	r4!, {r0, r1}
 8001f44:	8022      	strh	r2, [r4, #0]
 8001f46:	3402      	adds	r4, #2
 8001f48:	0c13      	lsrs	r3, r2, #16
 8001f4a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f4c:	f107 0308 	add.w	r3, r7, #8
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe f945 	bl	80001e0 <strlen>
 8001f56:	4603      	mov	r3, r0
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	f107 0108 	add.w	r1, r7, #8
 8001f5e:	230a      	movs	r3, #10
 8001f60:	4813      	ldr	r0, [pc, #76]	; (8001fb0 <printRadioSettings+0x90c>)
 8001f62:	f003 fd67 	bl	8005a34 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001f66:	f107 0308 	add.w	r3, r7, #8
 8001f6a:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <printRadioSettings+0x920>)
 8001f6c:	461c      	mov	r4, r3
 8001f6e:	4615      	mov	r5, r2
 8001f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f7c:	682b      	ldr	r3, [r5, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	8022      	strh	r2, [r4, #0]
 8001f82:	3402      	adds	r4, #2
 8001f84:	0c1b      	lsrs	r3, r3, #16
 8001f86:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f88:	f107 0308 	add.w	r3, r7, #8
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe f927 	bl	80001e0 <strlen>
 8001f92:	4603      	mov	r3, r0
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	f107 0108 	add.w	r1, r7, #8
 8001f9a:	230a      	movs	r3, #10
 8001f9c:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <printRadioSettings+0x90c>)
 8001f9e:	f003 fd49 	bl	8005a34 <HAL_UART_Transmit>
}
 8001fa2:	bf00      	nop
 8001fa4:	3774      	adds	r7, #116	; 0x74
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001faa:	bf00      	nop
 8001fac:	080086e4 	.word	0x080086e4
 8001fb0:	2000028c 	.word	0x2000028c
 8001fb4:	08008730 	.word	0x08008730
 8001fb8:	08008748 	.word	0x08008748
 8001fbc:	08008760 	.word	0x08008760
 8001fc0:	0800877c 	.word	0x0800877c
 8001fc4:	08008350 	.word	0x08008350

08001fc8 <nrf24_DebugUART_Init>:
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
}

//4. Init Variables
void nrf24_DebugUART_Init(UART_HandleTypeDef nrf24Uart)
{
 8001fc8:	b084      	sub	sp, #16
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	f107 0c08 	add.w	ip, r7, #8
 8001fd2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	memcpy(&nrf24_huart, &nrf24Uart, sizeof(nrf24Uart));
 8001fd6:	4b07      	ldr	r3, [pc, #28]	; (8001ff4 <nrf24_DebugUART_Init+0x2c>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f107 0108 	add.w	r1, r7, #8
 8001fde:	2380      	movs	r3, #128	; 0x80
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	f004 f961 	bl	80062a8 <memcpy>
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001fee:	b004      	add	sp, #16
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	2000028c 	.word	0x2000028c

08001ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b09d      	sub	sp, #116	; 0x74
 8001ffc:	af1c      	add	r7, sp, #112	; 0x70
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ffe:	f000 fce9 	bl	80029d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002002:	f000 f8d1 	bl	80021a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002006:	f000 f9eb 	bl	80023e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 800200a:	f000 f92f 	bl	800226c <MX_SPI1_Init>
  MX_TIM2_Init();
 800200e:	f000 f96b 	bl	80022e8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8002012:	f000 f9b5 	bl	8002380 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(GPIOB,CSNpin_Pin, CEpin_Pin, hspi1);
 8002016:	4c58      	ldr	r4, [pc, #352]	; (8002178 <main+0x180>)
 8002018:	4668      	mov	r0, sp
 800201a:	1d23      	adds	r3, r4, #4
 800201c:	2260      	movs	r2, #96	; 0x60
 800201e:	4619      	mov	r1, r3
 8002020:	f004 f942 	bl	80062a8 <memcpy>
 8002024:	6823      	ldr	r3, [r4, #0]
 8002026:	2210      	movs	r2, #16
 8002028:	2108      	movs	r1, #8
 800202a:	4854      	ldr	r0, [pc, #336]	; (800217c <main+0x184>)
 800202c:	f7fe ff4e 	bl	8000ecc <NRF24_begin>
  nrf24_DebugUART_Init(huart2);
 8002030:	4c53      	ldr	r4, [pc, #332]	; (8002180 <main+0x188>)
 8002032:	4668      	mov	r0, sp
 8002034:	f104 0310 	add.w	r3, r4, #16
 8002038:	2270      	movs	r2, #112	; 0x70
 800203a:	4619      	mov	r1, r3
 800203c:	f004 f934 	bl	80062a8 <memcpy>
 8002040:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002044:	f7ff ffc0 	bl	8001fc8 <nrf24_DebugUART_Init>

  printRadioSettings();
 8002048:	f7ff fb2c 	bl	80016a4 <printRadioSettings>


  NRF24_stopListening();
 800204c:	f7ff f844 	bl	80010d8 <NRF24_stopListening>

  NRF24_openReadingPipe(1, pipeAddrs);
 8002050:	4b4c      	ldr	r3, [pc, #304]	; (8002184 <main+0x18c>)
 8002052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002056:	461a      	mov	r2, r3
 8002058:	4623      	mov	r3, r4
 800205a:	2001      	movs	r0, #1
 800205c:	f7ff f8e0 	bl	8001220 <NRF24_openReadingPipe>
  NRF24_setAutoAck(false);
 8002060:	2000      	movs	r0, #0
 8002062:	f7ff f99f 	bl	80013a4 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8002066:	2034      	movs	r0, #52	; 0x34
 8002068:	f7ff f943 	bl	80012f2 <NRF24_setChannel>
  NRF24_setPayloadSize(32);
 800206c:	2020      	movs	r0, #32
 800206e:	f7ff f955 	bl	800131c <NRF24_setPayloadSize>
  NRF24_startListening();
 8002072:	f7ff f80b 	bl	800108c <NRF24_startListening>

    /* USER CODE BEGIN 3 */
	 	  //Start of Node code
	         //puts the NRF in listening mode

	  	    if(NRF24_available()){
 8002076:	f7ff f887 	bl	8001188 <NRF24_available>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	d025      	beq.n	80020cc <main+0xd4>
	  	  		  NRF24_read(myRxMessage,32);
 8002080:	2120      	movs	r1, #32
 8002082:	4841      	ldr	r0, [pc, #260]	; (8002188 <main+0x190>)
 8002084:	f7ff f888 	bl	8001198 <NRF24_read>

	  	  		  myRxMessage[32] = '\r'; myRxMessage[32+1] = '\n';
 8002088:	4b3f      	ldr	r3, [pc, #252]	; (8002188 <main+0x190>)
 800208a:	220d      	movs	r2, #13
 800208c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002090:	4b3d      	ldr	r3, [pc, #244]	; (8002188 <main+0x190>)
 8002092:	220a      	movs	r2, #10
 8002094:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	  	  		  sprintf(usartRead,"Recieved Message! MSGID:%ld, Distance =%lu, Source Node: %ld, this NodeID = %d\n\r",myRxMessage[0], myRxMessage[3], myRxMessage[1], nodeID);
 8002098:	4b3b      	ldr	r3, [pc, #236]	; (8002188 <main+0x190>)
 800209a:	6819      	ldr	r1, [r3, #0]
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <main+0x190>)
 800209e:	68d8      	ldr	r0, [r3, #12]
 80020a0:	4b39      	ldr	r3, [pc, #228]	; (8002188 <main+0x190>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4a39      	ldr	r2, [pc, #228]	; (800218c <main+0x194>)
 80020a6:	7812      	ldrb	r2, [r2, #0]
 80020a8:	9201      	str	r2, [sp, #4]
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	4603      	mov	r3, r0
 80020ae:	460a      	mov	r2, r1
 80020b0:	4937      	ldr	r1, [pc, #220]	; (8002190 <main+0x198>)
 80020b2:	4838      	ldr	r0, [pc, #224]	; (8002194 <main+0x19c>)
 80020b4:	f004 fd68 	bl	8006b88 <siprintf>
	  	  		  HAL_UART_Transmit(&huart2, (uint8_t*)usartRead, strlen(usartRead), 100);
 80020b8:	4836      	ldr	r0, [pc, #216]	; (8002194 <main+0x19c>)
 80020ba:	f7fe f891 	bl	80001e0 <strlen>
 80020be:	4603      	mov	r3, r0
 80020c0:	b29a      	uxth	r2, r3
 80020c2:	2364      	movs	r3, #100	; 0x64
 80020c4:	4933      	ldr	r1, [pc, #204]	; (8002194 <main+0x19c>)
 80020c6:	482e      	ldr	r0, [pc, #184]	; (8002180 <main+0x188>)
 80020c8:	f003 fcb4 	bl	8005a34 <HAL_UART_Transmit>
	  	  		//	maneuverObstacle();
	  	  		 // }
	  	  		//HAL_UART_Transmit(&huart2, (uint8_t *)myRxMessage, 32+2, 100);
	  	  }

	  	  	startSensor();
 80020cc:	f000 fa42 	bl	8002554 <startSensor>
	 	    strtForward();
 80020d0:	f000 fab6 	bl	8002640 <strtForward>
	 	 	distance=calculateDistance();
 80020d4:	f000 fa60 	bl	8002598 <calculateDistance>
 80020d8:	4602      	mov	r2, r0
 80020da:	4b2f      	ldr	r3, [pc, #188]	; (8002198 <main+0x1a0>)
 80020dc:	601a      	str	r2, [r3, #0]
	 	 	if(distance<REQ_DIS)  //if distance is less than the REQ_DIS this means node is too close to an object needs to move
 80020de:	4b2e      	ldr	r3, [pc, #184]	; (8002198 <main+0x1a0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2b09      	cmp	r3, #9
 80020e4:	d842      	bhi.n	800216c <main+0x174>
	 	 	{
	 	 		//Here we need our NRF to send out a message that all nodes need to also move
	 	 		NRF24_stopListening();      		//Turn off recieve mode so we can transmit data
 80020e6:	f7fe fff7 	bl	80010d8 <NRF24_stopListening>
	 	 		NRF24_openWritingPipe(pipeAddrs);  	//The address to write to
 80020ea:	4b26      	ldr	r3, [pc, #152]	; (8002184 <main+0x18c>)
 80020ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020f0:	4618      	mov	r0, r3
 80020f2:	4621      	mov	r1, r4
 80020f4:	f7ff f870 	bl	80011d8 <NRF24_openWritingPipe>
	 	 		generateMsg(PROX_MSG, distance);   	 	//put distance data in message array
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <main+0x1a0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	2003      	movs	r0, #3
 8002100:	f000 f9d2 	bl	80024a8 <generateMsg>

	 	 		if(NRF24_write(myTxMessage, 32)) 	//Transmit message
 8002104:	2120      	movs	r1, #32
 8002106:	4825      	ldr	r0, [pc, #148]	; (800219c <main+0x1a4>)
 8002108:	f7fe fff2 	bl	80010f0 <NRF24_write>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d01b      	beq.n	800214a <main+0x152>
	 	 		 {
	 	 		  //print to the uart to see if successfully transmitted for debugging purposes
	 	 		  sprintf(usartRead,"Transmitted MSGID: %ld, Distance =%lu - this NodeID = %ld\n\r",myTxMessage[0], myTxMessage[3], myTxMessage[1]);
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <main+0x1a4>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <main+0x1a4>)
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	4b20      	ldr	r3, [pc, #128]	; (800219c <main+0x1a4>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	460b      	mov	r3, r1
 8002122:	491f      	ldr	r1, [pc, #124]	; (80021a0 <main+0x1a8>)
 8002124:	481b      	ldr	r0, [pc, #108]	; (8002194 <main+0x19c>)
 8002126:	f004 fd2f 	bl	8006b88 <siprintf>
	 	 		  HAL_UART_Transmit(&huart2, (uint8_t*)usartRead, strlen(usartRead), 100);
 800212a:	481a      	ldr	r0, [pc, #104]	; (8002194 <main+0x19c>)
 800212c:	f7fe f858 	bl	80001e0 <strlen>
 8002130:	4603      	mov	r3, r0
 8002132:	b29a      	uxth	r2, r3
 8002134:	2364      	movs	r3, #100	; 0x64
 8002136:	4917      	ldr	r1, [pc, #92]	; (8002194 <main+0x19c>)
 8002138:	4811      	ldr	r0, [pc, #68]	; (8002180 <main+0x188>)
 800213a:	f003 fc7b 	bl	8005a34 <HAL_UART_Transmit>
	 	 		  HAL_UART_Transmit(&huart2, (uint8_t *)"Transmitted succesfully\r\n", strlen("transmitted Succesfully\r\n"),32);
 800213e:	2320      	movs	r3, #32
 8002140:	2219      	movs	r2, #25
 8002142:	4918      	ldr	r1, [pc, #96]	; (80021a4 <main+0x1ac>)
 8002144:	480e      	ldr	r0, [pc, #56]	; (8002180 <main+0x188>)
 8002146:	f003 fc75 	bl	8005a34 <HAL_UART_Transmit>
	 	 		 }

	 	 		HAL_Delay(1000);  						//wait one second
 800214a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800214e:	f000 fca7 	bl	8002aa0 <HAL_Delay>
	 	 		NRF24_openReadingPipe(1, pipeAddrs);  //open reading pipeline
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <main+0x18c>)
 8002154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002158:	461a      	mov	r2, r3
 800215a:	4623      	mov	r3, r4
 800215c:	2001      	movs	r0, #1
 800215e:	f7ff f85f 	bl	8001220 <NRF24_openReadingPipe>
	 	 		NRF24_startListening();					//start listening again
 8002162:	f7fe ff93 	bl	800108c <NRF24_startListening>
	 	 		maneuverObstacle();
 8002166:	f000 fabf 	bl	80026e8 <maneuverObstacle>
 800216a:	e001      	b.n	8002170 <main+0x178>
	 	 	}
	 	 	else
	 	 	strtForward();
 800216c:	f000 fa68 	bl	8002640 <strtForward>


	 	 	HAL_Delay(100);
 8002170:	2064      	movs	r0, #100	; 0x64
 8002172:	f000 fc95 	bl	8002aa0 <HAL_Delay>
	  	    if(NRF24_available()){
 8002176:	e77e      	b.n	8002076 <main+0x7e>
 8002178:	20000480 	.word	0x20000480
 800217c:	48000400 	.word	0x48000400
 8002180:	20000524 	.word	0x20000524
 8002184:	20000008 	.word	0x20000008
 8002188:	2000031c 	.word	0x2000031c
 800218c:	20000000 	.word	0x20000000
 8002190:	08008894 	.word	0x08008894
 8002194:	2000039c 	.word	0x2000039c
 8002198:	20000318 	.word	0x20000318
 800219c:	20000400 	.word	0x20000400
 80021a0:	080088e8 	.word	0x080088e8
 80021a4:	08008924 	.word	0x08008924

080021a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b0a6      	sub	sp, #152	; 0x98
 80021ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021b2:	2228      	movs	r2, #40	; 0x28
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 f881 	bl	80062be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021bc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021cc:	1d3b      	adds	r3, r7, #4
 80021ce:	2258      	movs	r2, #88	; 0x58
 80021d0:	2100      	movs	r1, #0
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 f873 	bl	80062be <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021d8:	2302      	movs	r3, #2
 80021da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021dc:	2301      	movs	r3, #1
 80021de:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021e0:	2310      	movs	r3, #16
 80021e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021e6:	2302      	movs	r3, #2
 80021e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80021ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80021f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80021f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002202:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002206:	4618      	mov	r0, r3
 8002208:	f000 ff0c 	bl	8003024 <HAL_RCC_OscConfig>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002212:	f000 fa77 	bl	8002704 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002216:	230f      	movs	r3, #15
 8002218:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800221a:	2302      	movs	r3, #2
 800221c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002226:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002228:	2300      	movs	r3, #0
 800222a:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800222c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002230:	2102      	movs	r1, #2
 8002232:	4618      	mov	r0, r3
 8002234:	f001 fe0c 	bl	8003e50 <HAL_RCC_ClockConfig>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800223e:	f000 fa61 	bl	8002704 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <SystemClock_Config+0xc0>)
 8002244:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002246:	2300      	movs	r3, #0
 8002248:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800224a:	2300      	movs	r3, #0
 800224c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	4618      	mov	r0, r3
 8002252:	f002 f833 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800225c:	f000 fa52 	bl	8002704 <Error_Handler>
  }
}
 8002260:	bf00      	nop
 8002262:	3798      	adds	r7, #152	; 0x98
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	00100002 	.word	0x00100002

0800226c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002272:	4a1c      	ldr	r2, [pc, #112]	; (80022e4 <MX_SPI1_Init+0x78>)
 8002274:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002278:	f44f 7282 	mov.w	r2, #260	; 0x104
 800227c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800227e:	4b18      	ldr	r3, [pc, #96]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002280:	2200      	movs	r2, #0
 8002282:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002284:	4b16      	ldr	r3, [pc, #88]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002286:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800228a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <MX_SPI1_Init+0x74>)
 800228e:	2200      	movs	r2, #0
 8002290:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002292:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_SPI1_Init+0x74>)
 8002294:	2200      	movs	r2, #0
 8002296:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002298:	4b11      	ldr	r3, [pc, #68]	; (80022e0 <MX_SPI1_Init+0x74>)
 800229a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800229e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022a2:	2220      	movs	r2, #32
 80022a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022a6:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80022ac:	4b0c      	ldr	r3, [pc, #48]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b2:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80022b8:	4b09      	ldr	r3, [pc, #36]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022ba:	2207      	movs	r2, #7
 80022bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022c6:	2208      	movs	r2, #8
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <MX_SPI1_Init+0x74>)
 80022cc:	f002 fa14 	bl	80046f8 <HAL_SPI_Init>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80022d6:	f000 fa15 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000480 	.word	0x20000480
 80022e4:	40013000 	.word	0x40013000

080022e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022ee:	f107 0310 	add.w	r3, r7, #16
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]
 80022f6:	605a      	str	r2, [r3, #4]
 80022f8:	609a      	str	r2, [r3, #8]
 80022fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022fc:	1d3b      	adds	r3, r7, #4
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002306:	4b1d      	ldr	r3, [pc, #116]	; (800237c <MX_TIM2_Init+0x94>)
 8002308:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800230c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32-1;
 800230e:	4b1b      	ldr	r3, [pc, #108]	; (800237c <MX_TIM2_Init+0x94>)
 8002310:	221f      	movs	r2, #31
 8002312:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b19      	ldr	r3, [pc, #100]	; (800237c <MX_TIM2_Init+0x94>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800231a:	4b18      	ldr	r3, [pc, #96]	; (800237c <MX_TIM2_Init+0x94>)
 800231c:	2200      	movs	r2, #0
 800231e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b16      	ldr	r3, [pc, #88]	; (800237c <MX_TIM2_Init+0x94>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002326:	4b15      	ldr	r3, [pc, #84]	; (800237c <MX_TIM2_Init+0x94>)
 8002328:	2200      	movs	r2, #0
 800232a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800232c:	4813      	ldr	r0, [pc, #76]	; (800237c <MX_TIM2_Init+0x94>)
 800232e:	f003 f88b 	bl	8005448 <HAL_TIM_Base_Init>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002338:	f000 f9e4 	bl	8002704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800233c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002342:	f107 0310 	add.w	r3, r7, #16
 8002346:	4619      	mov	r1, r3
 8002348:	480c      	ldr	r0, [pc, #48]	; (800237c <MX_TIM2_Init+0x94>)
 800234a:	f003 f8a8 	bl	800549e <HAL_TIM_ConfigClockSource>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002354:	f000 f9d6 	bl	8002704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800235c:	2300      	movs	r3, #0
 800235e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	; (800237c <MX_TIM2_Init+0x94>)
 8002366:	f003 fa8b 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002370:	f000 f9c8 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002374:	bf00      	nop
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	200004e4 	.word	0x200004e4

08002380 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002384:	4b14      	ldr	r3, [pc, #80]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 8002386:	4a15      	ldr	r2, [pc, #84]	; (80023dc <MX_USART2_UART_Init+0x5c>)
 8002388:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 800238c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002390:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002392:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 8002394:	2200      	movs	r2, #0
 8002396:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 800239a:	2200      	movs	r2, #0
 800239c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023a6:	220c      	movs	r2, #12
 80023a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023aa:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b6:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023bc:	4b06      	ldr	r3, [pc, #24]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80023c2:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_USART2_UART_Init+0x58>)
 80023c4:	f003 fae8 	bl	8005998 <HAL_UART_Init>
 80023c8:	4603      	mov	r3, r0
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80023ce:	f000 f999 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000524 	.word	0x20000524
 80023dc:	40004400 	.word	0x40004400

080023e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b088      	sub	sp, #32
 80023e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e6:	f107 030c 	add.w	r3, r7, #12
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
 80023f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f6:	4b2a      	ldr	r3, [pc, #168]	; (80024a0 <MX_GPIO_Init+0xc0>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4a29      	ldr	r2, [pc, #164]	; (80024a0 <MX_GPIO_Init+0xc0>)
 80023fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002400:	6153      	str	r3, [r2, #20]
 8002402:	4b27      	ldr	r3, [pc, #156]	; (80024a0 <MX_GPIO_Init+0xc0>)
 8002404:	695b      	ldr	r3, [r3, #20]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	60bb      	str	r3, [r7, #8]
 800240c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800240e:	4b24      	ldr	r3, [pc, #144]	; (80024a0 <MX_GPIO_Init+0xc0>)
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_GPIO_Init+0xc0>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002418:	6153      	str	r3, [r2, #20]
 800241a:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <MX_GPIO_Init+0xc0>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002422:	607b      	str	r3, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RGT_BKD_Pin|CSNpin_Pin|CEpin_Pin|LFT_BKD_Pin 
 8002426:	2200      	movs	r2, #0
 8002428:	21d9      	movs	r1, #217	; 0xd9
 800242a:	481e      	ldr	r0, [pc, #120]	; (80024a4 <MX_GPIO_Init+0xc4>)
 800242c:	f000 fde2 	bl	8002ff4 <HAL_GPIO_WritePin>
                          |LFT_FWD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TRIG_Pin|RGT_FWD_Pin, GPIO_PIN_RESET);
 8002430:	2200      	movs	r2, #0
 8002432:	f44f 6110 	mov.w	r1, #2304	; 0x900
 8002436:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800243a:	f000 fddb 	bl	8002ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RGT_BKD_Pin CSNpin_Pin CEpin_Pin LFT_BKD_Pin 
                           LFT_FWD_Pin */
  GPIO_InitStruct.Pin = RGT_BKD_Pin|CSNpin_Pin|CEpin_Pin|LFT_BKD_Pin 
 800243e:	23d9      	movs	r3, #217	; 0xd9
 8002440:	60fb      	str	r3, [r7, #12]
                          |LFT_FWD_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002442:	2301      	movs	r3, #1
 8002444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4619      	mov	r1, r3
 8002454:	4813      	ldr	r0, [pc, #76]	; (80024a4 <MX_GPIO_Init+0xc4>)
 8002456:	f000 fc2b 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_Pin RGT_FWD_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin|RGT_FWD_Pin;
 800245a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800245e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002460:	2301      	movs	r3, #1
 8002462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800246c:	f107 030c 	add.w	r3, r7, #12
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002476:	f000 fc1b 	bl	8002cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ECHO_Pin */
  GPIO_InitStruct.Pin = ECHO_Pin;
 800247a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800247e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002492:	f000 fc0d 	bl	8002cb0 <HAL_GPIO_Init>

}
 8002496:	bf00      	nop
 8002498:	3720      	adds	r7, #32
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	48000400 	.word	0x48000400

080024a8 <generateMsg>:

/* USER CODE BEGIN 4 */
void generateMsg(uint8_t msgID, uint32_t msgData){
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]

	myTxMessage[0] = msgID;
 80024b4:	79fb      	ldrb	r3, [r7, #7]
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <generateMsg+0x34>)
 80024b8:	6013      	str	r3, [r2, #0]
	myTxMessage[1] = nodeID;
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <generateMsg+0x38>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <generateMsg+0x34>)
 80024c2:	605a      	str	r2, [r3, #4]
	myTxMessage[2] = 0; //until i figure out how i want to do the source thing
 80024c4:	4b05      	ldr	r3, [pc, #20]	; (80024dc <generateMsg+0x34>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	609a      	str	r2, [r3, #8]
	myTxMessage[3] = msgData;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <generateMsg+0x34>)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	20000400 	.word	0x20000400
 80024e0:	20000000 	.word	0x20000000

080024e4 <TimerDelay>:

void TimerDelay(uint32_t Sec)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	if(Sec<2)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d801      	bhi.n	80024f6 <TimerDelay+0x12>
		Sec=2;
 80024f2:	2302      	movs	r3, #2
 80024f4:	607b      	str	r3, [r7, #4]

	TIM2->ARR=Sec-1;
 80024f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3b01      	subs	r3, #1
 80024fe:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM2->EGR=1;
 8002500:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002504:	2201      	movs	r2, #1
 8002506:	615a      	str	r2, [r3, #20]
	TIM2->SR&=~1;
 8002508:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002512:	f023 0301 	bic.w	r3, r3, #1
 8002516:	6113      	str	r3, [r2, #16]
	TIM2->CR1|=1;
 8002518:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6013      	str	r3, [r2, #0]

	while((TIM2->SR&0x0001)!=1);
 8002528:	bf00      	nop
 800252a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	2b01      	cmp	r3, #1
 8002536:	d1f8      	bne.n	800252a <TimerDelay+0x46>
	TIM2->SR&=~(0x0001);
 8002538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800253c:	691b      	ldr	r3, [r3, #16]
 800253e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6113      	str	r3, [r2, #16]
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <startSensor>:


void startSensor(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002562:	f000 fd47 	bl	8002ff4 <HAL_GPIO_WritePin>
  	TimerDelay(3);
 8002566:	2003      	movs	r0, #3
 8002568:	f7ff ffbc 	bl	80024e4 <TimerDelay>
	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_SET);
 800256c:	2201      	movs	r2, #1
 800256e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002572:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002576:	f000 fd3d 	bl	8002ff4 <HAL_GPIO_WritePin>
 	TimerDelay(10);
 800257a:	200a      	movs	r0, #10
 800257c:	f7ff ffb2 	bl	80024e4 <TimerDelay>
 	HAL_GPIO_WritePin(TRIG_GPIO_Port,TRIG_Pin,GPIO_PIN_RESET);
 8002580:	2200      	movs	r2, #0
 8002582:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002586:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800258a:	f000 fd33 	bl	8002ff4 <HAL_GPIO_WritePin>

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	0000      	movs	r0, r0
 8002594:	0000      	movs	r0, r0
	...

08002598 <calculateDistance>:



uint32_t calculateDistance(void)
{
 8002598:	b5b0      	push	{r4, r5, r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
	uint32_t distance;
	uint32_t countTheSoundTime;
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin)== GPIO_PIN_RESET);
 800259e:	bf00      	nop
 80025a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a8:	f000 fd0c 	bl	8002fc4 <HAL_GPIO_ReadPin>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f6      	beq.n	80025a0 <calculateDistance+0x8>
	countTheSoundTime=0;
 80025b2:	2300      	movs	r3, #0
 80025b4:	607b      	str	r3, [r7, #4]
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin)== GPIO_PIN_SET)
 80025b6:	e005      	b.n	80025c4 <calculateDistance+0x2c>
	{
		countTheSoundTime++;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	3301      	adds	r3, #1
 80025bc:	607b      	str	r3, [r7, #4]
		TimerDelay(2);
 80025be:	2002      	movs	r0, #2
 80025c0:	f7ff ff90 	bl	80024e4 <TimerDelay>
	while(HAL_GPIO_ReadPin(ECHO_GPIO_Port,ECHO_Pin)== GPIO_PIN_SET)
 80025c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80025c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025cc:	f000 fcfa 	bl	8002fc4 <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d0f0      	beq.n	80025b8 <calculateDistance+0x20>
	};
	distance = (countTheSoundTime +0.0f)*2.753*speedOfSound;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	ee07 3a90 	vmov	s15, r3
 80025dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e0:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002638 <calculateDistance+0xa0>
 80025e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80025e8:	ee17 0a90 	vmov	r0, s15
 80025ec:	f7fd ffb4 	bl	8000558 <__aeabi_f2d>
 80025f0:	a30f      	add	r3, pc, #60	; (adr r3, 8002630 <calculateDistance+0x98>)
 80025f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f6:	f7fe f807 	bl	8000608 <__aeabi_dmul>
 80025fa:	4603      	mov	r3, r0
 80025fc:	460c      	mov	r4, r1
 80025fe:	4625      	mov	r5, r4
 8002600:	461c      	mov	r4, r3
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <calculateDistance+0xa4>)
 8002604:	4618      	mov	r0, r3
 8002606:	f7fd ffa7 	bl	8000558 <__aeabi_f2d>
 800260a:	4602      	mov	r2, r0
 800260c:	460b      	mov	r3, r1
 800260e:	4620      	mov	r0, r4
 8002610:	4629      	mov	r1, r5
 8002612:	f7fd fff9 	bl	8000608 <__aeabi_dmul>
 8002616:	4603      	mov	r3, r0
 8002618:	460c      	mov	r4, r1
 800261a:	4618      	mov	r0, r3
 800261c:	4621      	mov	r1, r4
 800261e:	f7fe facb 	bl	8000bb8 <__aeabi_d2uiz>
 8002622:	4603      	mov	r3, r0
 8002624:	603b      	str	r3, [r7, #0]
	return (uint32_t)distance;
 8002626:	683b      	ldr	r3, [r7, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bdb0      	pop	{r4, r5, r7, pc}
 8002630:	dd2f1aa0 	.word	0xdd2f1aa0
 8002634:	40060624 	.word	0x40060624
 8002638:	00000000 	.word	0x00000000
 800263c:	3c8c7e28 	.word	0x3c8c7e28

08002640 <strtForward>:


void strtForward(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFT_FWD_GPIO_Port, LFT_FWD_Pin, GPIO_PIN_SET);
 8002644:	2201      	movs	r2, #1
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	480a      	ldr	r0, [pc, #40]	; (8002674 <strtForward+0x34>)
 800264a:	f000 fcd3 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFT_BKD_GPIO_Port, LFT_BKD_Pin, GPIO_PIN_RESET);
 800264e:	2200      	movs	r2, #0
 8002650:	2140      	movs	r1, #64	; 0x40
 8002652:	4808      	ldr	r0, [pc, #32]	; (8002674 <strtForward+0x34>)
 8002654:	f000 fcce 	bl	8002ff4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RGT_FWD_GPIO_Port, RGT_FWD_Pin, GPIO_PIN_SET);
 8002658:	2201      	movs	r2, #1
 800265a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800265e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002662:	f000 fcc7 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGT_BKD_GPIO_Port, RGT_BKD_Pin, GPIO_PIN_RESET);
 8002666:	2200      	movs	r2, #0
 8002668:	2101      	movs	r1, #1
 800266a:	4802      	ldr	r0, [pc, #8]	; (8002674 <strtForward+0x34>)
 800266c:	f000 fcc2 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 8002670:	bf00      	nop
 8002672:	bd80      	pop	{r7, pc}
 8002674:	48000400 	.word	0x48000400

08002678 <reverse>:

void reverse(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LFT_FWD_GPIO_Port, LFT_FWD_Pin, GPIO_PIN_RESET);
 800267c:	2200      	movs	r2, #0
 800267e:	2180      	movs	r1, #128	; 0x80
 8002680:	480a      	ldr	r0, [pc, #40]	; (80026ac <reverse+0x34>)
 8002682:	f000 fcb7 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFT_BKD_GPIO_Port, LFT_BKD_Pin, GPIO_PIN_SET);
 8002686:	2201      	movs	r2, #1
 8002688:	2140      	movs	r1, #64	; 0x40
 800268a:	4808      	ldr	r0, [pc, #32]	; (80026ac <reverse+0x34>)
 800268c:	f000 fcb2 	bl	8002ff4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RGT_FWD_GPIO_Port, RGT_FWD_Pin, GPIO_PIN_RESET);
 8002690:	2200      	movs	r2, #0
 8002692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800269a:	f000 fcab 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGT_BKD_GPIO_Port, RGT_BKD_Pin, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	2101      	movs	r1, #1
 80026a2:	4802      	ldr	r0, [pc, #8]	; (80026ac <reverse+0x34>)
 80026a4:	f000 fca6 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	48000400 	.word	0x48000400

080026b0 <turnLeft>:



void turnLeft(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LFT_FWD_GPIO_Port, LFT_FWD_Pin, GPIO_PIN_RESET);
 80026b4:	2200      	movs	r2, #0
 80026b6:	2180      	movs	r1, #128	; 0x80
 80026b8:	480a      	ldr	r0, [pc, #40]	; (80026e4 <turnLeft+0x34>)
 80026ba:	f000 fc9b 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGT_BKD_GPIO_Port, RGT_BKD_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	2101      	movs	r1, #1
 80026c2:	4808      	ldr	r0, [pc, #32]	; (80026e4 <turnLeft+0x34>)
 80026c4:	f000 fc96 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RGT_FWD_GPIO_Port, RGT_FWD_Pin, GPIO_PIN_SET);
 80026c8:	2201      	movs	r2, #1
 80026ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026d2:	f000 fc8f 	bl	8002ff4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LFT_BKD_GPIO_Port, LFT_BKD_Pin, GPIO_PIN_SET);
 80026d6:	2201      	movs	r2, #1
 80026d8:	2140      	movs	r1, #64	; 0x40
 80026da:	4802      	ldr	r0, [pc, #8]	; (80026e4 <turnLeft+0x34>)
 80026dc:	f000 fc8a 	bl	8002ff4 <HAL_GPIO_WritePin>
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	48000400 	.word	0x48000400

080026e8 <maneuverObstacle>:

void maneuverObstacle() {
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
	reverse();
 80026ec:	f7ff ffc4 	bl	8002678 <reverse>
	TimerDelay(4);
 80026f0:	2004      	movs	r0, #4
 80026f2:	f7ff fef7 	bl	80024e4 <TimerDelay>
	turnLeft();
 80026f6:	f7ff ffdb 	bl	80026b0 <turnLeft>
	TimerDelay(1.5);
 80026fa:	2001      	movs	r0, #1
 80026fc:	f7ff fef2 	bl	80024e4 <TimerDelay>
}
 8002700:	bf00      	nop
 8002702:	bd80      	pop	{r7, pc}

08002704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002708:	bf00      	nop
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800271a:	4b0f      	ldr	r3, [pc, #60]	; (8002758 <HAL_MspInit+0x44>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	4a0e      	ldr	r2, [pc, #56]	; (8002758 <HAL_MspInit+0x44>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6193      	str	r3, [r2, #24]
 8002726:	4b0c      	ldr	r3, [pc, #48]	; (8002758 <HAL_MspInit+0x44>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002732:	4b09      	ldr	r3, [pc, #36]	; (8002758 <HAL_MspInit+0x44>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	4a08      	ldr	r2, [pc, #32]	; (8002758 <HAL_MspInit+0x44>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	61d3      	str	r3, [r2, #28]
 800273e:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_MspInit+0x44>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000

0800275c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	f107 0314 	add.w	r3, r7, #20
 8002768:	2200      	movs	r2, #0
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	605a      	str	r2, [r3, #4]
 800276e:	609a      	str	r2, [r3, #8]
 8002770:	60da      	str	r2, [r3, #12]
 8002772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_SPI_MspInit+0x7c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d128      	bne.n	80027d0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_SPI_MspInit+0x80>)
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	4a16      	ldr	r2, [pc, #88]	; (80027dc <HAL_SPI_MspInit+0x80>)
 8002784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002788:	6193      	str	r3, [r2, #24]
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_SPI_MspInit+0x80>)
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_SPI_MspInit+0x80>)
 8002798:	695b      	ldr	r3, [r3, #20]
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_SPI_MspInit+0x80>)
 800279c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a0:	6153      	str	r3, [r2, #20]
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_SPI_MspInit+0x80>)
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80027ae:	23e0      	movs	r3, #224	; 0xe0
 80027b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80027ba:	2303      	movs	r3, #3
 80027bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027be:	2305      	movs	r3, #5
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	4619      	mov	r1, r3
 80027c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027cc:	f000 fa70 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80027d0:	bf00      	nop
 80027d2:	3728      	adds	r7, #40	; 0x28
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	40013000 	.word	0x40013000
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f0:	d10b      	bne.n	800280a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_TIM_Base_MspInit+0x38>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	4a08      	ldr	r2, [pc, #32]	; (8002818 <HAL_TIM_Base_MspInit+0x38>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	61d3      	str	r3, [r2, #28]
 80027fe:	4b06      	ldr	r3, [pc, #24]	; (8002818 <HAL_TIM_Base_MspInit+0x38>)
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800280a:	bf00      	nop
 800280c:	3714      	adds	r7, #20
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b08a      	sub	sp, #40	; 0x28
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002824:	f107 0314 	add.w	r3, r7, #20
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	605a      	str	r2, [r3, #4]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	60da      	str	r2, [r3, #12]
 8002832:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a17      	ldr	r2, [pc, #92]	; (8002898 <HAL_UART_MspInit+0x7c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d128      	bne.n	8002890 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800283e:	4b17      	ldr	r3, [pc, #92]	; (800289c <HAL_UART_MspInit+0x80>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4a16      	ldr	r2, [pc, #88]	; (800289c <HAL_UART_MspInit+0x80>)
 8002844:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002848:	61d3      	str	r3, [r2, #28]
 800284a:	4b14      	ldr	r3, [pc, #80]	; (800289c <HAL_UART_MspInit+0x80>)
 800284c:	69db      	ldr	r3, [r3, #28]
 800284e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	4b11      	ldr	r3, [pc, #68]	; (800289c <HAL_UART_MspInit+0x80>)
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4a10      	ldr	r2, [pc, #64]	; (800289c <HAL_UART_MspInit+0x80>)
 800285c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002860:	6153      	str	r3, [r2, #20]
 8002862:	4b0e      	ldr	r3, [pc, #56]	; (800289c <HAL_UART_MspInit+0x80>)
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800286e:	230c      	movs	r3, #12
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800287e:	2307      	movs	r3, #7
 8002880:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800288c:	f000 fa10 	bl	8002cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002890:	bf00      	nop
 8002892:	3728      	adds	r7, #40	; 0x28
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40004400 	.word	0x40004400
 800289c:	40021000 	.word	0x40021000

080028a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028b2:	e7fe      	b.n	80028b2 <HardFault_Handler+0x4>

080028b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028b8:	e7fe      	b.n	80028b8 <MemManage_Handler+0x4>

080028ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028ba:	b480      	push	{r7}
 80028bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028be:	e7fe      	b.n	80028be <BusFault_Handler+0x4>

080028c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <UsageFault_Handler+0x4>

080028c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ca:	bf00      	nop
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028e2:	b480      	push	{r7}
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028f4:	f000 f8b4 	bl	8002a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <_sbrk+0x50>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d102      	bne.n	8002912 <_sbrk+0x16>
		heap_end = &end;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <_sbrk+0x50>)
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <_sbrk+0x54>)
 8002910:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002912:	4b0e      	ldr	r3, [pc, #56]	; (800294c <_sbrk+0x50>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002918:	4b0c      	ldr	r3, [pc, #48]	; (800294c <_sbrk+0x50>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4413      	add	r3, r2
 8002920:	466a      	mov	r2, sp
 8002922:	4293      	cmp	r3, r2
 8002924:	d907      	bls.n	8002936 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002926:	f003 fc95 	bl	8006254 <__errno>
 800292a:	4602      	mov	r2, r0
 800292c:	230c      	movs	r3, #12
 800292e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002930:	f04f 33ff 	mov.w	r3, #4294967295
 8002934:	e006      	b.n	8002944 <_sbrk+0x48>
	}

	heap_end += incr;
 8002936:	4b05      	ldr	r3, [pc, #20]	; (800294c <_sbrk+0x50>)
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	4a03      	ldr	r2, [pc, #12]	; (800294c <_sbrk+0x50>)
 8002940:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002942:	68fb      	ldr	r3, [r7, #12]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	2000030c 	.word	0x2000030c
 8002950:	200005b0 	.word	0x200005b0

08002954 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002958:	4b08      	ldr	r3, [pc, #32]	; (800297c <SystemInit+0x28>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <SystemInit+0x28>)
 8002960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <SystemInit+0x28>)
 800296a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800296e:	609a      	str	r2, [r3, #8]
#endif
}
 8002970:	bf00      	nop
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002984:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002986:	e003      	b.n	8002990 <LoopCopyDataInit>

08002988 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800298a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800298c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800298e:	3104      	adds	r1, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002990:	480b      	ldr	r0, [pc, #44]	; (80029c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002992:	4b0c      	ldr	r3, [pc, #48]	; (80029c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002994:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002996:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002998:	d3f6      	bcc.n	8002988 <CopyDataInit>
	ldr	r2, =_sbss
 800299a:	4a0b      	ldr	r2, [pc, #44]	; (80029c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800299c:	e002      	b.n	80029a4 <LoopFillZerobss>

0800299e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800299e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029a0:	f842 3b04 	str.w	r3, [r2], #4

080029a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029a4:	4b09      	ldr	r3, [pc, #36]	; (80029cc <LoopForever+0x16>)
	cmp	r2, r3
 80029a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029a8:	d3f9      	bcc.n	800299e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80029aa:	f7ff ffd3 	bl	8002954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ae:	f003 fc57 	bl	8006260 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029b2:	f7ff fb21 	bl	8001ff8 <main>

080029b6 <LoopForever>:

LoopForever:
    b LoopForever
 80029b6:	e7fe      	b.n	80029b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80029b8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80029bc:	08008bf0 	.word	0x08008bf0
	ldr	r0, =_sdata
 80029c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80029c4:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 80029c8:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 80029cc:	200005ac 	.word	0x200005ac

080029d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029d0:	e7fe      	b.n	80029d0 <ADC1_2_IRQHandler>
	...

080029d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_Init+0x28>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_Init+0x28>)
 80029de:	f043 0310 	orr.w	r3, r3, #16
 80029e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029e4:	2003      	movs	r0, #3
 80029e6:	f000 f92f 	bl	8002c48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ea:	2000      	movs	r0, #0
 80029ec:	f000 f808 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029f0:	f7ff fe90 	bl	8002714 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40022000 	.word	0x40022000

08002a00 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a08:	4b12      	ldr	r3, [pc, #72]	; (8002a54 <HAL_InitTick+0x54>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4b12      	ldr	r3, [pc, #72]	; (8002a58 <HAL_InitTick+0x58>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	4619      	mov	r1, r3
 8002a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f000 f939 	bl	8002c96 <HAL_SYSTICK_Config>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00e      	b.n	8002a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b0f      	cmp	r3, #15
 8002a32:	d80a      	bhi.n	8002a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a34:	2200      	movs	r2, #0
 8002a36:	6879      	ldr	r1, [r7, #4]
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f000 f90f 	bl	8002c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a40:	4a06      	ldr	r2, [pc, #24]	; (8002a5c <HAL_InitTick+0x5c>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	20000010 	.word	0x20000010
 8002a58:	20000018 	.word	0x20000018
 8002a5c:	20000014 	.word	0x20000014

08002a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a64:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_IncTick+0x20>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_IncTick+0x24>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4413      	add	r3, r2
 8002a70:	4a04      	ldr	r2, [pc, #16]	; (8002a84 <HAL_IncTick+0x24>)
 8002a72:	6013      	str	r3, [r2, #0]
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20000018 	.word	0x20000018
 8002a84:	200005a4 	.word	0x200005a4

08002a88 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  return uwTick;  
 8002a8c:	4b03      	ldr	r3, [pc, #12]	; (8002a9c <HAL_GetTick+0x14>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	200005a4 	.word	0x200005a4

08002aa0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002aa8:	f7ff ffee 	bl	8002a88 <HAL_GetTick>
 8002aac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab8:	d005      	beq.n	8002ac6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_Delay+0x40>)
 8002abc:	781b      	ldrb	r3, [r3, #0]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ac6:	bf00      	nop
 8002ac8:	f7ff ffde 	bl	8002a88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d8f7      	bhi.n	8002ac8 <HAL_Delay+0x28>
  {
  }
}
 8002ad8:	bf00      	nop
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000018 	.word	0x20000018

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	6039      	str	r1, [r7, #0]
 8002b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	db0a      	blt.n	8002b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	490c      	ldr	r1, [pc, #48]	; (8002b94 <__NVIC_SetPriority+0x4c>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	0112      	lsls	r2, r2, #4
 8002b68:	b2d2      	uxtb	r2, r2
 8002b6a:	440b      	add	r3, r1
 8002b6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b70:	e00a      	b.n	8002b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	b2da      	uxtb	r2, r3
 8002b76:	4908      	ldr	r1, [pc, #32]	; (8002b98 <__NVIC_SetPriority+0x50>)
 8002b78:	79fb      	ldrb	r3, [r7, #7]
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	3b04      	subs	r3, #4
 8002b80:	0112      	lsls	r2, r2, #4
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	440b      	add	r3, r1
 8002b86:	761a      	strb	r2, [r3, #24]
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr
 8002b94:	e000e100 	.word	0xe000e100
 8002b98:	e000ed00 	.word	0xe000ed00

08002b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb0:	69fb      	ldr	r3, [r7, #28]
 8002bb2:	f1c3 0307 	rsb	r3, r3, #7
 8002bb6:	2b04      	cmp	r3, #4
 8002bb8:	bf28      	it	cs
 8002bba:	2304      	movcs	r3, #4
 8002bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	2b06      	cmp	r3, #6
 8002bc4:	d902      	bls.n	8002bcc <NVIC_EncodePriority+0x30>
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	3b03      	subs	r3, #3
 8002bca:	e000      	b.n	8002bce <NVIC_EncodePriority+0x32>
 8002bcc:	2300      	movs	r3, #0
 8002bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	401a      	ands	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be4:	f04f 31ff 	mov.w	r1, #4294967295
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa01 f303 	lsl.w	r3, r1, r3
 8002bee:	43d9      	mvns	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	4313      	orrs	r3, r2
         );
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
	...

08002c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c14:	d301      	bcc.n	8002c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c16:	2301      	movs	r3, #1
 8002c18:	e00f      	b.n	8002c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1a:	4a0a      	ldr	r2, [pc, #40]	; (8002c44 <SysTick_Config+0x40>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c22:	210f      	movs	r1, #15
 8002c24:	f04f 30ff 	mov.w	r0, #4294967295
 8002c28:	f7ff ff8e 	bl	8002b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c2c:	4b05      	ldr	r3, [pc, #20]	; (8002c44 <SysTick_Config+0x40>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c32:	4b04      	ldr	r3, [pc, #16]	; (8002c44 <SysTick_Config+0x40>)
 8002c34:	2207      	movs	r2, #7
 8002c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	e000e010 	.word	0xe000e010

08002c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7ff ff47 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}

08002c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	b086      	sub	sp, #24
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	4603      	mov	r3, r0
 8002c66:	60b9      	str	r1, [r7, #8]
 8002c68:	607a      	str	r2, [r7, #4]
 8002c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c70:	f7ff ff5c 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	68b9      	ldr	r1, [r7, #8]
 8002c7a:	6978      	ldr	r0, [r7, #20]
 8002c7c:	f7ff ff8e 	bl	8002b9c <NVIC_EncodePriority>
 8002c80:	4602      	mov	r2, r0
 8002c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff5d 	bl	8002b48 <__NVIC_SetPriority>
}
 8002c8e:	bf00      	nop
 8002c90:	3718      	adds	r7, #24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffb0 	bl	8002c04 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b087      	sub	sp, #28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cbe:	e160      	b.n	8002f82 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 8152 	beq.w	8002f7c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x38>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b12      	cmp	r3, #18
 8002ce6:	d123      	bne.n	8002d30 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	08da      	lsrs	r2, r3, #3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3208      	adds	r2, #8
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	220f      	movs	r2, #15
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f003 0307 	and.w	r3, r3, #7
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	08da      	lsrs	r2, r3, #3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3208      	adds	r2, #8
 8002d2a:	6939      	ldr	r1, [r7, #16]
 8002d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	2203      	movs	r2, #3
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	43db      	mvns	r3, r3
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0203 	and.w	r2, r3, #3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d00b      	beq.n	8002d84 <HAL_GPIO_Init+0xd4>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d007      	beq.n	8002d84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d78:	2b11      	cmp	r3, #17
 8002d7a:	d003      	beq.n	8002d84 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b12      	cmp	r3, #18
 8002d82:	d130      	bne.n	8002de6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	693a      	ldr	r2, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dba:	2201      	movs	r2, #1
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	091b      	lsrs	r3, r3, #4
 8002dd0:	f003 0201 	and.w	r2, r3, #1
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	005b      	lsls	r3, r3, #1
 8002df0:	2203      	movs	r2, #3
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43db      	mvns	r3, r3
 8002df8:	693a      	ldr	r2, [r7, #16]
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	693a      	ldr	r2, [r7, #16]
 8002e14:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 80ac 	beq.w	8002f7c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e24:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <HAL_GPIO_Init+0x2f0>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	4a5d      	ldr	r2, [pc, #372]	; (8002fa0 <HAL_GPIO_Init+0x2f0>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6193      	str	r3, [r2, #24]
 8002e30:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <HAL_GPIO_Init+0x2f0>)
 8002e32:	699b      	ldr	r3, [r3, #24]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	60bb      	str	r3, [r7, #8]
 8002e3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e3c:	4a59      	ldr	r2, [pc, #356]	; (8002fa4 <HAL_GPIO_Init+0x2f4>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	089b      	lsrs	r3, r3, #2
 8002e42:	3302      	adds	r3, #2
 8002e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0303 	and.w	r3, r3, #3
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	220f      	movs	r2, #15
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e66:	d025      	beq.n	8002eb4 <HAL_GPIO_Init+0x204>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a4f      	ldr	r2, [pc, #316]	; (8002fa8 <HAL_GPIO_Init+0x2f8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01f      	beq.n	8002eb0 <HAL_GPIO_Init+0x200>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	4a4e      	ldr	r2, [pc, #312]	; (8002fac <HAL_GPIO_Init+0x2fc>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d019      	beq.n	8002eac <HAL_GPIO_Init+0x1fc>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a4d      	ldr	r2, [pc, #308]	; (8002fb0 <HAL_GPIO_Init+0x300>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_GPIO_Init+0x1f8>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a4c      	ldr	r2, [pc, #304]	; (8002fb4 <HAL_GPIO_Init+0x304>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d00d      	beq.n	8002ea4 <HAL_GPIO_Init+0x1f4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a4b      	ldr	r2, [pc, #300]	; (8002fb8 <HAL_GPIO_Init+0x308>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d007      	beq.n	8002ea0 <HAL_GPIO_Init+0x1f0>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	4a4a      	ldr	r2, [pc, #296]	; (8002fbc <HAL_GPIO_Init+0x30c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d101      	bne.n	8002e9c <HAL_GPIO_Init+0x1ec>
 8002e98:	2306      	movs	r3, #6
 8002e9a:	e00c      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002e9c:	2307      	movs	r3, #7
 8002e9e:	e00a      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002ea0:	2305      	movs	r3, #5
 8002ea2:	e008      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	e006      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002ea8:	2303      	movs	r3, #3
 8002eaa:	e004      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002eac:	2302      	movs	r3, #2
 8002eae:	e002      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e000      	b.n	8002eb6 <HAL_GPIO_Init+0x206>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	f002 0203 	and.w	r2, r2, #3
 8002ebc:	0092      	lsls	r2, r2, #2
 8002ebe:	4093      	lsls	r3, r2
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ec6:	4937      	ldr	r1, [pc, #220]	; (8002fa4 <HAL_GPIO_Init+0x2f4>)
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	089b      	lsrs	r3, r3, #2
 8002ecc:	3302      	adds	r3, #2
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ed4:	4b3a      	ldr	r3, [pc, #232]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ef0:	693a      	ldr	r2, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ef8:	4a31      	ldr	r2, [pc, #196]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002efe:	4b30      	ldr	r3, [pc, #192]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	43db      	mvns	r3, r3
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d003      	beq.n	8002f22 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f1a:	693a      	ldr	r2, [r7, #16]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f22:	4a27      	ldr	r2, [pc, #156]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f28:	4b25      	ldr	r3, [pc, #148]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	43db      	mvns	r3, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4013      	ands	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002f4c:	4a1c      	ldr	r2, [pc, #112]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f52:	4b1b      	ldr	r3, [pc, #108]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f76:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_GPIO_Init+0x310>)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	3301      	adds	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f ae97 	bne.w	8002cc0 <HAL_GPIO_Init+0x10>
  }
}
 8002f92:	bf00      	nop
 8002f94:	371c      	adds	r7, #28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr
 8002f9e:	bf00      	nop
 8002fa0:	40021000 	.word	0x40021000
 8002fa4:	40010000 	.word	0x40010000
 8002fa8:	48000400 	.word	0x48000400
 8002fac:	48000800 	.word	0x48000800
 8002fb0:	48000c00 	.word	0x48000c00
 8002fb4:	48001000 	.word	0x48001000
 8002fb8:	48001400 	.word	0x48001400
 8002fbc:	48001800 	.word	0x48001800
 8002fc0:	40010400 	.word	0x40010400

08002fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	460b      	mov	r3, r1
 8002fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	887b      	ldrh	r3, [r7, #2]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d002      	beq.n	8002fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	73fb      	strb	r3, [r7, #15]
 8002fe0:	e001      	b.n	8002fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003010:	e002      	b.n	8003018 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800302a:	af00      	add	r7, sp, #0
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003030:	1d3b      	adds	r3, r7, #4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d102      	bne.n	800303e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f000 bf01 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800303e:	1d3b      	adds	r3, r7, #4
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0301 	and.w	r3, r3, #1
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8160 	beq.w	800330e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800304e:	4bae      	ldr	r3, [pc, #696]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b04      	cmp	r3, #4
 8003058:	d00c      	beq.n	8003074 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800305a:	4bab      	ldr	r3, [pc, #684]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b08      	cmp	r3, #8
 8003064:	d159      	bne.n	800311a <HAL_RCC_OscConfig+0xf6>
 8003066:	4ba8      	ldr	r3, [pc, #672]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800306e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003072:	d152      	bne.n	800311a <HAL_RCC_OscConfig+0xf6>
 8003074:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003078:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003088:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	fab3 f383 	clz	r3, r3
 8003090:	b2db      	uxtb	r3, r3
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	b2db      	uxtb	r3, r3
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	d102      	bne.n	80030a6 <HAL_RCC_OscConfig+0x82>
 80030a0:	4b99      	ldr	r3, [pc, #612]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	e015      	b.n	80030d2 <HAL_RCC_OscConfig+0xae>
 80030a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030aa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80030ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030be:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80030c2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80030ce:	4b8e      	ldr	r3, [pc, #568]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80030da:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80030de:	fa92 f2a2 	rbit	r2, r2
 80030e2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80030e6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80030ea:	fab2 f282 	clz	r2, r2
 80030ee:	b2d2      	uxtb	r2, r2
 80030f0:	f042 0220 	orr.w	r2, r2, #32
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	f002 021f 	and.w	r2, r2, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003100:	4013      	ands	r3, r2
 8003102:	2b00      	cmp	r3, #0
 8003104:	f000 8102 	beq.w	800330c <HAL_RCC_OscConfig+0x2e8>
 8003108:	1d3b      	adds	r3, r7, #4
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 80fc 	bne.w	800330c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	f000 be93 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800311a:	1d3b      	adds	r3, r7, #4
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003124:	d106      	bne.n	8003134 <HAL_RCC_OscConfig+0x110>
 8003126:	4b78      	ldr	r3, [pc, #480]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a77      	ldr	r2, [pc, #476]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e030      	b.n	8003196 <HAL_RCC_OscConfig+0x172>
 8003134:	1d3b      	adds	r3, r7, #4
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10c      	bne.n	8003158 <HAL_RCC_OscConfig+0x134>
 800313e:	4b72      	ldr	r3, [pc, #456]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a71      	ldr	r2, [pc, #452]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	4b6f      	ldr	r3, [pc, #444]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a6e      	ldr	r2, [pc, #440]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e01e      	b.n	8003196 <HAL_RCC_OscConfig+0x172>
 8003158:	1d3b      	adds	r3, r7, #4
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x15a>
 8003164:	4b68      	ldr	r3, [pc, #416]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a67      	ldr	r2, [pc, #412]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800316a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800316e:	6013      	str	r3, [r2, #0]
 8003170:	4b65      	ldr	r3, [pc, #404]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a64      	ldr	r2, [pc, #400]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e00b      	b.n	8003196 <HAL_RCC_OscConfig+0x172>
 800317e:	4b62      	ldr	r3, [pc, #392]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a61      	ldr	r2, [pc, #388]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	6013      	str	r3, [r2, #0]
 800318a:	4b5f      	ldr	r3, [pc, #380]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a5e      	ldr	r2, [pc, #376]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 8003190:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d059      	beq.n	8003254 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031a0:	f7ff fc72 	bl	8002a88 <HAL_GetTick>
 80031a4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031aa:	f7ff fc6d 	bl	8002a88 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b64      	cmp	r3, #100	; 0x64
 80031b8:	d902      	bls.n	80031c0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	f000 be40 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
 80031c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031c4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80031d4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d8:	fab3 f383 	clz	r3, r3
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	f043 0301 	orr.w	r3, r3, #1
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d102      	bne.n	80031f2 <HAL_RCC_OscConfig+0x1ce>
 80031ec:	4b46      	ldr	r3, [pc, #280]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	e015      	b.n	800321e <HAL_RCC_OscConfig+0x1fa>
 80031f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80031fe:	fa93 f3a3 	rbit	r3, r3
 8003202:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003206:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800320a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800320e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800321a:	4b3b      	ldr	r3, [pc, #236]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003222:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003226:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800322a:	fa92 f2a2 	rbit	r2, r2
 800322e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003232:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003236:	fab2 f282 	clz	r2, r2
 800323a:	b2d2      	uxtb	r2, r2
 800323c:	f042 0220 	orr.w	r2, r2, #32
 8003240:	b2d2      	uxtb	r2, r2
 8003242:	f002 021f 	and.w	r2, r2, #31
 8003246:	2101      	movs	r1, #1
 8003248:	fa01 f202 	lsl.w	r2, r1, r2
 800324c:	4013      	ands	r3, r2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d0ab      	beq.n	80031aa <HAL_RCC_OscConfig+0x186>
 8003252:	e05c      	b.n	800330e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003254:	f7ff fc18 	bl	8002a88 <HAL_GetTick>
 8003258:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800325e:	f7ff fc13 	bl	8002a88 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b64      	cmp	r3, #100	; 0x64
 800326c:	d902      	bls.n	8003274 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	f000 bde6 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003274:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003278:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003288:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800328c:	fab3 f383 	clz	r3, r3
 8003290:	b2db      	uxtb	r3, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	b2db      	uxtb	r3, r3
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b01      	cmp	r3, #1
 800329e:	d102      	bne.n	80032a6 <HAL_RCC_OscConfig+0x282>
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	e015      	b.n	80032d2 <HAL_RCC_OscConfig+0x2ae>
 80032a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80032b2:	fa93 f3a3 	rbit	r3, r3
 80032b6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80032ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032be:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80032c2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <HAL_RCC_OscConfig+0x2e4>)
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80032d6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80032da:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80032de:	fa92 f2a2 	rbit	r2, r2
 80032e2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80032e6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80032ea:	fab2 f282 	clz	r2, r2
 80032ee:	b2d2      	uxtb	r2, r2
 80032f0:	f042 0220 	orr.w	r2, r2, #32
 80032f4:	b2d2      	uxtb	r2, r2
 80032f6:	f002 021f 	and.w	r2, r2, #31
 80032fa:	2101      	movs	r1, #1
 80032fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003300:	4013      	ands	r3, r2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ab      	bne.n	800325e <HAL_RCC_OscConfig+0x23a>
 8003306:	e002      	b.n	800330e <HAL_RCC_OscConfig+0x2ea>
 8003308:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	1d3b      	adds	r3, r7, #4
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0302 	and.w	r3, r3, #2
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8170 	beq.w	80035fe <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800331e:	4bd0      	ldr	r3, [pc, #832]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f003 030c 	and.w	r3, r3, #12
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800332a:	4bcd      	ldr	r3, [pc, #820]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d16d      	bne.n	8003412 <HAL_RCC_OscConfig+0x3ee>
 8003336:	4bca      	ldr	r3, [pc, #808]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800333e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003342:	d166      	bne.n	8003412 <HAL_RCC_OscConfig+0x3ee>
 8003344:	2302      	movs	r3, #2
 8003346:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003356:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	095b      	lsrs	r3, r3, #5
 8003362:	b2db      	uxtb	r3, r3
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b01      	cmp	r3, #1
 800336c:	d102      	bne.n	8003374 <HAL_RCC_OscConfig+0x350>
 800336e:	4bbc      	ldr	r3, [pc, #752]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	e013      	b.n	800339c <HAL_RCC_OscConfig+0x378>
 8003374:	2302      	movs	r3, #2
 8003376:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003386:	2302      	movs	r3, #2
 8003388:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800338c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003398:	4bb1      	ldr	r3, [pc, #708]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2202      	movs	r2, #2
 800339e:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80033a2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80033a6:	fa92 f2a2 	rbit	r2, r2
 80033aa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80033ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80033b2:	fab2 f282 	clz	r2, r2
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f042 0220 	orr.w	r2, r2, #32
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f002 021f 	and.w	r2, r2, #31
 80033c2:	2101      	movs	r1, #1
 80033c4:	fa01 f202 	lsl.w	r2, r1, r2
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d007      	beq.n	80033de <HAL_RCC_OscConfig+0x3ba>
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d002      	beq.n	80033de <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	f000 bd31 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	4ba0      	ldr	r3, [pc, #640]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e6:	1d3b      	adds	r3, r7, #4
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	21f8      	movs	r1, #248	; 0xf8
 80033ee:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f2:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80033f6:	fa91 f1a1 	rbit	r1, r1
 80033fa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80033fe:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003402:	fab1 f181 	clz	r1, r1
 8003406:	b2c9      	uxtb	r1, r1
 8003408:	408b      	lsls	r3, r1
 800340a:	4995      	ldr	r1, [pc, #596]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 800340c:	4313      	orrs	r3, r2
 800340e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003410:	e0f5      	b.n	80035fe <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 8085 	beq.w	8003528 <HAL_RCC_OscConfig+0x504>
 800341e:	2301      	movs	r3, #1
 8003420:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003430:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003434:	fab3 f383 	clz	r3, r3
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800343e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	461a      	mov	r2, r3
 8003446:	2301      	movs	r3, #1
 8003448:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344a:	f7ff fb1d 	bl	8002a88 <HAL_GetTick>
 800344e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003454:	f7ff fb18 	bl	8002a88 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	f000 bceb 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
 800346a:	2302      	movs	r3, #2
 800346c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800347c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	b2db      	uxtb	r3, r3
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f043 0301 	orr.w	r3, r3, #1
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b01      	cmp	r3, #1
 8003492:	d102      	bne.n	800349a <HAL_RCC_OscConfig+0x476>
 8003494:	4b72      	ldr	r3, [pc, #456]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	e013      	b.n	80034c2 <HAL_RCC_OscConfig+0x49e>
 800349a:	2302      	movs	r3, #2
 800349c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80034ac:	2302      	movs	r3, #2
 80034ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80034b2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80034be:	4b68      	ldr	r3, [pc, #416]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	2202      	movs	r2, #2
 80034c4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80034c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80034cc:	fa92 f2a2 	rbit	r2, r2
 80034d0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80034d4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80034d8:	fab2 f282 	clz	r2, r2
 80034dc:	b2d2      	uxtb	r2, r2
 80034de:	f042 0220 	orr.w	r2, r2, #32
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	f002 021f 	and.w	r2, r2, #31
 80034e8:	2101      	movs	r1, #1
 80034ea:	fa01 f202 	lsl.w	r2, r1, r2
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d0af      	beq.n	8003454 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f4:	4b5a      	ldr	r3, [pc, #360]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034fc:	1d3b      	adds	r3, r7, #4
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	21f8      	movs	r1, #248	; 0xf8
 8003504:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800350c:	fa91 f1a1 	rbit	r1, r1
 8003510:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003514:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003518:	fab1 f181 	clz	r1, r1
 800351c:	b2c9      	uxtb	r1, r1
 800351e:	408b      	lsls	r3, r1
 8003520:	494f      	ldr	r1, [pc, #316]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 8003522:	4313      	orrs	r3, r2
 8003524:	600b      	str	r3, [r1, #0]
 8003526:	e06a      	b.n	80035fe <HAL_RCC_OscConfig+0x5da>
 8003528:	2301      	movs	r3, #1
 800352a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003532:	fa93 f3a3 	rbit	r3, r3
 8003536:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800353a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003548:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	461a      	mov	r2, r3
 8003550:	2300      	movs	r3, #0
 8003552:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7ff fa98 	bl	8002a88 <HAL_GetTick>
 8003558:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800355c:	e00a      	b.n	8003574 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800355e:	f7ff fa93 	bl	8002a88 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	f000 bc66 	b.w	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003574:	2302      	movs	r3, #2
 8003576:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800357e:	fa93 f3a3 	rbit	r3, r3
 8003582:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003586:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	b2db      	uxtb	r3, r3
 8003594:	f043 0301 	orr.w	r3, r3, #1
 8003598:	b2db      	uxtb	r3, r3
 800359a:	2b01      	cmp	r3, #1
 800359c:	d102      	bne.n	80035a4 <HAL_RCC_OscConfig+0x580>
 800359e:	4b30      	ldr	r3, [pc, #192]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	e013      	b.n	80035cc <HAL_RCC_OscConfig+0x5a8>
 80035a4:	2302      	movs	r3, #2
 80035a6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80035ae:	fa93 f3a3 	rbit	r3, r3
 80035b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80035b6:	2302      	movs	r3, #2
 80035b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80035bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80035c0:	fa93 f3a3 	rbit	r3, r3
 80035c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <HAL_RCC_OscConfig+0x63c>)
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2202      	movs	r2, #2
 80035ce:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80035d2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80035d6:	fa92 f2a2 	rbit	r2, r2
 80035da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80035de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80035e2:	fab2 f282 	clz	r2, r2
 80035e6:	b2d2      	uxtb	r2, r2
 80035e8:	f042 0220 	orr.w	r2, r2, #32
 80035ec:	b2d2      	uxtb	r2, r2
 80035ee:	f002 021f 	and.w	r2, r2, #31
 80035f2:	2101      	movs	r1, #1
 80035f4:	fa01 f202 	lsl.w	r2, r1, r2
 80035f8:	4013      	ands	r3, r2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1af      	bne.n	800355e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80da 	beq.w	80037c2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d069      	beq.n	80036ec <HAL_RCC_OscConfig+0x6c8>
 8003618:	2301      	movs	r3, #1
 800361a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003622:	fa93 f3a3 	rbit	r3, r3
 8003626:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800362a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	461a      	mov	r2, r3
 8003636:	4b0b      	ldr	r3, [pc, #44]	; (8003664 <HAL_RCC_OscConfig+0x640>)
 8003638:	4413      	add	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	461a      	mov	r2, r3
 800363e:	2301      	movs	r3, #1
 8003640:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003642:	f7ff fa21 	bl	8002a88 <HAL_GetTick>
 8003646:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800364a:	e00d      	b.n	8003668 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800364c:	f7ff fa1c 	bl	8002a88 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d905      	bls.n	8003668 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e3ef      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003660:	40021000 	.word	0x40021000
 8003664:	10908120 	.word	0x10908120
 8003668:	2302      	movs	r3, #2
 800366a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003672:	fa93 f2a3 	rbit	r2, r3
 8003676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003680:	2202      	movs	r2, #2
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	fa93 f2a3 	rbit	r2, r3
 800368e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003698:	2202      	movs	r2, #2
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	fa93 f2a3 	rbit	r2, r3
 80036a6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80036aa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ac:	4ba4      	ldr	r3, [pc, #656]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80036ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80036b4:	2102      	movs	r1, #2
 80036b6:	6019      	str	r1, [r3, #0]
 80036b8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	fa93 f1a3 	rbit	r1, r3
 80036c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036c6:	6019      	str	r1, [r3, #0]
  return result;
 80036c8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	fab3 f383 	clz	r3, r3
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f003 031f 	and.w	r3, r3, #31
 80036de:	2101      	movs	r1, #1
 80036e0:	fa01 f303 	lsl.w	r3, r1, r3
 80036e4:	4013      	ands	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d0b0      	beq.n	800364c <HAL_RCC_OscConfig+0x628>
 80036ea:	e06a      	b.n	80037c2 <HAL_RCC_OscConfig+0x79e>
 80036ec:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	fa93 f2a3 	rbit	r2, r3
 80036fe:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003702:	601a      	str	r2, [r3, #0]
  return result;
 8003704:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003708:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370a:	fab3 f383 	clz	r3, r3
 800370e:	b2db      	uxtb	r3, r3
 8003710:	461a      	mov	r2, r3
 8003712:	4b8c      	ldr	r3, [pc, #560]	; (8003944 <HAL_RCC_OscConfig+0x920>)
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	461a      	mov	r2, r3
 800371a:	2300      	movs	r3, #0
 800371c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800371e:	f7ff f9b3 	bl	8002a88 <HAL_GetTick>
 8003722:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003726:	e009      	b.n	800373c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003728:	f7ff f9ae 	bl	8002a88 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e381      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 800373c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003740:	2202      	movs	r2, #2
 8003742:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003744:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	fa93 f2a3 	rbit	r2, r3
 800374e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003758:	2202      	movs	r2, #2
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	fa93 f2a3 	rbit	r2, r3
 8003766:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003770:	2202      	movs	r2, #2
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	fa93 f2a3 	rbit	r2, r3
 800377e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003782:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003784:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003788:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800378c:	2102      	movs	r1, #2
 800378e:	6019      	str	r1, [r3, #0]
 8003790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	fa93 f1a3 	rbit	r1, r3
 800379a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800379e:	6019      	str	r1, [r3, #0]
  return result;
 80037a0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	f003 031f 	and.w	r3, r3, #31
 80037b6:	2101      	movs	r1, #1
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	4013      	ands	r3, r2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1b2      	bne.n	8003728 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c2:	1d3b      	adds	r3, r7, #4
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8157 	beq.w	8003a80 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d8:	4b59      	ldr	r3, [pc, #356]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d112      	bne.n	800380a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b56      	ldr	r3, [pc, #344]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80037e6:	69db      	ldr	r3, [r3, #28]
 80037e8:	4a55      	ldr	r2, [pc, #340]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	61d3      	str	r3, [r2, #28]
 80037f0:	4b53      	ldr	r3, [pc, #332]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80037f8:	f107 030c 	add.w	r3, r7, #12
 80037fc:	601a      	str	r2, [r3, #0]
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_OscConfig+0x924>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d11a      	bne.n	800384c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003816:	4b4c      	ldr	r3, [pc, #304]	; (8003948 <HAL_RCC_OscConfig+0x924>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a4b      	ldr	r2, [pc, #300]	; (8003948 <HAL_RCC_OscConfig+0x924>)
 800381c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003820:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003822:	f7ff f931 	bl	8002a88 <HAL_GetTick>
 8003826:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800382a:	e009      	b.n	8003840 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800382c:	f7ff f92c 	bl	8002a88 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b64      	cmp	r3, #100	; 0x64
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e2ff      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003840:	4b41      	ldr	r3, [pc, #260]	; (8003948 <HAL_RCC_OscConfig+0x924>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003848:	2b00      	cmp	r3, #0
 800384a:	d0ef      	beq.n	800382c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d106      	bne.n	8003864 <HAL_RCC_OscConfig+0x840>
 8003856:	4b3a      	ldr	r3, [pc, #232]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	4a39      	ldr	r2, [pc, #228]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6213      	str	r3, [r2, #32]
 8003862:	e02f      	b.n	80038c4 <HAL_RCC_OscConfig+0x8a0>
 8003864:	1d3b      	adds	r3, r7, #4
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10c      	bne.n	8003888 <HAL_RCC_OscConfig+0x864>
 800386e:	4b34      	ldr	r3, [pc, #208]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	4a33      	ldr	r2, [pc, #204]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6213      	str	r3, [r2, #32]
 800387a:	4b31      	ldr	r3, [pc, #196]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 800387c:	6a1b      	ldr	r3, [r3, #32]
 800387e:	4a30      	ldr	r2, [pc, #192]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003880:	f023 0304 	bic.w	r3, r3, #4
 8003884:	6213      	str	r3, [r2, #32]
 8003886:	e01d      	b.n	80038c4 <HAL_RCC_OscConfig+0x8a0>
 8003888:	1d3b      	adds	r3, r7, #4
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x888>
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6213      	str	r3, [r2, #32]
 800389e:	4b28      	ldr	r3, [pc, #160]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	4a27      	ldr	r2, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6213      	str	r3, [r2, #32]
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x8a0>
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6213      	str	r3, [r2, #32]
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038ba:	6a1b      	ldr	r3, [r3, #32]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80038c4:	1d3b      	adds	r3, r7, #4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d06a      	beq.n	80039a4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ce:	f7ff f8db 	bl	8002a88 <HAL_GetTick>
 80038d2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d8:	f7ff f8d6 	bl	8002a88 <HAL_GetTick>
 80038dc:	4602      	mov	r2, r0
 80038de:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e2a7      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 80038f0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80038f4:	2202      	movs	r2, #2
 80038f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	fa93 f2a3 	rbit	r2, r3
 8003902:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800390c:	2202      	movs	r2, #2
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	fa93 f2a3 	rbit	r2, r3
 800391a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800391e:	601a      	str	r2, [r3, #0]
  return result;
 8003920:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003924:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003926:	fab3 f383 	clz	r3, r3
 800392a:	b2db      	uxtb	r3, r3
 800392c:	095b      	lsrs	r3, r3, #5
 800392e:	b2db      	uxtb	r3, r3
 8003930:	f043 0302 	orr.w	r3, r3, #2
 8003934:	b2db      	uxtb	r3, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d108      	bne.n	800394c <HAL_RCC_OscConfig+0x928>
 800393a:	4b01      	ldr	r3, [pc, #4]	; (8003940 <HAL_RCC_OscConfig+0x91c>)
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	e013      	b.n	8003968 <HAL_RCC_OscConfig+0x944>
 8003940:	40021000 	.word	0x40021000
 8003944:	10908120 	.word	0x10908120
 8003948:	40007000 	.word	0x40007000
 800394c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003950:	2202      	movs	r2, #2
 8003952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003954:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	fa93 f2a3 	rbit	r2, r3
 800395e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	4bc0      	ldr	r3, [pc, #768]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800396c:	2102      	movs	r1, #2
 800396e:	6011      	str	r1, [r2, #0]
 8003970:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003974:	6812      	ldr	r2, [r2, #0]
 8003976:	fa92 f1a2 	rbit	r1, r2
 800397a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800397e:	6011      	str	r1, [r2, #0]
  return result;
 8003980:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	fab2 f282 	clz	r2, r2
 800398a:	b2d2      	uxtb	r2, r2
 800398c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	f002 021f 	and.w	r2, r2, #31
 8003996:	2101      	movs	r1, #1
 8003998:	fa01 f202 	lsl.w	r2, r1, r2
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d09a      	beq.n	80038d8 <HAL_RCC_OscConfig+0x8b4>
 80039a2:	e063      	b.n	8003a6c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039a4:	f7ff f870 	bl	8002a88 <HAL_GetTick>
 80039a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ac:	e00b      	b.n	80039c6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ae:	f7ff f86b 	bl	8002a88 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e23c      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 80039c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039ca:	2202      	movs	r2, #2
 80039cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	fa93 f2a3 	rbit	r2, r3
 80039d8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039e2:	2202      	movs	r2, #2
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	fa93 f2a3 	rbit	r2, r3
 80039f0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039f4:	601a      	str	r2, [r3, #0]
  return result;
 80039f6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80039fa:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fc:	fab3 f383 	clz	r3, r3
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	f043 0302 	orr.w	r3, r3, #2
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b02      	cmp	r3, #2
 8003a0e:	d102      	bne.n	8003a16 <HAL_RCC_OscConfig+0x9f2>
 8003a10:	4b95      	ldr	r3, [pc, #596]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	e00d      	b.n	8003a32 <HAL_RCC_OscConfig+0xa0e>
 8003a16:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a1e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fa93 f2a3 	rbit	r2, r3
 8003a28:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003a2c:	601a      	str	r2, [r3, #0]
 8003a2e:	4b8e      	ldr	r3, [pc, #568]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003a36:	2102      	movs	r1, #2
 8003a38:	6011      	str	r1, [r2, #0]
 8003a3a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	fa92 f1a2 	rbit	r1, r2
 8003a44:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003a48:	6011      	str	r1, [r2, #0]
  return result;
 8003a4a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	fab2 f282 	clz	r2, r2
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	f002 021f 	and.w	r2, r2, #31
 8003a60:	2101      	movs	r1, #1
 8003a62:	fa01 f202 	lsl.w	r2, r1, r2
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1a0      	bne.n	80039ae <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003a6c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a74:	4b7c      	ldr	r3, [pc, #496]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4a7b      	ldr	r2, [pc, #492]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a80:	1d3b      	adds	r3, r7, #4
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 81d9 	beq.w	8003e3e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8c:	4b76      	ldr	r3, [pc, #472]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 030c 	and.w	r3, r3, #12
 8003a94:	2b08      	cmp	r3, #8
 8003a96:	f000 81a6 	beq.w	8003de6 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a9a:	1d3b      	adds	r3, r7, #4
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	f040 811e 	bne.w	8003ce2 <HAL_RCC_OscConfig+0xcbe>
 8003aa6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003aae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	fa93 f2a3 	rbit	r2, r3
 8003aba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8003ac4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	fab3 f383 	clz	r3, r3
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	2300      	movs	r3, #0
 8003ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003adc:	f7fe ffd4 	bl	8002a88 <HAL_GetTick>
 8003ae0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae4:	e009      	b.n	8003afa <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe ffcf 	bl	8002a88 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e1a2      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003afa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003afe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b12:	601a      	str	r2, [r3, #0]
  return result;
 8003b14:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003b18:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b1a:	fab3 f383 	clz	r3, r3
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	095b      	lsrs	r3, r3, #5
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d102      	bne.n	8003b34 <HAL_RCC_OscConfig+0xb10>
 8003b2e:	4b4e      	ldr	r3, [pc, #312]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	e01b      	b.n	8003b6c <HAL_RCC_OscConfig+0xb48>
 8003b34:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b38:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	fa93 f2a3 	rbit	r2, r3
 8003b48:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	fa93 f2a3 	rbit	r2, r3
 8003b62:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8003b66:	601a      	str	r2, [r3, #0]
 8003b68:	4b3f      	ldr	r3, [pc, #252]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003b70:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003b74:	6011      	str	r1, [r2, #0]
 8003b76:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	fa92 f1a2 	rbit	r1, r2
 8003b80:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b84:	6011      	str	r1, [r2, #0]
  return result;
 8003b86:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	fab2 f282 	clz	r2, r2
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	f042 0220 	orr.w	r2, r2, #32
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	f002 021f 	and.w	r2, r2, #31
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d19e      	bne.n	8003ae6 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	f023 020f 	bic.w	r2, r3, #15
 8003bb0:	1d3b      	adds	r3, r7, #4
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb6:	492c      	ldr	r1, [pc, #176]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	62cb      	str	r3, [r1, #44]	; 0x2c
 8003bbc:	4b2a      	ldr	r3, [pc, #168]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8003bc4:	1d3b      	adds	r3, r7, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a19      	ldr	r1, [r3, #32]
 8003bca:	1d3b      	adds	r3, r7, #4
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	430b      	orrs	r3, r1
 8003bd2:	4925      	ldr	r1, [pc, #148]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
 8003bd8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003be0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	fa93 f2a3 	rbit	r2, r3
 8003bec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bf0:	601a      	str	r2, [r3, #0]
  return result;
 8003bf2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003bf6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf8:	fab3 f383 	clz	r3, r3
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003c02:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	461a      	mov	r2, r3
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0e:	f7fe ff3b 	bl	8002a88 <HAL_GetTick>
 8003c12:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c16:	e009      	b.n	8003c2c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c18:	f7fe ff36 	bl	8002a88 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e109      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003c2c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	fa93 f2a3 	rbit	r2, r3
 8003c40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c44:	601a      	str	r2, [r3, #0]
  return result;
 8003c46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003c4a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c4c:	fab3 f383 	clz	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	095b      	lsrs	r3, r3, #5
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d105      	bne.n	8003c6c <HAL_RCC_OscConfig+0xc48>
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <HAL_RCC_OscConfig+0xc44>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	e01e      	b.n	8003ca4 <HAL_RCC_OscConfig+0xc80>
 8003c66:	bf00      	nop
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	fa93 f2a3 	rbit	r2, r3
 8003c80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c8e:	601a      	str	r2, [r3, #0]
 8003c90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	fa93 f2a3 	rbit	r2, r3
 8003c9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	4b6a      	ldr	r3, [pc, #424]	; (8003e4c <HAL_RCC_OscConfig+0xe28>)
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ca8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003cac:	6011      	str	r1, [r2, #0]
 8003cae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	fa92 f1a2 	rbit	r1, r2
 8003cb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003cbc:	6011      	str	r1, [r2, #0]
  return result;
 8003cbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	fab2 f282 	clz	r2, r2
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	f042 0220 	orr.w	r2, r2, #32
 8003cce:	b2d2      	uxtb	r2, r2
 8003cd0:	f002 021f 	and.w	r2, r2, #31
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003cda:	4013      	ands	r3, r2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d09b      	beq.n	8003c18 <HAL_RCC_OscConfig+0xbf4>
 8003ce0:	e0ad      	b.n	8003e3e <HAL_RCC_OscConfig+0xe1a>
 8003ce2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003ce6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	fa93 f2a3 	rbit	r2, r3
 8003cf6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003cfa:	601a      	str	r2, [r3, #0]
  return result;
 8003cfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003d00:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d02:	fab3 f383 	clz	r3, r3
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d0c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	461a      	mov	r2, r3
 8003d14:	2300      	movs	r3, #0
 8003d16:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fe feb6 	bl	8002a88 <HAL_GetTick>
 8003d1c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d20:	e009      	b.n	8003d36 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d22:	f7fe feb1 	bl	8002a88 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e084      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
 8003d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	fa93 f2a3 	rbit	r2, r3
 8003d4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d4e:	601a      	str	r2, [r3, #0]
  return result;
 8003d50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d54:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	095b      	lsrs	r3, r3, #5
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	f043 0301 	orr.w	r3, r3, #1
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d102      	bne.n	8003d70 <HAL_RCC_OscConfig+0xd4c>
 8003d6a:	4b38      	ldr	r3, [pc, #224]	; (8003e4c <HAL_RCC_OscConfig+0xe28>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	e01b      	b.n	8003da8 <HAL_RCC_OscConfig+0xd84>
 8003d70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d74:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f107 0320 	add.w	r3, r7, #32
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	f107 031c 	add.w	r3, r7, #28
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	fa93 f2a3 	rbit	r2, r3
 8003d9e:	f107 0318 	add.w	r3, r7, #24
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	4b29      	ldr	r3, [pc, #164]	; (8003e4c <HAL_RCC_OscConfig+0xe28>)
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	f107 0214 	add.w	r2, r7, #20
 8003dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	f107 0214 	add.w	r2, r7, #20
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	fa92 f1a2 	rbit	r1, r2
 8003dbc:	f107 0210 	add.w	r2, r7, #16
 8003dc0:	6011      	str	r1, [r2, #0]
  return result;
 8003dc2:	f107 0210 	add.w	r2, r7, #16
 8003dc6:	6812      	ldr	r2, [r2, #0]
 8003dc8:	fab2 f282 	clz	r2, r2
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	f042 0220 	orr.w	r2, r2, #32
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	f002 021f 	and.w	r2, r2, #31
 8003dd8:	2101      	movs	r1, #1
 8003dda:	fa01 f202 	lsl.w	r2, r1, r2
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d19e      	bne.n	8003d22 <HAL_RCC_OscConfig+0xcfe>
 8003de4:	e02b      	b.n	8003e3e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003de6:	1d3b      	adds	r3, r7, #4
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d101      	bne.n	8003df4 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e025      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003df4:	4b15      	ldr	r3, [pc, #84]	; (8003e4c <HAL_RCC_OscConfig+0xe28>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003dfc:	4b13      	ldr	r3, [pc, #76]	; (8003e4c <HAL_RCC_OscConfig+0xe28>)
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e08:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003e0c:	1d3b      	adds	r3, r7, #4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d111      	bne.n	8003e3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003e1a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e1e:	1d3b      	adds	r3, r7, #4
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d108      	bne.n	8003e3a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003e28:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e2c:	f003 020f 	and.w	r2, r3, #15
 8003e30:	1d3b      	adds	r3, r7, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b09e      	sub	sp, #120	; 0x78
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e162      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e68:	4b90      	ldr	r3, [pc, #576]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	429a      	cmp	r2, r3
 8003e74:	d910      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e76:	4b8d      	ldr	r3, [pc, #564]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f023 0207 	bic.w	r2, r3, #7
 8003e7e:	498b      	ldr	r1, [pc, #556]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e86:	4b89      	ldr	r3, [pc, #548]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0307 	and.w	r3, r3, #7
 8003e8e:	683a      	ldr	r2, [r7, #0]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d001      	beq.n	8003e98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e14a      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d008      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b82      	ldr	r3, [pc, #520]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	497f      	ldr	r1, [pc, #508]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 80dc 	beq.w	800407c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d13c      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xf6>
 8003ecc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003eda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	095b      	lsrs	r3, r3, #5
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	f043 0301 	orr.w	r3, r3, #1
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d102      	bne.n	8003ef6 <HAL_RCC_ClockConfig+0xa6>
 8003ef0:	4b6f      	ldr	r3, [pc, #444]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCC_ClockConfig+0xc6>
 8003ef6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003efa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	667b      	str	r3, [r7, #100]	; 0x64
 8003f04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f08:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f0c:	fa93 f3a3 	rbit	r3, r3
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f12:	4b67      	ldr	r3, [pc, #412]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003f24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f26:	fab2 f282 	clz	r2, r2
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	f042 0220 	orr.w	r2, r2, #32
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	f002 021f 	and.w	r2, r2, #31
 8003f36:	2101      	movs	r1, #1
 8003f38:	fa01 f202 	lsl.w	r2, r1, r2
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d17b      	bne.n	800403a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e0f3      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d13c      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0x178>
 8003f4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f56:	fa93 f3a3 	rbit	r3, r3
 8003f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f5e:	fab3 f383 	clz	r3, r3
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	095b      	lsrs	r3, r3, #5
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f043 0301 	orr.w	r3, r3, #1
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d102      	bne.n	8003f78 <HAL_RCC_ClockConfig+0x128>
 8003f72:	4b4f      	ldr	r3, [pc, #316]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	e00f      	b.n	8003f98 <HAL_RCC_ClockConfig+0x148>
 8003f78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f80:	fa93 f3a3 	rbit	r3, r3
 8003f84:	647b      	str	r3, [r7, #68]	; 0x44
 8003f86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003f8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f8e:	fa93 f3a3 	rbit	r3, r3
 8003f92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f94:	4b46      	ldr	r3, [pc, #280]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	f042 0220 	orr.w	r2, r2, #32
 8003fb2:	b2d2      	uxtb	r2, r2
 8003fb4:	f002 021f 	and.w	r2, r2, #31
 8003fb8:	2101      	movs	r1, #1
 8003fba:	fa01 f202 	lsl.w	r2, r1, r2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d13a      	bne.n	800403a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e0b2      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fce:	fa93 f3a3 	rbit	r3, r3
 8003fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_RCC_ClockConfig+0x1a0>
 8003fea:	4b31      	ldr	r3, [pc, #196]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	e00d      	b.n	800400c <HAL_RCC_ClockConfig+0x1bc>
 8003ff0:	2302      	movs	r3, #2
 8003ff2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff6:	fa93 f3a3 	rbit	r3, r3
 8003ffa:	627b      	str	r3, [r7, #36]	; 0x24
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	623b      	str	r3, [r7, #32]
 8004000:	6a3b      	ldr	r3, [r7, #32]
 8004002:	fa93 f3a3 	rbit	r3, r3
 8004006:	61fb      	str	r3, [r7, #28]
 8004008:	4b29      	ldr	r3, [pc, #164]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	2202      	movs	r2, #2
 800400e:	61ba      	str	r2, [r7, #24]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	fa92 f2a2 	rbit	r2, r2
 8004016:	617a      	str	r2, [r7, #20]
  return result;
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	fab2 f282 	clz	r2, r2
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	f042 0220 	orr.w	r2, r2, #32
 8004024:	b2d2      	uxtb	r2, r2
 8004026:	f002 021f 	and.w	r2, r2, #31
 800402a:	2101      	movs	r1, #1
 800402c:	fa01 f202 	lsl.w	r2, r1, r2
 8004030:	4013      	ands	r3, r2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e079      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403a:	4b1d      	ldr	r3, [pc, #116]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f023 0203 	bic.w	r2, r3, #3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	491a      	ldr	r1, [pc, #104]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 8004048:	4313      	orrs	r3, r2
 800404a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800404c:	f7fe fd1c 	bl	8002a88 <HAL_GetTick>
 8004050:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004052:	e00a      	b.n	800406a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004054:	f7fe fd18 	bl	8002a88 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e061      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <HAL_RCC_ClockConfig+0x260>)
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	f003 020c 	and.w	r2, r3, #12
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	429a      	cmp	r2, r3
 800407a:	d1eb      	bne.n	8004054 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0307 	and.w	r3, r3, #7
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d214      	bcs.n	80040b4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b08      	ldr	r3, [pc, #32]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 0207 	bic.w	r2, r3, #7
 8004092:	4906      	ldr	r1, [pc, #24]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b04      	ldr	r3, [pc, #16]	; (80040ac <HAL_RCC_ClockConfig+0x25c>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d005      	beq.n	80040b4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e040      	b.n	800412e <HAL_RCC_ClockConfig+0x2de>
 80040ac:	40022000 	.word	0x40022000
 80040b0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d008      	beq.n	80040d2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c0:	4b1d      	ldr	r3, [pc, #116]	; (8004138 <HAL_RCC_ClockConfig+0x2e8>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	491a      	ldr	r1, [pc, #104]	; (8004138 <HAL_RCC_ClockConfig+0x2e8>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d009      	beq.n	80040f2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040de:	4b16      	ldr	r3, [pc, #88]	; (8004138 <HAL_RCC_ClockConfig+0x2e8>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	00db      	lsls	r3, r3, #3
 80040ec:	4912      	ldr	r1, [pc, #72]	; (8004138 <HAL_RCC_ClockConfig+0x2e8>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040f2:	f000 f829 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80040f6:	4601      	mov	r1, r0
 80040f8:	4b0f      	ldr	r3, [pc, #60]	; (8004138 <HAL_RCC_ClockConfig+0x2e8>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004100:	22f0      	movs	r2, #240	; 0xf0
 8004102:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	fa92 f2a2 	rbit	r2, r2
 800410a:	60fa      	str	r2, [r7, #12]
  return result;
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	fab2 f282 	clz	r2, r2
 8004112:	b2d2      	uxtb	r2, r2
 8004114:	40d3      	lsrs	r3, r2
 8004116:	4a09      	ldr	r2, [pc, #36]	; (800413c <HAL_RCC_ClockConfig+0x2ec>)
 8004118:	5cd3      	ldrb	r3, [r2, r3]
 800411a:	fa21 f303 	lsr.w	r3, r1, r3
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <HAL_RCC_ClockConfig+0x2f0>)
 8004120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004122:	4b08      	ldr	r3, [pc, #32]	; (8004144 <HAL_RCC_ClockConfig+0x2f4>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7fe fc6a 	bl	8002a00 <HAL_InitTick>
  
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3778      	adds	r7, #120	; 0x78
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	08008950 	.word	0x08008950
 8004140:	20000010 	.word	0x20000010
 8004144:	20000014 	.word	0x20000014

08004148 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b480      	push	{r7}
 800414a:	b08b      	sub	sp, #44	; 0x2c
 800414c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
 8004152:	2300      	movs	r3, #0
 8004154:	61bb      	str	r3, [r7, #24]
 8004156:	2300      	movs	r3, #0
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800415e:	2300      	movs	r3, #0
 8004160:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004162:	4b2a      	ldr	r3, [pc, #168]	; (800420c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f003 030c 	and.w	r3, r3, #12
 800416e:	2b04      	cmp	r3, #4
 8004170:	d002      	beq.n	8004178 <HAL_RCC_GetSysClockFreq+0x30>
 8004172:	2b08      	cmp	r3, #8
 8004174:	d003      	beq.n	800417e <HAL_RCC_GetSysClockFreq+0x36>
 8004176:	e03f      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004178:	4b25      	ldr	r3, [pc, #148]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc8>)
 800417a:	623b      	str	r3, [r7, #32]
      break;
 800417c:	e03f      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004184:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004188:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	fa92 f2a2 	rbit	r2, r2
 8004190:	607a      	str	r2, [r7, #4]
  return result;
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	fab2 f282 	clz	r2, r2
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	40d3      	lsrs	r3, r2
 800419c:	4a1d      	ldr	r2, [pc, #116]	; (8004214 <HAL_RCC_GetSysClockFreq+0xcc>)
 800419e:	5cd3      	ldrb	r3, [r2, r3]
 80041a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041a2:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_GetSysClockFreq+0xc4>)
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	f003 030f 	and.w	r3, r3, #15
 80041aa:	220f      	movs	r2, #15
 80041ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	fa92 f2a2 	rbit	r2, r2
 80041b4:	60fa      	str	r2, [r7, #12]
  return result;
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	fab2 f282 	clz	r2, r2
 80041bc:	b2d2      	uxtb	r2, r2
 80041be:	40d3      	lsrs	r3, r2
 80041c0:	4a15      	ldr	r2, [pc, #84]	; (8004218 <HAL_RCC_GetSysClockFreq+0xd0>)
 80041c2:	5cd3      	ldrb	r3, [r2, r3]
 80041c4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d008      	beq.n	80041e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d0:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
 80041e0:	e007      	b.n	80041f2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041e2:	4a0b      	ldr	r2, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	fb02 f303 	mul.w	r3, r2, r3
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	623b      	str	r3, [r7, #32]
      break;
 80041f6:	e002      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041fa:	623b      	str	r3, [r7, #32]
      break;
 80041fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004200:	4618      	mov	r0, r3
 8004202:	372c      	adds	r7, #44	; 0x2c
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	08008968 	.word	0x08008968
 8004218:	08008978 	.word	0x08008978

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000010 	.word	0x20000010

08004234 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b082      	sub	sp, #8
 8004238:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800423a:	f7ff ffef 	bl	800421c <HAL_RCC_GetHCLKFreq>
 800423e:	4601      	mov	r1, r0
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004248:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800424c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	fa92 f2a2 	rbit	r2, r2
 8004254:	603a      	str	r2, [r7, #0]
  return result;
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	fab2 f282 	clz	r2, r2
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	40d3      	lsrs	r3, r2
 8004260:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004262:	5cd3      	ldrb	r3, [r2, r3]
 8004264:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40021000 	.word	0x40021000
 8004274:	08008960 	.word	0x08008960

08004278 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800427e:	f7ff ffcd 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8004282:	4601      	mov	r1, r0
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800428c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004290:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	fa92 f2a2 	rbit	r2, r2
 8004298:	603a      	str	r2, [r7, #0]
  return result;
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	fab2 f282 	clz	r2, r2
 80042a0:	b2d2      	uxtb	r2, r2
 80042a2:	40d3      	lsrs	r3, r2
 80042a4:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80042a6:	5cd3      	ldrb	r3, [r2, r3]
 80042a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80042ac:	4618      	mov	r0, r3
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	40021000 	.word	0x40021000
 80042b8:	08008960 	.word	0x08008960

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b092      	sub	sp, #72	; 0x48
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 80d7 	beq.w	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80042da:	2300      	movs	r3, #0
 80042dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e0:	4b4e      	ldr	r3, [pc, #312]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10e      	bne.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042ec:	4b4b      	ldr	r3, [pc, #300]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4a4a      	ldr	r2, [pc, #296]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042f6:	61d3      	str	r3, [r2, #28]
 80042f8:	4b48      	ldr	r3, [pc, #288]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004300:	60bb      	str	r3, [r7, #8]
 8004302:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004304:	2301      	movs	r3, #1
 8004306:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430a:	4b45      	ldr	r3, [pc, #276]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	2b00      	cmp	r3, #0
 8004314:	d118      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004316:	4b42      	ldr	r3, [pc, #264]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800431c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004320:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004322:	f7fe fbb1 	bl	8002a88 <HAL_GetTick>
 8004326:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004328:	e008      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432a:	f7fe fbad 	bl	8002a88 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b64      	cmp	r3, #100	; 0x64
 8004336:	d901      	bls.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1d6      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433c:	4b38      	ldr	r3, [pc, #224]	; (8004420 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004348:	4b34      	ldr	r3, [pc, #208]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004350:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8084 	beq.w	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004362:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004364:	429a      	cmp	r2, r3
 8004366:	d07c      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004368:	4b2c      	ldr	r3, [pc, #176]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800436a:	6a1b      	ldr	r3, [r3, #32]
 800436c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004372:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	fa93 f3a3 	rbit	r3, r3
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004382:	fab3 f383 	clz	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	461a      	mov	r2, r3
 800438a:	4b26      	ldr	r3, [pc, #152]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	461a      	mov	r2, r3
 8004392:	2301      	movs	r3, #1
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800439a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	fa93 f3a3 	rbit	r3, r3
 80043a2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a6:	fab3 f383 	clz	r3, r3
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	4b1d      	ldr	r3, [pc, #116]	; (8004424 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	461a      	mov	r2, r3
 80043b6:	2300      	movs	r3, #0
 80043b8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043ba:	4a18      	ldr	r2, [pc, #96]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80043bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043be:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d04b      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ca:	f7fe fb5d 	bl	8002a88 <HAL_GetTick>
 80043ce:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d0:	e00a      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d2:	f7fe fb59 	bl	8002a88 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d901      	bls.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e180      	b.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80043e8:	2302      	movs	r3, #2
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ee:	fa93 f3a3 	rbit	r3, r3
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
 80043f4:	2302      	movs	r3, #2
 80043f6:	623b      	str	r3, [r7, #32]
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	fa93 f3a3 	rbit	r3, r3
 80043fe:	61fb      	str	r3, [r7, #28]
  return result;
 8004400:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	fab3 f383 	clz	r3, r3
 8004406:	b2db      	uxtb	r3, r3
 8004408:	095b      	lsrs	r3, r3, #5
 800440a:	b2db      	uxtb	r3, r3
 800440c:	f043 0302 	orr.w	r3, r3, #2
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d108      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004416:	4b01      	ldr	r3, [pc, #4]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	e00d      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800441c:	40021000 	.word	0x40021000
 8004420:	40007000 	.word	0x40007000
 8004424:	10908100 	.word	0x10908100
 8004428:	2302      	movs	r3, #2
 800442a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	fa93 f3a3 	rbit	r3, r3
 8004432:	617b      	str	r3, [r7, #20]
 8004434:	4ba0      	ldr	r3, [pc, #640]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004438:	2202      	movs	r2, #2
 800443a:	613a      	str	r2, [r7, #16]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	fa92 f2a2 	rbit	r2, r2
 8004442:	60fa      	str	r2, [r7, #12]
  return result;
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	fab2 f282 	clz	r2, r2
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	f002 021f 	and.w	r2, r2, #31
 8004456:	2101      	movs	r1, #1
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	4013      	ands	r3, r2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0b7      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004462:	4b95      	ldr	r3, [pc, #596]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	4992      	ldr	r1, [pc, #584]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004474:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004478:	2b01      	cmp	r3, #1
 800447a:	d105      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800447c:	4b8e      	ldr	r3, [pc, #568]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	4a8d      	ldr	r2, [pc, #564]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004482:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004486:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0301 	and.w	r3, r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	d008      	beq.n	80044a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004494:	4b88      	ldr	r3, [pc, #544]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	f023 0203 	bic.w	r2, r3, #3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	4985      	ldr	r1, [pc, #532]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d008      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044b2:	4b81      	ldr	r3, [pc, #516]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	497e      	ldr	r1, [pc, #504]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0304 	and.w	r3, r3, #4
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d008      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	4976      	ldr	r1, [pc, #472]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0320 	and.w	r3, r3, #32
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d008      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044ee:	4b72      	ldr	r3, [pc, #456]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f023 0210 	bic.w	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	69db      	ldr	r3, [r3, #28]
 80044fa:	496f      	ldr	r1, [pc, #444]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d008      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800450c:	4b6a      	ldr	r3, [pc, #424]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	4967      	ldr	r1, [pc, #412]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800452a:	4b63      	ldr	r3, [pc, #396]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f023 0220 	bic.w	r2, r3, #32
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	4960      	ldr	r1, [pc, #384]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004548:	4b5b      	ldr	r3, [pc, #364]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800454a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	4958      	ldr	r1, [pc, #352]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004556:	4313      	orrs	r3, r2
 8004558:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0308 	and.w	r3, r3, #8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004566:	4b54      	ldr	r3, [pc, #336]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800456a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4951      	ldr	r1, [pc, #324]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004584:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4949      	ldr	r1, [pc, #292]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d008      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80045a2:	4b45      	ldr	r3, [pc, #276]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	4942      	ldr	r1, [pc, #264]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045c0:	4b3d      	ldr	r3, [pc, #244]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	493a      	ldr	r1, [pc, #232]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d008      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80045de:	4b36      	ldr	r3, [pc, #216]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	4933      	ldr	r1, [pc, #204]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d008      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80045fc:	4b2e      	ldr	r3, [pc, #184]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004608:	492b      	ldr	r1, [pc, #172]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800461a:	4b27      	ldr	r3, [pc, #156]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800461c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4924      	ldr	r1, [pc, #144]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004628:	4313      	orrs	r3, r2
 800462a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004638:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004644:	491c      	ldr	r1, [pc, #112]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004646:	4313      	orrs	r3, r2
 8004648:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d008      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004656:	4b18      	ldr	r3, [pc, #96]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	4915      	ldr	r1, [pc, #84]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004664:	4313      	orrs	r3, r2
 8004666:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004674:	4b10      	ldr	r3, [pc, #64]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004678:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004680:	490d      	ldr	r1, [pc, #52]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004682:	4313      	orrs	r3, r2
 8004684:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d008      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800469e:	4906      	ldr	r1, [pc, #24]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00c      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80046b0:	4b01      	ldr	r3, [pc, #4]	; (80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80046b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046b4:	e002      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80046b6:	bf00      	nop
 80046b8:	40021000 	.word	0x40021000
 80046bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046c4:	490b      	ldr	r1, [pc, #44]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046e2:	4904      	ldr	r1, [pc, #16]	; (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3748      	adds	r7, #72	; 0x48
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	40021000 	.word	0x40021000

080046f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e084      	b.n	8004814 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fe f819 	bl	800275c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004740:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800474a:	d902      	bls.n	8004752 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
 8004750:	e002      	b.n	8004758 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004756:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004760:	d007      	beq.n	8004772 <HAL_SPI_Init+0x7a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800476a:	d002      	beq.n	8004772 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10b      	bne.n	8004792 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004782:	d903      	bls.n	800478c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	631a      	str	r2, [r3, #48]	; 0x30
 800478a:	e002      	b.n	8004792 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	695b      	ldr	r3, [r3, #20]
 80047a6:	431a      	orrs	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a1b      	ldr	r3, [r3, #32]
 80047bc:	ea42 0103 	orr.w	r1, r2, r3
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0204 	and.w	r2, r3, #4
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	ea42 0103 	orr.w	r1, r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	430a      	orrs	r2, r1
 80047f2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004802:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	3710      	adds	r7, #16
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	4613      	mov	r3, r2
 800482a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_SPI_Transmit+0x22>
 800483a:	2302      	movs	r3, #2
 800483c:	e150      	b.n	8004ae0 <HAL_SPI_Transmit+0x2c4>
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004846:	f7fe f91f 	bl	8002a88 <HAL_GetTick>
 800484a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d002      	beq.n	8004862 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800485c:	2302      	movs	r3, #2
 800485e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004860:	e135      	b.n	8004ace <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d002      	beq.n	800486e <HAL_SPI_Transmit+0x52>
 8004868:	88fb      	ldrh	r3, [r7, #6]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d102      	bne.n	8004874 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004872:	e12c      	b.n	8004ace <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2203      	movs	r2, #3
 8004878:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	88fa      	ldrh	r2, [r7, #6]
 800488c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	88fa      	ldrh	r2, [r7, #6]
 8004892:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048be:	d107      	bne.n	80048d0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048ce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048da:	2b40      	cmp	r3, #64	; 0x40
 80048dc:	d007      	beq.n	80048ee <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80048f6:	d94b      	bls.n	8004990 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_SPI_Transmit+0xea>
 8004900:	8afb      	ldrh	r3, [r7, #22]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d13e      	bne.n	8004984 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490a:	881a      	ldrh	r2, [r3, #0]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	1c9a      	adds	r2, r3, #2
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800492a:	e02b      	b.n	8004984 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d112      	bne.n	8004960 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493e:	881a      	ldrh	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004954:	b29b      	uxth	r3, r3
 8004956:	3b01      	subs	r3, #1
 8004958:	b29a      	uxth	r2, r3
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800495e:	e011      	b.n	8004984 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004960:	f7fe f892 	bl	8002a88 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d803      	bhi.n	8004978 <HAL_SPI_Transmit+0x15c>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d102      	bne.n	800497e <HAL_SPI_Transmit+0x162>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d102      	bne.n	8004984 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004982:	e0a4      	b.n	8004ace <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004988:	b29b      	uxth	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1ce      	bne.n	800492c <HAL_SPI_Transmit+0x110>
 800498e:	e07c      	b.n	8004a8a <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d002      	beq.n	800499e <HAL_SPI_Transmit+0x182>
 8004998:	8afb      	ldrh	r3, [r7, #22]
 800499a:	2b01      	cmp	r3, #1
 800499c:	d170      	bne.n	8004a80 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d912      	bls.n	80049ce <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ac:	881a      	ldrh	r2, [r3, #0]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b8:	1c9a      	adds	r2, r3, #2
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	3b02      	subs	r3, #2
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80049cc:	e058      	b.n	8004a80 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	7812      	ldrb	r2, [r2, #0]
 80049da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	1c5a      	adds	r2, r3, #1
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	3b01      	subs	r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80049f4:	e044      	b.n	8004a80 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d12b      	bne.n	8004a5c <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d912      	bls.n	8004a34 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a12:	881a      	ldrh	r2, [r3, #0]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1e:	1c9a      	adds	r2, r3, #2
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b02      	subs	r3, #2
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a32:	e025      	b.n	8004a80 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	7812      	ldrb	r2, [r2, #0]
 8004a40:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	3b01      	subs	r3, #1
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a5a:	e011      	b.n	8004a80 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a5c:	f7fe f814 	bl	8002a88 <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d803      	bhi.n	8004a74 <HAL_SPI_Transmit+0x258>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a72:	d102      	bne.n	8004a7a <HAL_SPI_Transmit+0x25e>
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d102      	bne.n	8004a80 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a7e:	e026      	b.n	8004ace <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1b5      	bne.n	80049f6 <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a8a:	69ba      	ldr	r2, [r7, #24]
 8004a8c:	6839      	ldr	r1, [r7, #0]
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 fc94 	bl	80053bc <SPI_EndRxTxTransaction>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d002      	beq.n	8004aa0 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	613b      	str	r3, [r7, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	77fb      	strb	r3, [r7, #31]
 8004aca:	e000      	b.n	8004ace <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004acc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004ade:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3720      	adds	r7, #32
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	4613      	mov	r3, r2
 8004af6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004af8:	2300      	movs	r3, #0
 8004afa:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b04:	d112      	bne.n	8004b2c <HAL_SPI_Receive+0x44>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10e      	bne.n	8004b2c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2204      	movs	r2, #4
 8004b12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	68ba      	ldr	r2, [r7, #8]
 8004b20:	68b9      	ldr	r1, [r7, #8]
 8004b22:	68f8      	ldr	r0, [r7, #12]
 8004b24:	f000 f908 	bl	8004d38 <HAL_SPI_TransmitReceive>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	e101      	b.n	8004d30 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_SPI_Receive+0x52>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e0fa      	b.n	8004d30 <HAL_SPI_Receive+0x248>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b42:	f7fd ffa1 	bl	8002a88 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d002      	beq.n	8004b5a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004b54:	2302      	movs	r3, #2
 8004b56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b58:	e0e1      	b.n	8004d1e <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_SPI_Receive+0x7e>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d102      	bne.n	8004b6c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004b6a:	e0d8      	b.n	8004d1e <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2204      	movs	r2, #4
 8004b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	88fa      	ldrh	r2, [r7, #6]
 8004b8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bb6:	d908      	bls.n	8004bca <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004bc6:	605a      	str	r2, [r3, #4]
 8004bc8:	e007      	b.n	8004bda <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685a      	ldr	r2, [r3, #4]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004bd8:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004be2:	d107      	bne.n	8004bf4 <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfe:	2b40      	cmp	r3, #64	; 0x40
 8004c00:	d007      	beq.n	8004c12 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1a:	d867      	bhi.n	8004cec <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004c1c:	e030      	b.n	8004c80 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d117      	bne.n	8004c5c <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f103 020c 	add.w	r2, r3, #12
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	7812      	ldrb	r2, [r2, #0]
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004c5a:	e011      	b.n	8004c80 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c5c:	f7fd ff14 	bl	8002a88 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	683a      	ldr	r2, [r7, #0]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d803      	bhi.n	8004c74 <HAL_SPI_Receive+0x18c>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c72:	d102      	bne.n	8004c7a <HAL_SPI_Receive+0x192>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d102      	bne.n	8004c80 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c7e:	e04e      	b.n	8004d1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d1c8      	bne.n	8004c1e <HAL_SPI_Receive+0x136>
 8004c8c:	e034      	b.n	8004cf8 <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f003 0301 	and.w	r3, r3, #1
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d115      	bne.n	8004cc8 <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68da      	ldr	r2, [r3, #12]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	b292      	uxth	r2, r2
 8004ca8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	1c9a      	adds	r2, r3, #2
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004cc6:	e011      	b.n	8004cec <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cc8:	f7fd fede 	bl	8002a88 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d803      	bhi.n	8004ce0 <HAL_SPI_Receive+0x1f8>
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cde:	d102      	bne.n	8004ce6 <HAL_SPI_Receive+0x1fe>
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004cea:	e018      	b.n	8004d1e <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d1ca      	bne.n	8004c8e <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	6839      	ldr	r1, [r7, #0]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 fb05 	bl	800530c <SPI_EndRxTransaction>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d002      	beq.n	8004d0e <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d002      	beq.n	8004d1c <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	75fb      	strb	r3, [r7, #23]
 8004d1a:	e000      	b.n	8004d1e <HAL_SPI_Receive+0x236>
  }

error :
 8004d1c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08a      	sub	sp, #40	; 0x28
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004d46:	2301      	movs	r3, #1
 8004d48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d101      	bne.n	8004d5e <HAL_SPI_TransmitReceive+0x26>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e1fb      	b.n	8005156 <HAL_SPI_TransmitReceive+0x41e>
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004d66:	f7fd fe8f 	bl	8002a88 <HAL_GetTick>
 8004d6a:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d72:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004d7a:	887b      	ldrh	r3, [r7, #2]
 8004d7c:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004d7e:	887b      	ldrh	r3, [r7, #2]
 8004d80:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004d82:	7efb      	ldrb	r3, [r7, #27]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d00e      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x6e>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d8e:	d106      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d102      	bne.n	8004d9e <HAL_SPI_TransmitReceive+0x66>
 8004d98:	7efb      	ldrb	r3, [r7, #27]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
 8004da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004da4:	e1cd      	b.n	8005142 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d002      	beq.n	8004db8 <HAL_SPI_TransmitReceive+0x80>
 8004db2:	887b      	ldrh	r3, [r7, #2]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d103      	bne.n	8004dc0 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8004dbe:	e1c0      	b.n	8005142 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d003      	beq.n	8004dd4 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2205      	movs	r2, #5
 8004dd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	887a      	ldrh	r2, [r7, #2]
 8004de4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	887a      	ldrh	r2, [r7, #2]
 8004dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	887a      	ldrh	r2, [r7, #2]
 8004dfa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	887a      	ldrh	r2, [r7, #2]
 8004e00:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e16:	d802      	bhi.n	8004e1e <HAL_SPI_TransmitReceive+0xe6>
 8004e18:	8a3b      	ldrh	r3, [r7, #16]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d908      	bls.n	8004e30 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e2c:	605a      	str	r2, [r3, #4]
 8004e2e:	e007      	b.n	8004e40 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e3e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4a:	2b40      	cmp	r3, #64	; 0x40
 8004e4c:	d007      	beq.n	8004e5e <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e66:	d97c      	bls.n	8004f62 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d002      	beq.n	8004e76 <HAL_SPI_TransmitReceive+0x13e>
 8004e70:	8a7b      	ldrh	r3, [r7, #18]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d169      	bne.n	8004f4a <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7a:	881a      	ldrh	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e86:	1c9a      	adds	r2, r3, #2
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e90:	b29b      	uxth	r3, r3
 8004e92:	3b01      	subs	r3, #1
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e9a:	e056      	b.n	8004f4a <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 0302 	and.w	r3, r3, #2
 8004ea6:	2b02      	cmp	r3, #2
 8004ea8:	d11b      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x1aa>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d016      	beq.n	8004ee2 <HAL_SPI_TransmitReceive+0x1aa>
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d113      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebe:	881a      	ldrh	r2, [r3, #0]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eca:	1c9a      	adds	r2, r3, #2
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	b29a      	uxth	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d11c      	bne.n	8004f2a <HAL_SPI_TransmitReceive+0x1f2>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d016      	beq.n	8004f2a <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	b292      	uxth	r2, r2
 8004f08:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	1c9a      	adds	r2, r3, #2
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	b29a      	uxth	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f26:	2301      	movs	r3, #1
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004f2a:	f7fd fdad 	bl	8002a88 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d807      	bhi.n	8004f4a <HAL_SPI_TransmitReceive+0x212>
 8004f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d003      	beq.n	8004f4a <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8004f42:	2303      	movs	r3, #3
 8004f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004f48:	e0fb      	b.n	8005142 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f4e:	b29b      	uxth	r3, r3
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1a3      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x164>
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d19d      	bne.n	8004e9c <HAL_SPI_TransmitReceive+0x164>
 8004f60:	e0df      	b.n	8005122 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d003      	beq.n	8004f72 <HAL_SPI_TransmitReceive+0x23a>
 8004f6a:	8a7b      	ldrh	r3, [r7, #18]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	f040 80cb 	bne.w	8005108 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d912      	bls.n	8004fa2 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f80:	881a      	ldrh	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8c:	1c9a      	adds	r2, r3, #2
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f96:	b29b      	uxth	r3, r3
 8004f98:	3b02      	subs	r3, #2
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004fa0:	e0b2      	b.n	8005108 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	7812      	ldrb	r2, [r2, #0]
 8004fae:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	3b01      	subs	r3, #1
 8004fc2:	b29a      	uxth	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004fc8:	e09e      	b.n	8005108 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0302 	and.w	r3, r3, #2
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d134      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x30a>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fdc:	b29b      	uxth	r3, r3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d02f      	beq.n	8005042 <HAL_SPI_TransmitReceive+0x30a>
 8004fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d12c      	bne.n	8005042 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d912      	bls.n	8005018 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ff6:	881a      	ldrh	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005002:	1c9a      	adds	r2, r3, #2
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b02      	subs	r3, #2
 8005010:	b29a      	uxth	r2, r3
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005016:	e012      	b.n	800503e <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	7812      	ldrb	r2, [r2, #0]
 8005024:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	1c5a      	adds	r2, r3, #1
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005034:	b29b      	uxth	r3, r3
 8005036:	3b01      	subs	r3, #1
 8005038:	b29a      	uxth	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800503e:	2300      	movs	r3, #0
 8005040:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d148      	bne.n	80050e2 <HAL_SPI_TransmitReceive+0x3aa>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005056:	b29b      	uxth	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d042      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b01      	cmp	r3, #1
 8005066:	d923      	bls.n	80050b0 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005072:	b292      	uxth	r2, r2
 8005074:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	1c9a      	adds	r2, r3, #2
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005086:	b29b      	uxth	r3, r3
 8005088:	3b02      	subs	r3, #2
 800508a:	b29a      	uxth	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005098:	b29b      	uxth	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	d81f      	bhi.n	80050de <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	e016      	b.n	80050de <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f103 020c 	add.w	r2, r3, #12
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	7812      	ldrb	r2, [r2, #0]
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050d2:	b29b      	uxth	r3, r3
 80050d4:	3b01      	subs	r3, #1
 80050d6:	b29a      	uxth	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80050de:	2301      	movs	r3, #1
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80050e2:	f7fd fcd1 	bl	8002a88 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	69fb      	ldr	r3, [r7, #28]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d803      	bhi.n	80050fa <HAL_SPI_TransmitReceive+0x3c2>
 80050f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d102      	bne.n	8005100 <HAL_SPI_TransmitReceive+0x3c8>
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d103      	bne.n	8005108 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005106:	e01c      	b.n	8005142 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	f47f af5b 	bne.w	8004fca <HAL_SPI_TransmitReceive+0x292>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800511a:	b29b      	uxth	r3, r3
 800511c:	2b00      	cmp	r3, #0
 800511e:	f47f af54 	bne.w	8004fca <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005126:	68f8      	ldr	r0, [r7, #12]
 8005128:	f000 f948 	bl	80053bc <SPI_EndRxTxTransaction>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d006      	beq.n	8005140 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2220      	movs	r2, #32
 800513c:	661a      	str	r2, [r3, #96]	; 0x60
 800513e:	e000      	b.n	8005142 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8005140:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005156:	4618      	mov	r0, r3
 8005158:	3728      	adds	r7, #40	; 0x28
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}

0800515e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	60f8      	str	r0, [r7, #12]
 8005166:	60b9      	str	r1, [r7, #8]
 8005168:	603b      	str	r3, [r7, #0]
 800516a:	4613      	mov	r3, r2
 800516c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800516e:	e04c      	b.n	800520a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005176:	d048      	beq.n	800520a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005178:	f7fd fc86 	bl	8002a88 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d902      	bls.n	800518e <SPI_WaitFlagStateUntilTimeout+0x30>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d13d      	bne.n	800520a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800519c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051a6:	d111      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x6e>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b0:	d004      	beq.n	80051bc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ba:	d107      	bne.n	80051cc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051d4:	d10f      	bne.n	80051f6 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2201      	movs	r2, #1
 80051fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2200      	movs	r2, #0
 8005202:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e00f      	b.n	800522a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	689a      	ldr	r2, [r3, #8]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	4013      	ands	r3, r2
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	429a      	cmp	r2, r3
 8005218:	bf0c      	ite	eq
 800521a:	2301      	moveq	r3, #1
 800521c:	2300      	movne	r3, #0
 800521e:	b2db      	uxtb	r3, r3
 8005220:	461a      	mov	r2, r3
 8005222:	79fb      	ldrb	r3, [r7, #7]
 8005224:	429a      	cmp	r2, r3
 8005226:	d1a3      	bne.n	8005170 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b084      	sub	sp, #16
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8005240:	e057      	b.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005248:	d106      	bne.n	8005258 <SPI_WaitFifoStateUntilTimeout+0x26>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d103      	bne.n	8005258 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	330c      	adds	r3, #12
 8005256:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d048      	beq.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005260:	f7fd fc12 	bl	8002a88 <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	683a      	ldr	r2, [r7, #0]
 800526c:	429a      	cmp	r2, r3
 800526e:	d902      	bls.n	8005276 <SPI_WaitFifoStateUntilTimeout+0x44>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d13d      	bne.n	80052f2 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528e:	d111      	bne.n	80052b4 <SPI_WaitFifoStateUntilTimeout+0x82>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005298:	d004      	beq.n	80052a4 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d107      	bne.n	80052b4 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052bc:	d10f      	bne.n	80052de <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052cc:	601a      	str	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e008      	b.n	8005304 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689a      	ldr	r2, [r3, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	4013      	ands	r3, r2
 80052fc:	687a      	ldr	r2, [r7, #4]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d19f      	bne.n	8005242 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b086      	sub	sp, #24
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005320:	d111      	bne.n	8005346 <SPI_EndRxTransaction+0x3a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800532a:	d004      	beq.n	8005336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005334:	d107      	bne.n	8005346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005344:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2200      	movs	r2, #0
 800534e:	2180      	movs	r1, #128	; 0x80
 8005350:	68f8      	ldr	r0, [r7, #12]
 8005352:	f7ff ff04 	bl	800515e <SPI_WaitFlagStateUntilTimeout>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005360:	f043 0220 	orr.w	r2, r3, #32
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e023      	b.n	80053b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005374:	d11d      	bne.n	80053b2 <SPI_EndRxTransaction+0xa6>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537e:	d004      	beq.n	800538a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005388:	d113      	bne.n	80053b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	9300      	str	r3, [sp, #0]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2200      	movs	r2, #0
 8005392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005396:	68f8      	ldr	r0, [r7, #12]
 8005398:	f7ff ff4b 	bl	8005232 <SPI_WaitFifoStateUntilTimeout>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d007      	beq.n	80053b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053a6:	f043 0220 	orr.w	r2, r3, #32
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e000      	b.n	80053b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80053b2:	2300      	movs	r3, #0
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80053d4:	68f8      	ldr	r0, [r7, #12]
 80053d6:	f7ff ff2c 	bl	8005232 <SPI_WaitFifoStateUntilTimeout>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d007      	beq.n	80053f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e4:	f043 0220 	orr.w	r2, r3, #32
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e027      	b.n	8005440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2200      	movs	r2, #0
 80053f8:	2180      	movs	r1, #128	; 0x80
 80053fa:	68f8      	ldr	r0, [r7, #12]
 80053fc:	f7ff feaf 	bl	800515e <SPI_WaitFlagStateUntilTimeout>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540a:	f043 0220 	orr.w	r2, r3, #32
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e014      	b.n	8005440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	9300      	str	r3, [sp, #0]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2200      	movs	r2, #0
 800541e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f7ff ff05 	bl	8005232 <SPI_WaitFifoStateUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005432:	f043 0220 	orr.w	r2, r3, #32
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e000      	b.n	8005440 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800543e:	2300      	movs	r3, #0
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e01d      	b.n	8005496 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fd f9b6 	bl	80027e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2202      	movs	r2, #2
 8005478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	3304      	adds	r3, #4
 8005484:	4619      	mov	r1, r3
 8005486:	4610      	mov	r0, r2
 8005488:	f000 f8c2 	bl	8005610 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005494:	2300      	movs	r3, #0
}
 8005496:	4618      	mov	r0, r3
 8005498:	3708      	adds	r7, #8
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}

0800549e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	b084      	sub	sp, #16
 80054a2:	af00      	add	r7, sp, #0
 80054a4:	6078      	str	r0, [r7, #4]
 80054a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	d101      	bne.n	80054b6 <HAL_TIM_ConfigClockSource+0x18>
 80054b2:	2302      	movs	r3, #2
 80054b4:	e0a8      	b.n	8005608 <HAL_TIM_ConfigClockSource+0x16a>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2202      	movs	r2, #2
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054d4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054d8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054e0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2b40      	cmp	r3, #64	; 0x40
 80054f0:	d067      	beq.n	80055c2 <HAL_TIM_ConfigClockSource+0x124>
 80054f2:	2b40      	cmp	r3, #64	; 0x40
 80054f4:	d80b      	bhi.n	800550e <HAL_TIM_ConfigClockSource+0x70>
 80054f6:	2b10      	cmp	r3, #16
 80054f8:	d073      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x144>
 80054fa:	2b10      	cmp	r3, #16
 80054fc:	d802      	bhi.n	8005504 <HAL_TIM_ConfigClockSource+0x66>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d06f      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005502:	e078      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005504:	2b20      	cmp	r3, #32
 8005506:	d06c      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x144>
 8005508:	2b30      	cmp	r3, #48	; 0x30
 800550a:	d06a      	beq.n	80055e2 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800550c:	e073      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800550e:	2b70      	cmp	r3, #112	; 0x70
 8005510:	d00d      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x90>
 8005512:	2b70      	cmp	r3, #112	; 0x70
 8005514:	d804      	bhi.n	8005520 <HAL_TIM_ConfigClockSource+0x82>
 8005516:	2b50      	cmp	r3, #80	; 0x50
 8005518:	d033      	beq.n	8005582 <HAL_TIM_ConfigClockSource+0xe4>
 800551a:	2b60      	cmp	r3, #96	; 0x60
 800551c:	d041      	beq.n	80055a2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800551e:	e06a      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8005520:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005524:	d066      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x156>
 8005526:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800552a:	d017      	beq.n	800555c <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800552c:	e063      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6899      	ldr	r1, [r3, #8]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	685a      	ldr	r2, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f000 f97f 	bl	8005840 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005550:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	609a      	str	r2, [r3, #8]
      break;
 800555a:	e04c      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6899      	ldr	r1, [r3, #8]
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685a      	ldr	r2, [r3, #4]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f000 f968 	bl	8005840 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800557e:	609a      	str	r2, [r3, #8]
      break;
 8005580:	e039      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6818      	ldr	r0, [r3, #0]
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	6859      	ldr	r1, [r3, #4]
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	461a      	mov	r2, r3
 8005590:	f000 f8dc 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2150      	movs	r1, #80	; 0x50
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f935 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055a0:	e029      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6818      	ldr	r0, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	6859      	ldr	r1, [r3, #4]
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	68db      	ldr	r3, [r3, #12]
 80055ae:	461a      	mov	r2, r3
 80055b0:	f000 f8fb 	bl	80057aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2160      	movs	r1, #96	; 0x60
 80055ba:	4618      	mov	r0, r3
 80055bc:	f000 f925 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055c0:	e019      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	6859      	ldr	r1, [r3, #4]
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	461a      	mov	r2, r3
 80055d0:	f000 f8bc 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	2140      	movs	r1, #64	; 0x40
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 f915 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055e0:	e009      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681a      	ldr	r2, [r3, #0]
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4619      	mov	r1, r3
 80055ec:	4610      	mov	r0, r2
 80055ee:	f000 f90c 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 80055f2:	e000      	b.n	80055f6 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80055f4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3710      	adds	r7, #16
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}

08005610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005610:	b480      	push	{r7}
 8005612:	b085      	sub	sp, #20
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a42      	ldr	r2, [pc, #264]	; (800572c <TIM_Base_SetConfig+0x11c>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d013      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800562e:	d00f      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a3f      	ldr	r2, [pc, #252]	; (8005730 <TIM_Base_SetConfig+0x120>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00b      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a3e      	ldr	r2, [pc, #248]	; (8005734 <TIM_Base_SetConfig+0x124>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d007      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a3d      	ldr	r2, [pc, #244]	; (8005738 <TIM_Base_SetConfig+0x128>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d003      	beq.n	8005650 <TIM_Base_SetConfig+0x40>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a3c      	ldr	r2, [pc, #240]	; (800573c <TIM_Base_SetConfig+0x12c>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d108      	bne.n	8005662 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005656:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a31      	ldr	r2, [pc, #196]	; (800572c <TIM_Base_SetConfig+0x11c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01f      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2e      	ldr	r2, [pc, #184]	; (8005730 <TIM_Base_SetConfig+0x120>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2d      	ldr	r2, [pc, #180]	; (8005734 <TIM_Base_SetConfig+0x124>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2c      	ldr	r2, [pc, #176]	; (8005738 <TIM_Base_SetConfig+0x128>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <TIM_Base_SetConfig+0x130>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <TIM_Base_SetConfig+0x134>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <TIM_Base_SetConfig+0x138>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a25      	ldr	r2, [pc, #148]	; (800573c <TIM_Base_SetConfig+0x12c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a12      	ldr	r2, [pc, #72]	; (800572c <TIM_Base_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d013      	beq.n	8005710 <TIM_Base_SetConfig+0x100>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a13      	ldr	r2, [pc, #76]	; (8005738 <TIM_Base_SetConfig+0x128>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00f      	beq.n	8005710 <TIM_Base_SetConfig+0x100>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a13      	ldr	r2, [pc, #76]	; (8005740 <TIM_Base_SetConfig+0x130>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d00b      	beq.n	8005710 <TIM_Base_SetConfig+0x100>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a12      	ldr	r2, [pc, #72]	; (8005744 <TIM_Base_SetConfig+0x134>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d007      	beq.n	8005710 <TIM_Base_SetConfig+0x100>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4a11      	ldr	r2, [pc, #68]	; (8005748 <TIM_Base_SetConfig+0x138>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d003      	beq.n	8005710 <TIM_Base_SetConfig+0x100>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a0c      	ldr	r2, [pc, #48]	; (800573c <TIM_Base_SetConfig+0x12c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d103      	bne.n	8005718 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	615a      	str	r2, [r3, #20]
}
 800571e:	bf00      	nop
 8005720:	3714      	adds	r7, #20
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
 800572a:	bf00      	nop
 800572c:	40012c00 	.word	0x40012c00
 8005730:	40000400 	.word	0x40000400
 8005734:	40000800 	.word	0x40000800
 8005738:	40013400 	.word	0x40013400
 800573c:	40015000 	.word	0x40015000
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f023 0210 	bic.w	r2, r3, #16
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	699b      	ldr	r3, [r3, #24]
 80057c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	697a      	ldr	r2, [r7, #20]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	693a      	ldr	r2, [r7, #16]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e06d      	b.n	8005974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a30      	ldr	r2, [pc, #192]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a2d      	ldr	r2, [pc, #180]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d108      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005914:	d018      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1c      	ldr	r2, [pc, #112]	; (800598c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a1a      	ldr	r2, [pc, #104]	; (8005990 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a15      	ldr	r2, [pc, #84]	; (8005984 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a16      	ldr	r2, [pc, #88]	; (8005994 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a11      	ldr	r2, [pc, #68]	; (8005988 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10c      	bne.n	8005962 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800594e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	4313      	orrs	r3, r2
 8005958:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	68ba      	ldr	r2, [r7, #8]
 8005960:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40012c00 	.word	0x40012c00
 8005984:	40013400 	.word	0x40013400
 8005988:	40015000 	.word	0x40015000
 800598c:	40000400 	.word	0x40000400
 8005990:	40000800 	.word	0x40000800
 8005994:	40014000 	.word	0x40014000

08005998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e040      	b.n	8005a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fc ff2e 	bl	800281c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	; 0x24
 80059c4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 f8c0 	bl	8005b5c <UART_SetConfig>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e022      	b.n	8005a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 face 	bl	8005f90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fb55 	bl	80060d4 <UART_CheckIdleState>
 8005a2a:	4603      	mov	r3, r0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	603b      	str	r3, [r7, #0]
 8005a40:	4613      	mov	r3, r2
 8005a42:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	f040 8081 	bne.w	8005b50 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d002      	beq.n	8005a5a <HAL_UART_Transmit+0x26>
 8005a54:	88fb      	ldrh	r3, [r7, #6]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d101      	bne.n	8005a5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	e079      	b.n	8005b52 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	d101      	bne.n	8005a6c <HAL_UART_Transmit+0x38>
 8005a68:	2302      	movs	r3, #2
 8005a6a:	e072      	b.n	8005b52 <HAL_UART_Transmit+0x11e>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2200      	movs	r2, #0
 8005a78:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2221      	movs	r2, #33	; 0x21
 8005a7e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8005a80:	f7fd f802 	bl	8002a88 <HAL_GetTick>
 8005a84:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	88fa      	ldrh	r2, [r7, #6]
 8005a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d108      	bne.n	8005ab2 <HAL_UART_Transmit+0x7e>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d104      	bne.n	8005ab2 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	61bb      	str	r3, [r7, #24]
 8005ab0:	e003      	b.n	8005aba <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aba:	e02d      	b.n	8005b18 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fb49 	bl	800615e <UART_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e03d      	b.n	8005b52 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d10b      	bne.n	8005af4 <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	881a      	ldrh	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ae8:	b292      	uxth	r2, r2
 8005aea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3302      	adds	r3, #2
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	e008      	b.n	8005b06 <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	781a      	ldrb	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	b292      	uxth	r2, r2
 8005afe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3301      	adds	r3, #1
 8005b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1cb      	bne.n	8005abc <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2140      	movs	r1, #64	; 0x40
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f000 fb15 	bl	800615e <UART_WaitOnFlagUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e009      	b.n	8005b52 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2220      	movs	r2, #32
 8005b42:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	e000      	b.n	8005b52 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005b50:	2302      	movs	r3, #2
  }
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3720      	adds	r7, #32
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005b64:	2300      	movs	r3, #0
 8005b66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b68:	2300      	movs	r3, #0
 8005b6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	691b      	ldr	r3, [r3, #16]
 8005b74:	431a      	orrs	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	4bac      	ldr	r3, [pc, #688]	; (8005e3c <UART_SetConfig+0x2e0>)
 8005b8c:	4013      	ands	r3, r2
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6812      	ldr	r2, [r2, #0]
 8005b92:	6939      	ldr	r1, [r7, #16]
 8005b94:	430b      	orrs	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	68da      	ldr	r2, [r3, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	430a      	orrs	r2, r1
 8005bac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a9a      	ldr	r2, [pc, #616]	; (8005e40 <UART_SetConfig+0x2e4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d121      	bne.n	8005c20 <UART_SetConfig+0xc4>
 8005bdc:	4b99      	ldr	r3, [pc, #612]	; (8005e44 <UART_SetConfig+0x2e8>)
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	f003 0303 	and.w	r3, r3, #3
 8005be4:	2b03      	cmp	r3, #3
 8005be6:	d817      	bhi.n	8005c18 <UART_SetConfig+0xbc>
 8005be8:	a201      	add	r2, pc, #4	; (adr r2, 8005bf0 <UART_SetConfig+0x94>)
 8005bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bee:	bf00      	nop
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c0d 	.word	0x08005c0d
 8005bf8:	08005c13 	.word	0x08005c13
 8005bfc:	08005c07 	.word	0x08005c07
 8005c00:	2301      	movs	r3, #1
 8005c02:	77fb      	strb	r3, [r7, #31]
 8005c04:	e0b2      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c06:	2302      	movs	r3, #2
 8005c08:	77fb      	strb	r3, [r7, #31]
 8005c0a:	e0af      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e0ac      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c12:	2308      	movs	r3, #8
 8005c14:	77fb      	strb	r3, [r7, #31]
 8005c16:	e0a9      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c18:	2310      	movs	r3, #16
 8005c1a:	77fb      	strb	r3, [r7, #31]
 8005c1c:	bf00      	nop
 8005c1e:	e0a5      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a88      	ldr	r2, [pc, #544]	; (8005e48 <UART_SetConfig+0x2ec>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d123      	bne.n	8005c72 <UART_SetConfig+0x116>
 8005c2a:	4b86      	ldr	r3, [pc, #536]	; (8005e44 <UART_SetConfig+0x2e8>)
 8005c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c36:	d012      	beq.n	8005c5e <UART_SetConfig+0x102>
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d802      	bhi.n	8005c44 <UART_SetConfig+0xe8>
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d007      	beq.n	8005c52 <UART_SetConfig+0xf6>
 8005c42:	e012      	b.n	8005c6a <UART_SetConfig+0x10e>
 8005c44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c48:	d00c      	beq.n	8005c64 <UART_SetConfig+0x108>
 8005c4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c4e:	d003      	beq.n	8005c58 <UART_SetConfig+0xfc>
 8005c50:	e00b      	b.n	8005c6a <UART_SetConfig+0x10e>
 8005c52:	2300      	movs	r3, #0
 8005c54:	77fb      	strb	r3, [r7, #31]
 8005c56:	e089      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c58:	2302      	movs	r3, #2
 8005c5a:	77fb      	strb	r3, [r7, #31]
 8005c5c:	e086      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c5e:	2304      	movs	r3, #4
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e083      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c64:	2308      	movs	r3, #8
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e080      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c6a:	2310      	movs	r3, #16
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	bf00      	nop
 8005c70:	e07c      	b.n	8005d6c <UART_SetConfig+0x210>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a75      	ldr	r2, [pc, #468]	; (8005e4c <UART_SetConfig+0x2f0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d123      	bne.n	8005cc4 <UART_SetConfig+0x168>
 8005c7c:	4b71      	ldr	r3, [pc, #452]	; (8005e44 <UART_SetConfig+0x2e8>)
 8005c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c80:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005c84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c88:	d012      	beq.n	8005cb0 <UART_SetConfig+0x154>
 8005c8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c8e:	d802      	bhi.n	8005c96 <UART_SetConfig+0x13a>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <UART_SetConfig+0x148>
 8005c94:	e012      	b.n	8005cbc <UART_SetConfig+0x160>
 8005c96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005c9a:	d00c      	beq.n	8005cb6 <UART_SetConfig+0x15a>
 8005c9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ca0:	d003      	beq.n	8005caa <UART_SetConfig+0x14e>
 8005ca2:	e00b      	b.n	8005cbc <UART_SetConfig+0x160>
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	77fb      	strb	r3, [r7, #31]
 8005ca8:	e060      	b.n	8005d6c <UART_SetConfig+0x210>
 8005caa:	2302      	movs	r3, #2
 8005cac:	77fb      	strb	r3, [r7, #31]
 8005cae:	e05d      	b.n	8005d6c <UART_SetConfig+0x210>
 8005cb0:	2304      	movs	r3, #4
 8005cb2:	77fb      	strb	r3, [r7, #31]
 8005cb4:	e05a      	b.n	8005d6c <UART_SetConfig+0x210>
 8005cb6:	2308      	movs	r3, #8
 8005cb8:	77fb      	strb	r3, [r7, #31]
 8005cba:	e057      	b.n	8005d6c <UART_SetConfig+0x210>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	77fb      	strb	r3, [r7, #31]
 8005cc0:	bf00      	nop
 8005cc2:	e053      	b.n	8005d6c <UART_SetConfig+0x210>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a61      	ldr	r2, [pc, #388]	; (8005e50 <UART_SetConfig+0x2f4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d123      	bne.n	8005d16 <UART_SetConfig+0x1ba>
 8005cce:	4b5d      	ldr	r3, [pc, #372]	; (8005e44 <UART_SetConfig+0x2e8>)
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005cda:	d012      	beq.n	8005d02 <UART_SetConfig+0x1a6>
 8005cdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ce0:	d802      	bhi.n	8005ce8 <UART_SetConfig+0x18c>
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d007      	beq.n	8005cf6 <UART_SetConfig+0x19a>
 8005ce6:	e012      	b.n	8005d0e <UART_SetConfig+0x1b2>
 8005ce8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cec:	d00c      	beq.n	8005d08 <UART_SetConfig+0x1ac>
 8005cee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005cf2:	d003      	beq.n	8005cfc <UART_SetConfig+0x1a0>
 8005cf4:	e00b      	b.n	8005d0e <UART_SetConfig+0x1b2>
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	77fb      	strb	r3, [r7, #31]
 8005cfa:	e037      	b.n	8005d6c <UART_SetConfig+0x210>
 8005cfc:	2302      	movs	r3, #2
 8005cfe:	77fb      	strb	r3, [r7, #31]
 8005d00:	e034      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d02:	2304      	movs	r3, #4
 8005d04:	77fb      	strb	r3, [r7, #31]
 8005d06:	e031      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	77fb      	strb	r3, [r7, #31]
 8005d0c:	e02e      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d0e:	2310      	movs	r3, #16
 8005d10:	77fb      	strb	r3, [r7, #31]
 8005d12:	bf00      	nop
 8005d14:	e02a      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a4e      	ldr	r2, [pc, #312]	; (8005e54 <UART_SetConfig+0x2f8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d123      	bne.n	8005d68 <UART_SetConfig+0x20c>
 8005d20:	4b48      	ldr	r3, [pc, #288]	; (8005e44 <UART_SetConfig+0x2e8>)
 8005d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d24:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d2c:	d012      	beq.n	8005d54 <UART_SetConfig+0x1f8>
 8005d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d32:	d802      	bhi.n	8005d3a <UART_SetConfig+0x1de>
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <UART_SetConfig+0x1ec>
 8005d38:	e012      	b.n	8005d60 <UART_SetConfig+0x204>
 8005d3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005d3e:	d00c      	beq.n	8005d5a <UART_SetConfig+0x1fe>
 8005d40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005d44:	d003      	beq.n	8005d4e <UART_SetConfig+0x1f2>
 8005d46:	e00b      	b.n	8005d60 <UART_SetConfig+0x204>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	77fb      	strb	r3, [r7, #31]
 8005d4c:	e00e      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d4e:	2302      	movs	r3, #2
 8005d50:	77fb      	strb	r3, [r7, #31]
 8005d52:	e00b      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d54:	2304      	movs	r3, #4
 8005d56:	77fb      	strb	r3, [r7, #31]
 8005d58:	e008      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d5a:	2308      	movs	r3, #8
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e005      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d60:	2310      	movs	r3, #16
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	bf00      	nop
 8005d66:	e001      	b.n	8005d6c <UART_SetConfig+0x210>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	69db      	ldr	r3, [r3, #28]
 8005d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d74:	f040 8090 	bne.w	8005e98 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8005d78:	7ffb      	ldrb	r3, [r7, #31]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d86c      	bhi.n	8005e58 <UART_SetConfig+0x2fc>
 8005d7e:	a201      	add	r2, pc, #4	; (adr r2, 8005d84 <UART_SetConfig+0x228>)
 8005d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d84:	08005da9 	.word	0x08005da9
 8005d88:	08005dc9 	.word	0x08005dc9
 8005d8c:	08005de9 	.word	0x08005de9
 8005d90:	08005e59 	.word	0x08005e59
 8005d94:	08005e05 	.word	0x08005e05
 8005d98:	08005e59 	.word	0x08005e59
 8005d9c:	08005e59 	.word	0x08005e59
 8005da0:	08005e59 	.word	0x08005e59
 8005da4:	08005e25 	.word	0x08005e25
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005da8:	f7fe fa44 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005dac:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	005a      	lsls	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	085b      	lsrs	r3, r3, #1
 8005db8:	441a      	add	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	61bb      	str	r3, [r7, #24]
        break;
 8005dc6:	e04a      	b.n	8005e5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005dc8:	f7fe fa56 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8005dcc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	005a      	lsls	r2, r3, #1
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	441a      	add	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	61bb      	str	r3, [r7, #24]
        break;
 8005de6:	e03a      	b.n	8005e5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	085b      	lsrs	r3, r3, #1
 8005dee:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8005df2:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	6852      	ldr	r2, [r2, #4]
 8005dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	61bb      	str	r3, [r7, #24]
        break;
 8005e02:	e02c      	b.n	8005e5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e04:	f7fe f9a0 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005e08:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	005a      	lsls	r2, r3, #1
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	085b      	lsrs	r3, r3, #1
 8005e14:	441a      	add	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	61bb      	str	r3, [r7, #24]
        break;
 8005e22:	e01c      	b.n	8005e5e <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	085b      	lsrs	r3, r3, #1
 8005e2a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	61bb      	str	r3, [r7, #24]
        break;
 8005e3a:	e010      	b.n	8005e5e <UART_SetConfig+0x302>
 8005e3c:	efff69f3 	.word	0xefff69f3
 8005e40:	40013800 	.word	0x40013800
 8005e44:	40021000 	.word	0x40021000
 8005e48:	40004400 	.word	0x40004400
 8005e4c:	40004800 	.word	0x40004800
 8005e50:	40004c00 	.word	0x40004c00
 8005e54:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	75fb      	strb	r3, [r7, #23]
        break;
 8005e5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e5e:	69bb      	ldr	r3, [r7, #24]
 8005e60:	2b0f      	cmp	r3, #15
 8005e62:	d916      	bls.n	8005e92 <UART_SetConfig+0x336>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e6a:	d212      	bcs.n	8005e92 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f023 030f 	bic.w	r3, r3, #15
 8005e74:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	085b      	lsrs	r3, r3, #1
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f003 0307 	and.w	r3, r3, #7
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	897b      	ldrh	r3, [r7, #10]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	897a      	ldrh	r2, [r7, #10]
 8005e8e:	60da      	str	r2, [r3, #12]
 8005e90:	e072      	b.n	8005f78 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	75fb      	strb	r3, [r7, #23]
 8005e96:	e06f      	b.n	8005f78 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8005e98:	7ffb      	ldrb	r3, [r7, #31]
 8005e9a:	2b08      	cmp	r3, #8
 8005e9c:	d85b      	bhi.n	8005f56 <UART_SetConfig+0x3fa>
 8005e9e:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <UART_SetConfig+0x348>)
 8005ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ee7 	.word	0x08005ee7
 8005eac:	08005f05 	.word	0x08005f05
 8005eb0:	08005f57 	.word	0x08005f57
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	08005f57 	.word	0x08005f57
 8005ebc:	08005f57 	.word	0x08005f57
 8005ec0:	08005f57 	.word	0x08005f57
 8005ec4:	08005f3f 	.word	0x08005f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ec8:	f7fe f9b4 	bl	8004234 <HAL_RCC_GetPCLK1Freq>
 8005ecc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	085a      	lsrs	r2, r3, #1
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	441a      	add	r2, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	61bb      	str	r3, [r7, #24]
        break;
 8005ee4:	e03a      	b.n	8005f5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ee6:	f7fe f9c7 	bl	8004278 <HAL_RCC_GetPCLK2Freq>
 8005eea:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	085a      	lsrs	r2, r3, #1
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	441a      	add	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	61bb      	str	r3, [r7, #24]
        break;
 8005f02:	e02b      	b.n	8005f5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8005f0e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6852      	ldr	r2, [r2, #4]
 8005f16:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	61bb      	str	r3, [r7, #24]
        break;
 8005f1e:	e01d      	b.n	8005f5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f20:	f7fe f912 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8005f24:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	085a      	lsrs	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	441a      	add	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	61bb      	str	r3, [r7, #24]
        break;
 8005f3c:	e00e      	b.n	8005f5c <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	085b      	lsrs	r3, r3, #1
 8005f44:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	61bb      	str	r3, [r7, #24]
        break;
 8005f54:	e002      	b.n	8005f5c <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	75fb      	strb	r3, [r7, #23]
        break;
 8005f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f5c:	69bb      	ldr	r3, [r7, #24]
 8005f5e:	2b0f      	cmp	r3, #15
 8005f60:	d908      	bls.n	8005f74 <UART_SetConfig+0x418>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f68:	d204      	bcs.n	8005f74 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	60da      	str	r2, [r3, #12]
 8005f72:	e001      	b.n	8005f78 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop

08005f90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00a      	beq.n	8005fba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbe:	f003 0302 	and.w	r3, r3, #2
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	430a      	orrs	r2, r1
 8005fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	f003 0304 	and.w	r3, r3, #4
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00a      	beq.n	8005ffe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	f003 0308 	and.w	r3, r3, #8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00a      	beq.n	8006020 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00a      	beq.n	8006042 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	430a      	orrs	r2, r1
 8006040:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00a      	beq.n	8006064 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	430a      	orrs	r2, r1
 8006062:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b00      	cmp	r3, #0
 800606e:	d01a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	430a      	orrs	r2, r1
 8006084:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800608a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800608e:	d10a      	bne.n	80060a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af02      	add	r7, sp, #8
 80060da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80060e2:	f7fc fcd1 	bl	8002a88 <HAL_GetTick>
 80060e6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b08      	cmp	r3, #8
 80060f4:	d10e      	bne.n	8006114 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 f82a 	bl	800615e <UART_WaitOnFlagUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e020      	b.n	8006156 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0304 	and.w	r3, r3, #4
 800611e:	2b04      	cmp	r3, #4
 8006120:	d10e      	bne.n	8006140 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006122:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	f000 f814 	bl	800615e <UART_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800613c:	2303      	movs	r3, #3
 800613e:	e00a      	b.n	8006156 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2220      	movs	r2, #32
 8006144:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2220      	movs	r2, #32
 800614a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2200      	movs	r2, #0
 8006150:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}

0800615e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800615e:	b580      	push	{r7, lr}
 8006160:	b084      	sub	sp, #16
 8006162:	af00      	add	r7, sp, #0
 8006164:	60f8      	str	r0, [r7, #12]
 8006166:	60b9      	str	r1, [r7, #8]
 8006168:	603b      	str	r3, [r7, #0]
 800616a:	4613      	mov	r3, r2
 800616c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800616e:	e05d      	b.n	800622c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006176:	d059      	beq.n	800622c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006178:	f7fc fc86 	bl	8002a88 <HAL_GetTick>
 800617c:	4602      	mov	r2, r0
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	429a      	cmp	r2, r3
 8006186:	d302      	bcc.n	800618e <UART_WaitOnFlagUntilTimeout+0x30>
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d11b      	bne.n	80061c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800619c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2220      	movs	r2, #32
 80061b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2220      	movs	r2, #32
 80061b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e042      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0304 	and.w	r3, r3, #4
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d02b      	beq.n	800622c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69db      	ldr	r3, [r3, #28]
 80061da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061e2:	d123      	bne.n	800622c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2220      	movs	r2, #32
 8006212:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2220      	movs	r2, #32
 8006218:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2220      	movs	r2, #32
 800621e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8006228:	2303      	movs	r3, #3
 800622a:	e00f      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	69da      	ldr	r2, [r3, #28]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	4013      	ands	r3, r2
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	429a      	cmp	r2, r3
 800623a:	bf0c      	ite	eq
 800623c:	2301      	moveq	r3, #1
 800623e:	2300      	movne	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	461a      	mov	r2, r3
 8006244:	79fb      	ldrb	r3, [r7, #7]
 8006246:	429a      	cmp	r2, r3
 8006248:	d092      	beq.n	8006170 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <__errno>:
 8006254:	4b01      	ldr	r3, [pc, #4]	; (800625c <__errno+0x8>)
 8006256:	6818      	ldr	r0, [r3, #0]
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	2000001c 	.word	0x2000001c

08006260 <__libc_init_array>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4e0d      	ldr	r6, [pc, #52]	; (8006298 <__libc_init_array+0x38>)
 8006264:	4c0d      	ldr	r4, [pc, #52]	; (800629c <__libc_init_array+0x3c>)
 8006266:	1ba4      	subs	r4, r4, r6
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	2500      	movs	r5, #0
 800626c:	42a5      	cmp	r5, r4
 800626e:	d109      	bne.n	8006284 <__libc_init_array+0x24>
 8006270:	4e0b      	ldr	r6, [pc, #44]	; (80062a0 <__libc_init_array+0x40>)
 8006272:	4c0c      	ldr	r4, [pc, #48]	; (80062a4 <__libc_init_array+0x44>)
 8006274:	f002 f85e 	bl	8008334 <_init>
 8006278:	1ba4      	subs	r4, r4, r6
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	2500      	movs	r5, #0
 800627e:	42a5      	cmp	r5, r4
 8006280:	d105      	bne.n	800628e <__libc_init_array+0x2e>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006288:	4798      	blx	r3
 800628a:	3501      	adds	r5, #1
 800628c:	e7ee      	b.n	800626c <__libc_init_array+0xc>
 800628e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006292:	4798      	blx	r3
 8006294:	3501      	adds	r5, #1
 8006296:	e7f2      	b.n	800627e <__libc_init_array+0x1e>
 8006298:	08008be8 	.word	0x08008be8
 800629c:	08008be8 	.word	0x08008be8
 80062a0:	08008be8 	.word	0x08008be8
 80062a4:	08008bec 	.word	0x08008bec

080062a8 <memcpy>:
 80062a8:	b510      	push	{r4, lr}
 80062aa:	1e43      	subs	r3, r0, #1
 80062ac:	440a      	add	r2, r1
 80062ae:	4291      	cmp	r1, r2
 80062b0:	d100      	bne.n	80062b4 <memcpy+0xc>
 80062b2:	bd10      	pop	{r4, pc}
 80062b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062bc:	e7f7      	b.n	80062ae <memcpy+0x6>

080062be <memset>:
 80062be:	4402      	add	r2, r0
 80062c0:	4603      	mov	r3, r0
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d100      	bne.n	80062c8 <memset+0xa>
 80062c6:	4770      	bx	lr
 80062c8:	f803 1b01 	strb.w	r1, [r3], #1
 80062cc:	e7f9      	b.n	80062c2 <memset+0x4>

080062ce <__cvt>:
 80062ce:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d2:	ec55 4b10 	vmov	r4, r5, d0
 80062d6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80062d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80062dc:	2d00      	cmp	r5, #0
 80062de:	460e      	mov	r6, r1
 80062e0:	4691      	mov	r9, r2
 80062e2:	4619      	mov	r1, r3
 80062e4:	bfb8      	it	lt
 80062e6:	4622      	movlt	r2, r4
 80062e8:	462b      	mov	r3, r5
 80062ea:	f027 0720 	bic.w	r7, r7, #32
 80062ee:	bfbb      	ittet	lt
 80062f0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062f4:	461d      	movlt	r5, r3
 80062f6:	2300      	movge	r3, #0
 80062f8:	232d      	movlt	r3, #45	; 0x2d
 80062fa:	bfb8      	it	lt
 80062fc:	4614      	movlt	r4, r2
 80062fe:	2f46      	cmp	r7, #70	; 0x46
 8006300:	700b      	strb	r3, [r1, #0]
 8006302:	d004      	beq.n	800630e <__cvt+0x40>
 8006304:	2f45      	cmp	r7, #69	; 0x45
 8006306:	d100      	bne.n	800630a <__cvt+0x3c>
 8006308:	3601      	adds	r6, #1
 800630a:	2102      	movs	r1, #2
 800630c:	e000      	b.n	8006310 <__cvt+0x42>
 800630e:	2103      	movs	r1, #3
 8006310:	ab03      	add	r3, sp, #12
 8006312:	9301      	str	r3, [sp, #4]
 8006314:	ab02      	add	r3, sp, #8
 8006316:	9300      	str	r3, [sp, #0]
 8006318:	4632      	mov	r2, r6
 800631a:	4653      	mov	r3, sl
 800631c:	ec45 4b10 	vmov	d0, r4, r5
 8006320:	f000 fcde 	bl	8006ce0 <_dtoa_r>
 8006324:	2f47      	cmp	r7, #71	; 0x47
 8006326:	4680      	mov	r8, r0
 8006328:	d102      	bne.n	8006330 <__cvt+0x62>
 800632a:	f019 0f01 	tst.w	r9, #1
 800632e:	d026      	beq.n	800637e <__cvt+0xb0>
 8006330:	2f46      	cmp	r7, #70	; 0x46
 8006332:	eb08 0906 	add.w	r9, r8, r6
 8006336:	d111      	bne.n	800635c <__cvt+0x8e>
 8006338:	f898 3000 	ldrb.w	r3, [r8]
 800633c:	2b30      	cmp	r3, #48	; 0x30
 800633e:	d10a      	bne.n	8006356 <__cvt+0x88>
 8006340:	2200      	movs	r2, #0
 8006342:	2300      	movs	r3, #0
 8006344:	4620      	mov	r0, r4
 8006346:	4629      	mov	r1, r5
 8006348:	f7fa fbc6 	bl	8000ad8 <__aeabi_dcmpeq>
 800634c:	b918      	cbnz	r0, 8006356 <__cvt+0x88>
 800634e:	f1c6 0601 	rsb	r6, r6, #1
 8006352:	f8ca 6000 	str.w	r6, [sl]
 8006356:	f8da 3000 	ldr.w	r3, [sl]
 800635a:	4499      	add	r9, r3
 800635c:	2200      	movs	r2, #0
 800635e:	2300      	movs	r3, #0
 8006360:	4620      	mov	r0, r4
 8006362:	4629      	mov	r1, r5
 8006364:	f7fa fbb8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006368:	b938      	cbnz	r0, 800637a <__cvt+0xac>
 800636a:	2230      	movs	r2, #48	; 0x30
 800636c:	9b03      	ldr	r3, [sp, #12]
 800636e:	454b      	cmp	r3, r9
 8006370:	d205      	bcs.n	800637e <__cvt+0xb0>
 8006372:	1c59      	adds	r1, r3, #1
 8006374:	9103      	str	r1, [sp, #12]
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e7f8      	b.n	800636c <__cvt+0x9e>
 800637a:	f8cd 900c 	str.w	r9, [sp, #12]
 800637e:	9b03      	ldr	r3, [sp, #12]
 8006380:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006382:	eba3 0308 	sub.w	r3, r3, r8
 8006386:	4640      	mov	r0, r8
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	b004      	add	sp, #16
 800638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006390 <__exponent>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	2900      	cmp	r1, #0
 8006394:	4604      	mov	r4, r0
 8006396:	bfba      	itte	lt
 8006398:	4249      	neglt	r1, r1
 800639a:	232d      	movlt	r3, #45	; 0x2d
 800639c:	232b      	movge	r3, #43	; 0x2b
 800639e:	2909      	cmp	r1, #9
 80063a0:	f804 2b02 	strb.w	r2, [r4], #2
 80063a4:	7043      	strb	r3, [r0, #1]
 80063a6:	dd20      	ble.n	80063ea <__exponent+0x5a>
 80063a8:	f10d 0307 	add.w	r3, sp, #7
 80063ac:	461f      	mov	r7, r3
 80063ae:	260a      	movs	r6, #10
 80063b0:	fb91 f5f6 	sdiv	r5, r1, r6
 80063b4:	fb06 1115 	mls	r1, r6, r5, r1
 80063b8:	3130      	adds	r1, #48	; 0x30
 80063ba:	2d09      	cmp	r5, #9
 80063bc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80063c0:	f103 32ff 	add.w	r2, r3, #4294967295
 80063c4:	4629      	mov	r1, r5
 80063c6:	dc09      	bgt.n	80063dc <__exponent+0x4c>
 80063c8:	3130      	adds	r1, #48	; 0x30
 80063ca:	3b02      	subs	r3, #2
 80063cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80063d0:	42bb      	cmp	r3, r7
 80063d2:	4622      	mov	r2, r4
 80063d4:	d304      	bcc.n	80063e0 <__exponent+0x50>
 80063d6:	1a10      	subs	r0, r2, r0
 80063d8:	b003      	add	sp, #12
 80063da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063dc:	4613      	mov	r3, r2
 80063de:	e7e7      	b.n	80063b0 <__exponent+0x20>
 80063e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e4:	f804 2b01 	strb.w	r2, [r4], #1
 80063e8:	e7f2      	b.n	80063d0 <__exponent+0x40>
 80063ea:	2330      	movs	r3, #48	; 0x30
 80063ec:	4419      	add	r1, r3
 80063ee:	7083      	strb	r3, [r0, #2]
 80063f0:	1d02      	adds	r2, r0, #4
 80063f2:	70c1      	strb	r1, [r0, #3]
 80063f4:	e7ef      	b.n	80063d6 <__exponent+0x46>
	...

080063f8 <_printf_float>:
 80063f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063fc:	b08d      	sub	sp, #52	; 0x34
 80063fe:	460c      	mov	r4, r1
 8006400:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006404:	4616      	mov	r6, r2
 8006406:	461f      	mov	r7, r3
 8006408:	4605      	mov	r5, r0
 800640a:	f001 fa21 	bl	8007850 <_localeconv_r>
 800640e:	6803      	ldr	r3, [r0, #0]
 8006410:	9304      	str	r3, [sp, #16]
 8006412:	4618      	mov	r0, r3
 8006414:	f7f9 fee4 	bl	80001e0 <strlen>
 8006418:	2300      	movs	r3, #0
 800641a:	930a      	str	r3, [sp, #40]	; 0x28
 800641c:	f8d8 3000 	ldr.w	r3, [r8]
 8006420:	9005      	str	r0, [sp, #20]
 8006422:	3307      	adds	r3, #7
 8006424:	f023 0307 	bic.w	r3, r3, #7
 8006428:	f103 0208 	add.w	r2, r3, #8
 800642c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006430:	f8d4 b000 	ldr.w	fp, [r4]
 8006434:	f8c8 2000 	str.w	r2, [r8]
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006440:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006444:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006448:	9307      	str	r3, [sp, #28]
 800644a:	f8cd 8018 	str.w	r8, [sp, #24]
 800644e:	f04f 32ff 	mov.w	r2, #4294967295
 8006452:	4ba7      	ldr	r3, [pc, #668]	; (80066f0 <_printf_float+0x2f8>)
 8006454:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006458:	f7fa fb70 	bl	8000b3c <__aeabi_dcmpun>
 800645c:	bb70      	cbnz	r0, 80064bc <_printf_float+0xc4>
 800645e:	f04f 32ff 	mov.w	r2, #4294967295
 8006462:	4ba3      	ldr	r3, [pc, #652]	; (80066f0 <_printf_float+0x2f8>)
 8006464:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006468:	f7fa fb4a 	bl	8000b00 <__aeabi_dcmple>
 800646c:	bb30      	cbnz	r0, 80064bc <_printf_float+0xc4>
 800646e:	2200      	movs	r2, #0
 8006470:	2300      	movs	r3, #0
 8006472:	4640      	mov	r0, r8
 8006474:	4649      	mov	r1, r9
 8006476:	f7fa fb39 	bl	8000aec <__aeabi_dcmplt>
 800647a:	b110      	cbz	r0, 8006482 <_printf_float+0x8a>
 800647c:	232d      	movs	r3, #45	; 0x2d
 800647e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006482:	4a9c      	ldr	r2, [pc, #624]	; (80066f4 <_printf_float+0x2fc>)
 8006484:	4b9c      	ldr	r3, [pc, #624]	; (80066f8 <_printf_float+0x300>)
 8006486:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800648a:	bf8c      	ite	hi
 800648c:	4690      	movhi	r8, r2
 800648e:	4698      	movls	r8, r3
 8006490:	2303      	movs	r3, #3
 8006492:	f02b 0204 	bic.w	r2, fp, #4
 8006496:	6123      	str	r3, [r4, #16]
 8006498:	6022      	str	r2, [r4, #0]
 800649a:	f04f 0900 	mov.w	r9, #0
 800649e:	9700      	str	r7, [sp, #0]
 80064a0:	4633      	mov	r3, r6
 80064a2:	aa0b      	add	r2, sp, #44	; 0x2c
 80064a4:	4621      	mov	r1, r4
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f9e6 	bl	8006878 <_printf_common>
 80064ac:	3001      	adds	r0, #1
 80064ae:	f040 808d 	bne.w	80065cc <_printf_float+0x1d4>
 80064b2:	f04f 30ff 	mov.w	r0, #4294967295
 80064b6:	b00d      	add	sp, #52	; 0x34
 80064b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064bc:	4642      	mov	r2, r8
 80064be:	464b      	mov	r3, r9
 80064c0:	4640      	mov	r0, r8
 80064c2:	4649      	mov	r1, r9
 80064c4:	f7fa fb3a 	bl	8000b3c <__aeabi_dcmpun>
 80064c8:	b110      	cbz	r0, 80064d0 <_printf_float+0xd8>
 80064ca:	4a8c      	ldr	r2, [pc, #560]	; (80066fc <_printf_float+0x304>)
 80064cc:	4b8c      	ldr	r3, [pc, #560]	; (8006700 <_printf_float+0x308>)
 80064ce:	e7da      	b.n	8006486 <_printf_float+0x8e>
 80064d0:	6861      	ldr	r1, [r4, #4]
 80064d2:	1c4b      	adds	r3, r1, #1
 80064d4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80064d8:	a80a      	add	r0, sp, #40	; 0x28
 80064da:	d13e      	bne.n	800655a <_printf_float+0x162>
 80064dc:	2306      	movs	r3, #6
 80064de:	6063      	str	r3, [r4, #4]
 80064e0:	2300      	movs	r3, #0
 80064e2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80064e6:	ab09      	add	r3, sp, #36	; 0x24
 80064e8:	9300      	str	r3, [sp, #0]
 80064ea:	ec49 8b10 	vmov	d0, r8, r9
 80064ee:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064f2:	6022      	str	r2, [r4, #0]
 80064f4:	f8cd a004 	str.w	sl, [sp, #4]
 80064f8:	6861      	ldr	r1, [r4, #4]
 80064fa:	4628      	mov	r0, r5
 80064fc:	f7ff fee7 	bl	80062ce <__cvt>
 8006500:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006504:	2b47      	cmp	r3, #71	; 0x47
 8006506:	4680      	mov	r8, r0
 8006508:	d109      	bne.n	800651e <_printf_float+0x126>
 800650a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800650c:	1cd8      	adds	r0, r3, #3
 800650e:	db02      	blt.n	8006516 <_printf_float+0x11e>
 8006510:	6862      	ldr	r2, [r4, #4]
 8006512:	4293      	cmp	r3, r2
 8006514:	dd47      	ble.n	80065a6 <_printf_float+0x1ae>
 8006516:	f1aa 0a02 	sub.w	sl, sl, #2
 800651a:	fa5f fa8a 	uxtb.w	sl, sl
 800651e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006522:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006524:	d824      	bhi.n	8006570 <_printf_float+0x178>
 8006526:	3901      	subs	r1, #1
 8006528:	4652      	mov	r2, sl
 800652a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800652e:	9109      	str	r1, [sp, #36]	; 0x24
 8006530:	f7ff ff2e 	bl	8006390 <__exponent>
 8006534:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006536:	1813      	adds	r3, r2, r0
 8006538:	2a01      	cmp	r2, #1
 800653a:	4681      	mov	r9, r0
 800653c:	6123      	str	r3, [r4, #16]
 800653e:	dc02      	bgt.n	8006546 <_printf_float+0x14e>
 8006540:	6822      	ldr	r2, [r4, #0]
 8006542:	07d1      	lsls	r1, r2, #31
 8006544:	d501      	bpl.n	800654a <_printf_float+0x152>
 8006546:	3301      	adds	r3, #1
 8006548:	6123      	str	r3, [r4, #16]
 800654a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0a5      	beq.n	800649e <_printf_float+0xa6>
 8006552:	232d      	movs	r3, #45	; 0x2d
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006558:	e7a1      	b.n	800649e <_printf_float+0xa6>
 800655a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800655e:	f000 8177 	beq.w	8006850 <_printf_float+0x458>
 8006562:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006566:	d1bb      	bne.n	80064e0 <_printf_float+0xe8>
 8006568:	2900      	cmp	r1, #0
 800656a:	d1b9      	bne.n	80064e0 <_printf_float+0xe8>
 800656c:	2301      	movs	r3, #1
 800656e:	e7b6      	b.n	80064de <_printf_float+0xe6>
 8006570:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006574:	d119      	bne.n	80065aa <_printf_float+0x1b2>
 8006576:	2900      	cmp	r1, #0
 8006578:	6863      	ldr	r3, [r4, #4]
 800657a:	dd0c      	ble.n	8006596 <_printf_float+0x19e>
 800657c:	6121      	str	r1, [r4, #16]
 800657e:	b913      	cbnz	r3, 8006586 <_printf_float+0x18e>
 8006580:	6822      	ldr	r2, [r4, #0]
 8006582:	07d2      	lsls	r2, r2, #31
 8006584:	d502      	bpl.n	800658c <_printf_float+0x194>
 8006586:	3301      	adds	r3, #1
 8006588:	440b      	add	r3, r1
 800658a:	6123      	str	r3, [r4, #16]
 800658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006590:	f04f 0900 	mov.w	r9, #0
 8006594:	e7d9      	b.n	800654a <_printf_float+0x152>
 8006596:	b913      	cbnz	r3, 800659e <_printf_float+0x1a6>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	07d0      	lsls	r0, r2, #31
 800659c:	d501      	bpl.n	80065a2 <_printf_float+0x1aa>
 800659e:	3302      	adds	r3, #2
 80065a0:	e7f3      	b.n	800658a <_printf_float+0x192>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e7f1      	b.n	800658a <_printf_float+0x192>
 80065a6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80065aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80065ae:	4293      	cmp	r3, r2
 80065b0:	db05      	blt.n	80065be <_printf_float+0x1c6>
 80065b2:	6822      	ldr	r2, [r4, #0]
 80065b4:	6123      	str	r3, [r4, #16]
 80065b6:	07d1      	lsls	r1, r2, #31
 80065b8:	d5e8      	bpl.n	800658c <_printf_float+0x194>
 80065ba:	3301      	adds	r3, #1
 80065bc:	e7e5      	b.n	800658a <_printf_float+0x192>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bfd4      	ite	le
 80065c2:	f1c3 0302 	rsble	r3, r3, #2
 80065c6:	2301      	movgt	r3, #1
 80065c8:	4413      	add	r3, r2
 80065ca:	e7de      	b.n	800658a <_printf_float+0x192>
 80065cc:	6823      	ldr	r3, [r4, #0]
 80065ce:	055a      	lsls	r2, r3, #21
 80065d0:	d407      	bmi.n	80065e2 <_printf_float+0x1ea>
 80065d2:	6923      	ldr	r3, [r4, #16]
 80065d4:	4642      	mov	r2, r8
 80065d6:	4631      	mov	r1, r6
 80065d8:	4628      	mov	r0, r5
 80065da:	47b8      	blx	r7
 80065dc:	3001      	adds	r0, #1
 80065de:	d12b      	bne.n	8006638 <_printf_float+0x240>
 80065e0:	e767      	b.n	80064b2 <_printf_float+0xba>
 80065e2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80065e6:	f240 80dc 	bls.w	80067a2 <_printf_float+0x3aa>
 80065ea:	2200      	movs	r2, #0
 80065ec:	2300      	movs	r3, #0
 80065ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065f2:	f7fa fa71 	bl	8000ad8 <__aeabi_dcmpeq>
 80065f6:	2800      	cmp	r0, #0
 80065f8:	d033      	beq.n	8006662 <_printf_float+0x26a>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4a41      	ldr	r2, [pc, #260]	; (8006704 <_printf_float+0x30c>)
 80065fe:	4631      	mov	r1, r6
 8006600:	4628      	mov	r0, r5
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f af54 	beq.w	80064b2 <_printf_float+0xba>
 800660a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800660e:	429a      	cmp	r2, r3
 8006610:	db02      	blt.n	8006618 <_printf_float+0x220>
 8006612:	6823      	ldr	r3, [r4, #0]
 8006614:	07d8      	lsls	r0, r3, #31
 8006616:	d50f      	bpl.n	8006638 <_printf_float+0x240>
 8006618:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f af45 	beq.w	80064b2 <_printf_float+0xba>
 8006628:	f04f 0800 	mov.w	r8, #0
 800662c:	f104 091a 	add.w	r9, r4, #26
 8006630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006632:	3b01      	subs	r3, #1
 8006634:	4543      	cmp	r3, r8
 8006636:	dc09      	bgt.n	800664c <_printf_float+0x254>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	079b      	lsls	r3, r3, #30
 800663c:	f100 8103 	bmi.w	8006846 <_printf_float+0x44e>
 8006640:	68e0      	ldr	r0, [r4, #12]
 8006642:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006644:	4298      	cmp	r0, r3
 8006646:	bfb8      	it	lt
 8006648:	4618      	movlt	r0, r3
 800664a:	e734      	b.n	80064b6 <_printf_float+0xbe>
 800664c:	2301      	movs	r3, #1
 800664e:	464a      	mov	r2, r9
 8006650:	4631      	mov	r1, r6
 8006652:	4628      	mov	r0, r5
 8006654:	47b8      	blx	r7
 8006656:	3001      	adds	r0, #1
 8006658:	f43f af2b 	beq.w	80064b2 <_printf_float+0xba>
 800665c:	f108 0801 	add.w	r8, r8, #1
 8006660:	e7e6      	b.n	8006630 <_printf_float+0x238>
 8006662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	dc2b      	bgt.n	80066c0 <_printf_float+0x2c8>
 8006668:	2301      	movs	r3, #1
 800666a:	4a26      	ldr	r2, [pc, #152]	; (8006704 <_printf_float+0x30c>)
 800666c:	4631      	mov	r1, r6
 800666e:	4628      	mov	r0, r5
 8006670:	47b8      	blx	r7
 8006672:	3001      	adds	r0, #1
 8006674:	f43f af1d 	beq.w	80064b2 <_printf_float+0xba>
 8006678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800667a:	b923      	cbnz	r3, 8006686 <_printf_float+0x28e>
 800667c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800667e:	b913      	cbnz	r3, 8006686 <_printf_float+0x28e>
 8006680:	6823      	ldr	r3, [r4, #0]
 8006682:	07d9      	lsls	r1, r3, #31
 8006684:	d5d8      	bpl.n	8006638 <_printf_float+0x240>
 8006686:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	f43f af0e 	beq.w	80064b2 <_printf_float+0xba>
 8006696:	f04f 0900 	mov.w	r9, #0
 800669a:	f104 0a1a 	add.w	sl, r4, #26
 800669e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066a0:	425b      	negs	r3, r3
 80066a2:	454b      	cmp	r3, r9
 80066a4:	dc01      	bgt.n	80066aa <_printf_float+0x2b2>
 80066a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066a8:	e794      	b.n	80065d4 <_printf_float+0x1dc>
 80066aa:	2301      	movs	r3, #1
 80066ac:	4652      	mov	r2, sl
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f aefc 	beq.w	80064b2 <_printf_float+0xba>
 80066ba:	f109 0901 	add.w	r9, r9, #1
 80066be:	e7ee      	b.n	800669e <_printf_float+0x2a6>
 80066c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80066c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80066c4:	429a      	cmp	r2, r3
 80066c6:	bfa8      	it	ge
 80066c8:	461a      	movge	r2, r3
 80066ca:	2a00      	cmp	r2, #0
 80066cc:	4691      	mov	r9, r2
 80066ce:	dd07      	ble.n	80066e0 <_printf_float+0x2e8>
 80066d0:	4613      	mov	r3, r2
 80066d2:	4631      	mov	r1, r6
 80066d4:	4642      	mov	r2, r8
 80066d6:	4628      	mov	r0, r5
 80066d8:	47b8      	blx	r7
 80066da:	3001      	adds	r0, #1
 80066dc:	f43f aee9 	beq.w	80064b2 <_printf_float+0xba>
 80066e0:	f104 031a 	add.w	r3, r4, #26
 80066e4:	f04f 0b00 	mov.w	fp, #0
 80066e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066ec:	9306      	str	r3, [sp, #24]
 80066ee:	e015      	b.n	800671c <_printf_float+0x324>
 80066f0:	7fefffff 	.word	0x7fefffff
 80066f4:	0800898c 	.word	0x0800898c
 80066f8:	08008988 	.word	0x08008988
 80066fc:	08008994 	.word	0x08008994
 8006700:	08008990 	.word	0x08008990
 8006704:	08008998 	.word	0x08008998
 8006708:	2301      	movs	r3, #1
 800670a:	9a06      	ldr	r2, [sp, #24]
 800670c:	4631      	mov	r1, r6
 800670e:	4628      	mov	r0, r5
 8006710:	47b8      	blx	r7
 8006712:	3001      	adds	r0, #1
 8006714:	f43f aecd 	beq.w	80064b2 <_printf_float+0xba>
 8006718:	f10b 0b01 	add.w	fp, fp, #1
 800671c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006720:	ebaa 0309 	sub.w	r3, sl, r9
 8006724:	455b      	cmp	r3, fp
 8006726:	dcef      	bgt.n	8006708 <_printf_float+0x310>
 8006728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800672c:	429a      	cmp	r2, r3
 800672e:	44d0      	add	r8, sl
 8006730:	db15      	blt.n	800675e <_printf_float+0x366>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	07da      	lsls	r2, r3, #31
 8006736:	d412      	bmi.n	800675e <_printf_float+0x366>
 8006738:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800673a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800673c:	eba3 020a 	sub.w	r2, r3, sl
 8006740:	eba3 0a01 	sub.w	sl, r3, r1
 8006744:	4592      	cmp	sl, r2
 8006746:	bfa8      	it	ge
 8006748:	4692      	movge	sl, r2
 800674a:	f1ba 0f00 	cmp.w	sl, #0
 800674e:	dc0e      	bgt.n	800676e <_printf_float+0x376>
 8006750:	f04f 0800 	mov.w	r8, #0
 8006754:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006758:	f104 091a 	add.w	r9, r4, #26
 800675c:	e019      	b.n	8006792 <_printf_float+0x39a>
 800675e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006762:	4631      	mov	r1, r6
 8006764:	4628      	mov	r0, r5
 8006766:	47b8      	blx	r7
 8006768:	3001      	adds	r0, #1
 800676a:	d1e5      	bne.n	8006738 <_printf_float+0x340>
 800676c:	e6a1      	b.n	80064b2 <_printf_float+0xba>
 800676e:	4653      	mov	r3, sl
 8006770:	4642      	mov	r2, r8
 8006772:	4631      	mov	r1, r6
 8006774:	4628      	mov	r0, r5
 8006776:	47b8      	blx	r7
 8006778:	3001      	adds	r0, #1
 800677a:	d1e9      	bne.n	8006750 <_printf_float+0x358>
 800677c:	e699      	b.n	80064b2 <_printf_float+0xba>
 800677e:	2301      	movs	r3, #1
 8006780:	464a      	mov	r2, r9
 8006782:	4631      	mov	r1, r6
 8006784:	4628      	mov	r0, r5
 8006786:	47b8      	blx	r7
 8006788:	3001      	adds	r0, #1
 800678a:	f43f ae92 	beq.w	80064b2 <_printf_float+0xba>
 800678e:	f108 0801 	add.w	r8, r8, #1
 8006792:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006796:	1a9b      	subs	r3, r3, r2
 8006798:	eba3 030a 	sub.w	r3, r3, sl
 800679c:	4543      	cmp	r3, r8
 800679e:	dcee      	bgt.n	800677e <_printf_float+0x386>
 80067a0:	e74a      	b.n	8006638 <_printf_float+0x240>
 80067a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067a4:	2a01      	cmp	r2, #1
 80067a6:	dc01      	bgt.n	80067ac <_printf_float+0x3b4>
 80067a8:	07db      	lsls	r3, r3, #31
 80067aa:	d53a      	bpl.n	8006822 <_printf_float+0x42a>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4642      	mov	r2, r8
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f ae7b 	beq.w	80064b2 <_printf_float+0xba>
 80067bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c0:	4631      	mov	r1, r6
 80067c2:	4628      	mov	r0, r5
 80067c4:	47b8      	blx	r7
 80067c6:	3001      	adds	r0, #1
 80067c8:	f108 0801 	add.w	r8, r8, #1
 80067cc:	f43f ae71 	beq.w	80064b2 <_printf_float+0xba>
 80067d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067d2:	2200      	movs	r2, #0
 80067d4:	f103 3aff 	add.w	sl, r3, #4294967295
 80067d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80067dc:	2300      	movs	r3, #0
 80067de:	f7fa f97b 	bl	8000ad8 <__aeabi_dcmpeq>
 80067e2:	b9c8      	cbnz	r0, 8006818 <_printf_float+0x420>
 80067e4:	4653      	mov	r3, sl
 80067e6:	4642      	mov	r2, r8
 80067e8:	4631      	mov	r1, r6
 80067ea:	4628      	mov	r0, r5
 80067ec:	47b8      	blx	r7
 80067ee:	3001      	adds	r0, #1
 80067f0:	d10e      	bne.n	8006810 <_printf_float+0x418>
 80067f2:	e65e      	b.n	80064b2 <_printf_float+0xba>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4652      	mov	r2, sl
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f ae57 	beq.w	80064b2 <_printf_float+0xba>
 8006804:	f108 0801 	add.w	r8, r8, #1
 8006808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680a:	3b01      	subs	r3, #1
 800680c:	4543      	cmp	r3, r8
 800680e:	dcf1      	bgt.n	80067f4 <_printf_float+0x3fc>
 8006810:	464b      	mov	r3, r9
 8006812:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006816:	e6de      	b.n	80065d6 <_printf_float+0x1de>
 8006818:	f04f 0800 	mov.w	r8, #0
 800681c:	f104 0a1a 	add.w	sl, r4, #26
 8006820:	e7f2      	b.n	8006808 <_printf_float+0x410>
 8006822:	2301      	movs	r3, #1
 8006824:	e7df      	b.n	80067e6 <_printf_float+0x3ee>
 8006826:	2301      	movs	r3, #1
 8006828:	464a      	mov	r2, r9
 800682a:	4631      	mov	r1, r6
 800682c:	4628      	mov	r0, r5
 800682e:	47b8      	blx	r7
 8006830:	3001      	adds	r0, #1
 8006832:	f43f ae3e 	beq.w	80064b2 <_printf_float+0xba>
 8006836:	f108 0801 	add.w	r8, r8, #1
 800683a:	68e3      	ldr	r3, [r4, #12]
 800683c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800683e:	1a9b      	subs	r3, r3, r2
 8006840:	4543      	cmp	r3, r8
 8006842:	dcf0      	bgt.n	8006826 <_printf_float+0x42e>
 8006844:	e6fc      	b.n	8006640 <_printf_float+0x248>
 8006846:	f04f 0800 	mov.w	r8, #0
 800684a:	f104 0919 	add.w	r9, r4, #25
 800684e:	e7f4      	b.n	800683a <_printf_float+0x442>
 8006850:	2900      	cmp	r1, #0
 8006852:	f43f ae8b 	beq.w	800656c <_printf_float+0x174>
 8006856:	2300      	movs	r3, #0
 8006858:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800685c:	ab09      	add	r3, sp, #36	; 0x24
 800685e:	9300      	str	r3, [sp, #0]
 8006860:	ec49 8b10 	vmov	d0, r8, r9
 8006864:	6022      	str	r2, [r4, #0]
 8006866:	f8cd a004 	str.w	sl, [sp, #4]
 800686a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800686e:	4628      	mov	r0, r5
 8006870:	f7ff fd2d 	bl	80062ce <__cvt>
 8006874:	4680      	mov	r8, r0
 8006876:	e648      	b.n	800650a <_printf_float+0x112>

08006878 <_printf_common>:
 8006878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800687c:	4691      	mov	r9, r2
 800687e:	461f      	mov	r7, r3
 8006880:	688a      	ldr	r2, [r1, #8]
 8006882:	690b      	ldr	r3, [r1, #16]
 8006884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006888:	4293      	cmp	r3, r2
 800688a:	bfb8      	it	lt
 800688c:	4613      	movlt	r3, r2
 800688e:	f8c9 3000 	str.w	r3, [r9]
 8006892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006896:	4606      	mov	r6, r0
 8006898:	460c      	mov	r4, r1
 800689a:	b112      	cbz	r2, 80068a2 <_printf_common+0x2a>
 800689c:	3301      	adds	r3, #1
 800689e:	f8c9 3000 	str.w	r3, [r9]
 80068a2:	6823      	ldr	r3, [r4, #0]
 80068a4:	0699      	lsls	r1, r3, #26
 80068a6:	bf42      	ittt	mi
 80068a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80068ac:	3302      	addmi	r3, #2
 80068ae:	f8c9 3000 	strmi.w	r3, [r9]
 80068b2:	6825      	ldr	r5, [r4, #0]
 80068b4:	f015 0506 	ands.w	r5, r5, #6
 80068b8:	d107      	bne.n	80068ca <_printf_common+0x52>
 80068ba:	f104 0a19 	add.w	sl, r4, #25
 80068be:	68e3      	ldr	r3, [r4, #12]
 80068c0:	f8d9 2000 	ldr.w	r2, [r9]
 80068c4:	1a9b      	subs	r3, r3, r2
 80068c6:	42ab      	cmp	r3, r5
 80068c8:	dc28      	bgt.n	800691c <_printf_common+0xa4>
 80068ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068ce:	6822      	ldr	r2, [r4, #0]
 80068d0:	3300      	adds	r3, #0
 80068d2:	bf18      	it	ne
 80068d4:	2301      	movne	r3, #1
 80068d6:	0692      	lsls	r2, r2, #26
 80068d8:	d42d      	bmi.n	8006936 <_printf_common+0xbe>
 80068da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068de:	4639      	mov	r1, r7
 80068e0:	4630      	mov	r0, r6
 80068e2:	47c0      	blx	r8
 80068e4:	3001      	adds	r0, #1
 80068e6:	d020      	beq.n	800692a <_printf_common+0xb2>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	68e5      	ldr	r5, [r4, #12]
 80068ec:	f8d9 2000 	ldr.w	r2, [r9]
 80068f0:	f003 0306 	and.w	r3, r3, #6
 80068f4:	2b04      	cmp	r3, #4
 80068f6:	bf08      	it	eq
 80068f8:	1aad      	subeq	r5, r5, r2
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	6922      	ldr	r2, [r4, #16]
 80068fe:	bf0c      	ite	eq
 8006900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006904:	2500      	movne	r5, #0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfc4      	itt	gt
 800690a:	1a9b      	subgt	r3, r3, r2
 800690c:	18ed      	addgt	r5, r5, r3
 800690e:	f04f 0900 	mov.w	r9, #0
 8006912:	341a      	adds	r4, #26
 8006914:	454d      	cmp	r5, r9
 8006916:	d11a      	bne.n	800694e <_printf_common+0xd6>
 8006918:	2000      	movs	r0, #0
 800691a:	e008      	b.n	800692e <_printf_common+0xb6>
 800691c:	2301      	movs	r3, #1
 800691e:	4652      	mov	r2, sl
 8006920:	4639      	mov	r1, r7
 8006922:	4630      	mov	r0, r6
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d103      	bne.n	8006932 <_printf_common+0xba>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006932:	3501      	adds	r5, #1
 8006934:	e7c3      	b.n	80068be <_printf_common+0x46>
 8006936:	18e1      	adds	r1, r4, r3
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	2030      	movs	r0, #48	; 0x30
 800693c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006940:	4422      	add	r2, r4
 8006942:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006946:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800694a:	3302      	adds	r3, #2
 800694c:	e7c5      	b.n	80068da <_printf_common+0x62>
 800694e:	2301      	movs	r3, #1
 8006950:	4622      	mov	r2, r4
 8006952:	4639      	mov	r1, r7
 8006954:	4630      	mov	r0, r6
 8006956:	47c0      	blx	r8
 8006958:	3001      	adds	r0, #1
 800695a:	d0e6      	beq.n	800692a <_printf_common+0xb2>
 800695c:	f109 0901 	add.w	r9, r9, #1
 8006960:	e7d8      	b.n	8006914 <_printf_common+0x9c>
	...

08006964 <_printf_i>:
 8006964:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006968:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800696c:	460c      	mov	r4, r1
 800696e:	7e09      	ldrb	r1, [r1, #24]
 8006970:	b085      	sub	sp, #20
 8006972:	296e      	cmp	r1, #110	; 0x6e
 8006974:	4617      	mov	r7, r2
 8006976:	4606      	mov	r6, r0
 8006978:	4698      	mov	r8, r3
 800697a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697c:	f000 80b3 	beq.w	8006ae6 <_printf_i+0x182>
 8006980:	d822      	bhi.n	80069c8 <_printf_i+0x64>
 8006982:	2963      	cmp	r1, #99	; 0x63
 8006984:	d036      	beq.n	80069f4 <_printf_i+0x90>
 8006986:	d80a      	bhi.n	800699e <_printf_i+0x3a>
 8006988:	2900      	cmp	r1, #0
 800698a:	f000 80b9 	beq.w	8006b00 <_printf_i+0x19c>
 800698e:	2958      	cmp	r1, #88	; 0x58
 8006990:	f000 8083 	beq.w	8006a9a <_printf_i+0x136>
 8006994:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006998:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800699c:	e032      	b.n	8006a04 <_printf_i+0xa0>
 800699e:	2964      	cmp	r1, #100	; 0x64
 80069a0:	d001      	beq.n	80069a6 <_printf_i+0x42>
 80069a2:	2969      	cmp	r1, #105	; 0x69
 80069a4:	d1f6      	bne.n	8006994 <_printf_i+0x30>
 80069a6:	6820      	ldr	r0, [r4, #0]
 80069a8:	6813      	ldr	r3, [r2, #0]
 80069aa:	0605      	lsls	r5, r0, #24
 80069ac:	f103 0104 	add.w	r1, r3, #4
 80069b0:	d52a      	bpl.n	8006a08 <_printf_i+0xa4>
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6011      	str	r1, [r2, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	da03      	bge.n	80069c2 <_printf_i+0x5e>
 80069ba:	222d      	movs	r2, #45	; 0x2d
 80069bc:	425b      	negs	r3, r3
 80069be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80069c2:	486f      	ldr	r0, [pc, #444]	; (8006b80 <_printf_i+0x21c>)
 80069c4:	220a      	movs	r2, #10
 80069c6:	e039      	b.n	8006a3c <_printf_i+0xd8>
 80069c8:	2973      	cmp	r1, #115	; 0x73
 80069ca:	f000 809d 	beq.w	8006b08 <_printf_i+0x1a4>
 80069ce:	d808      	bhi.n	80069e2 <_printf_i+0x7e>
 80069d0:	296f      	cmp	r1, #111	; 0x6f
 80069d2:	d020      	beq.n	8006a16 <_printf_i+0xb2>
 80069d4:	2970      	cmp	r1, #112	; 0x70
 80069d6:	d1dd      	bne.n	8006994 <_printf_i+0x30>
 80069d8:	6823      	ldr	r3, [r4, #0]
 80069da:	f043 0320 	orr.w	r3, r3, #32
 80069de:	6023      	str	r3, [r4, #0]
 80069e0:	e003      	b.n	80069ea <_printf_i+0x86>
 80069e2:	2975      	cmp	r1, #117	; 0x75
 80069e4:	d017      	beq.n	8006a16 <_printf_i+0xb2>
 80069e6:	2978      	cmp	r1, #120	; 0x78
 80069e8:	d1d4      	bne.n	8006994 <_printf_i+0x30>
 80069ea:	2378      	movs	r3, #120	; 0x78
 80069ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069f0:	4864      	ldr	r0, [pc, #400]	; (8006b84 <_printf_i+0x220>)
 80069f2:	e055      	b.n	8006aa0 <_printf_i+0x13c>
 80069f4:	6813      	ldr	r3, [r2, #0]
 80069f6:	1d19      	adds	r1, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6011      	str	r1, [r2, #0]
 80069fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006a04:	2301      	movs	r3, #1
 8006a06:	e08c      	b.n	8006b22 <_printf_i+0x1be>
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6011      	str	r1, [r2, #0]
 8006a0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a10:	bf18      	it	ne
 8006a12:	b21b      	sxthne	r3, r3
 8006a14:	e7cf      	b.n	80069b6 <_printf_i+0x52>
 8006a16:	6813      	ldr	r3, [r2, #0]
 8006a18:	6825      	ldr	r5, [r4, #0]
 8006a1a:	1d18      	adds	r0, r3, #4
 8006a1c:	6010      	str	r0, [r2, #0]
 8006a1e:	0628      	lsls	r0, r5, #24
 8006a20:	d501      	bpl.n	8006a26 <_printf_i+0xc2>
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	e002      	b.n	8006a2c <_printf_i+0xc8>
 8006a26:	0668      	lsls	r0, r5, #25
 8006a28:	d5fb      	bpl.n	8006a22 <_printf_i+0xbe>
 8006a2a:	881b      	ldrh	r3, [r3, #0]
 8006a2c:	4854      	ldr	r0, [pc, #336]	; (8006b80 <_printf_i+0x21c>)
 8006a2e:	296f      	cmp	r1, #111	; 0x6f
 8006a30:	bf14      	ite	ne
 8006a32:	220a      	movne	r2, #10
 8006a34:	2208      	moveq	r2, #8
 8006a36:	2100      	movs	r1, #0
 8006a38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a3c:	6865      	ldr	r5, [r4, #4]
 8006a3e:	60a5      	str	r5, [r4, #8]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	f2c0 8095 	blt.w	8006b70 <_printf_i+0x20c>
 8006a46:	6821      	ldr	r1, [r4, #0]
 8006a48:	f021 0104 	bic.w	r1, r1, #4
 8006a4c:	6021      	str	r1, [r4, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d13d      	bne.n	8006ace <_printf_i+0x16a>
 8006a52:	2d00      	cmp	r5, #0
 8006a54:	f040 808e 	bne.w	8006b74 <_printf_i+0x210>
 8006a58:	4665      	mov	r5, ip
 8006a5a:	2a08      	cmp	r2, #8
 8006a5c:	d10b      	bne.n	8006a76 <_printf_i+0x112>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07db      	lsls	r3, r3, #31
 8006a62:	d508      	bpl.n	8006a76 <_printf_i+0x112>
 8006a64:	6923      	ldr	r3, [r4, #16]
 8006a66:	6862      	ldr	r2, [r4, #4]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bfde      	ittt	le
 8006a6c:	2330      	movle	r3, #48	; 0x30
 8006a6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a76:	ebac 0305 	sub.w	r3, ip, r5
 8006a7a:	6123      	str	r3, [r4, #16]
 8006a7c:	f8cd 8000 	str.w	r8, [sp]
 8006a80:	463b      	mov	r3, r7
 8006a82:	aa03      	add	r2, sp, #12
 8006a84:	4621      	mov	r1, r4
 8006a86:	4630      	mov	r0, r6
 8006a88:	f7ff fef6 	bl	8006878 <_printf_common>
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d14d      	bne.n	8006b2c <_printf_i+0x1c8>
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	b005      	add	sp, #20
 8006a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a9a:	4839      	ldr	r0, [pc, #228]	; (8006b80 <_printf_i+0x21c>)
 8006a9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006aa0:	6813      	ldr	r3, [r2, #0]
 8006aa2:	6821      	ldr	r1, [r4, #0]
 8006aa4:	1d1d      	adds	r5, r3, #4
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	6015      	str	r5, [r2, #0]
 8006aaa:	060a      	lsls	r2, r1, #24
 8006aac:	d50b      	bpl.n	8006ac6 <_printf_i+0x162>
 8006aae:	07ca      	lsls	r2, r1, #31
 8006ab0:	bf44      	itt	mi
 8006ab2:	f041 0120 	orrmi.w	r1, r1, #32
 8006ab6:	6021      	strmi	r1, [r4, #0]
 8006ab8:	b91b      	cbnz	r3, 8006ac2 <_printf_i+0x15e>
 8006aba:	6822      	ldr	r2, [r4, #0]
 8006abc:	f022 0220 	bic.w	r2, r2, #32
 8006ac0:	6022      	str	r2, [r4, #0]
 8006ac2:	2210      	movs	r2, #16
 8006ac4:	e7b7      	b.n	8006a36 <_printf_i+0xd2>
 8006ac6:	064d      	lsls	r5, r1, #25
 8006ac8:	bf48      	it	mi
 8006aca:	b29b      	uxthmi	r3, r3
 8006acc:	e7ef      	b.n	8006aae <_printf_i+0x14a>
 8006ace:	4665      	mov	r5, ip
 8006ad0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ad4:	fb02 3311 	mls	r3, r2, r1, r3
 8006ad8:	5cc3      	ldrb	r3, [r0, r3]
 8006ada:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ade:	460b      	mov	r3, r1
 8006ae0:	2900      	cmp	r1, #0
 8006ae2:	d1f5      	bne.n	8006ad0 <_printf_i+0x16c>
 8006ae4:	e7b9      	b.n	8006a5a <_printf_i+0xf6>
 8006ae6:	6813      	ldr	r3, [r2, #0]
 8006ae8:	6825      	ldr	r5, [r4, #0]
 8006aea:	6961      	ldr	r1, [r4, #20]
 8006aec:	1d18      	adds	r0, r3, #4
 8006aee:	6010      	str	r0, [r2, #0]
 8006af0:	0628      	lsls	r0, r5, #24
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	d501      	bpl.n	8006afa <_printf_i+0x196>
 8006af6:	6019      	str	r1, [r3, #0]
 8006af8:	e002      	b.n	8006b00 <_printf_i+0x19c>
 8006afa:	066a      	lsls	r2, r5, #25
 8006afc:	d5fb      	bpl.n	8006af6 <_printf_i+0x192>
 8006afe:	8019      	strh	r1, [r3, #0]
 8006b00:	2300      	movs	r3, #0
 8006b02:	6123      	str	r3, [r4, #16]
 8006b04:	4665      	mov	r5, ip
 8006b06:	e7b9      	b.n	8006a7c <_printf_i+0x118>
 8006b08:	6813      	ldr	r3, [r2, #0]
 8006b0a:	1d19      	adds	r1, r3, #4
 8006b0c:	6011      	str	r1, [r2, #0]
 8006b0e:	681d      	ldr	r5, [r3, #0]
 8006b10:	6862      	ldr	r2, [r4, #4]
 8006b12:	2100      	movs	r1, #0
 8006b14:	4628      	mov	r0, r5
 8006b16:	f7f9 fb6b 	bl	80001f0 <memchr>
 8006b1a:	b108      	cbz	r0, 8006b20 <_printf_i+0x1bc>
 8006b1c:	1b40      	subs	r0, r0, r5
 8006b1e:	6060      	str	r0, [r4, #4]
 8006b20:	6863      	ldr	r3, [r4, #4]
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	2300      	movs	r3, #0
 8006b26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2a:	e7a7      	b.n	8006a7c <_printf_i+0x118>
 8006b2c:	6923      	ldr	r3, [r4, #16]
 8006b2e:	462a      	mov	r2, r5
 8006b30:	4639      	mov	r1, r7
 8006b32:	4630      	mov	r0, r6
 8006b34:	47c0      	blx	r8
 8006b36:	3001      	adds	r0, #1
 8006b38:	d0aa      	beq.n	8006a90 <_printf_i+0x12c>
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	079b      	lsls	r3, r3, #30
 8006b3e:	d413      	bmi.n	8006b68 <_printf_i+0x204>
 8006b40:	68e0      	ldr	r0, [r4, #12]
 8006b42:	9b03      	ldr	r3, [sp, #12]
 8006b44:	4298      	cmp	r0, r3
 8006b46:	bfb8      	it	lt
 8006b48:	4618      	movlt	r0, r3
 8006b4a:	e7a3      	b.n	8006a94 <_printf_i+0x130>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	464a      	mov	r2, r9
 8006b50:	4639      	mov	r1, r7
 8006b52:	4630      	mov	r0, r6
 8006b54:	47c0      	blx	r8
 8006b56:	3001      	adds	r0, #1
 8006b58:	d09a      	beq.n	8006a90 <_printf_i+0x12c>
 8006b5a:	3501      	adds	r5, #1
 8006b5c:	68e3      	ldr	r3, [r4, #12]
 8006b5e:	9a03      	ldr	r2, [sp, #12]
 8006b60:	1a9b      	subs	r3, r3, r2
 8006b62:	42ab      	cmp	r3, r5
 8006b64:	dcf2      	bgt.n	8006b4c <_printf_i+0x1e8>
 8006b66:	e7eb      	b.n	8006b40 <_printf_i+0x1dc>
 8006b68:	2500      	movs	r5, #0
 8006b6a:	f104 0919 	add.w	r9, r4, #25
 8006b6e:	e7f5      	b.n	8006b5c <_printf_i+0x1f8>
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1ac      	bne.n	8006ace <_printf_i+0x16a>
 8006b74:	7803      	ldrb	r3, [r0, #0]
 8006b76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b7e:	e76c      	b.n	8006a5a <_printf_i+0xf6>
 8006b80:	0800899a 	.word	0x0800899a
 8006b84:	080089ab 	.word	0x080089ab

08006b88 <siprintf>:
 8006b88:	b40e      	push	{r1, r2, r3}
 8006b8a:	b500      	push	{lr}
 8006b8c:	b09c      	sub	sp, #112	; 0x70
 8006b8e:	ab1d      	add	r3, sp, #116	; 0x74
 8006b90:	9002      	str	r0, [sp, #8]
 8006b92:	9006      	str	r0, [sp, #24]
 8006b94:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b98:	4809      	ldr	r0, [pc, #36]	; (8006bc0 <siprintf+0x38>)
 8006b9a:	9107      	str	r1, [sp, #28]
 8006b9c:	9104      	str	r1, [sp, #16]
 8006b9e:	4909      	ldr	r1, [pc, #36]	; (8006bc4 <siprintf+0x3c>)
 8006ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ba4:	9105      	str	r1, [sp, #20]
 8006ba6:	6800      	ldr	r0, [r0, #0]
 8006ba8:	9301      	str	r3, [sp, #4]
 8006baa:	a902      	add	r1, sp, #8
 8006bac:	f001 fa52 	bl	8008054 <_svfiprintf_r>
 8006bb0:	9b02      	ldr	r3, [sp, #8]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
 8006bb6:	b01c      	add	sp, #112	; 0x70
 8006bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006bbc:	b003      	add	sp, #12
 8006bbe:	4770      	bx	lr
 8006bc0:	2000001c 	.word	0x2000001c
 8006bc4:	ffff0208 	.word	0xffff0208

08006bc8 <quorem>:
 8006bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	6903      	ldr	r3, [r0, #16]
 8006bce:	690c      	ldr	r4, [r1, #16]
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	f2c0 8082 	blt.w	8006cdc <quorem+0x114>
 8006bd8:	3c01      	subs	r4, #1
 8006bda:	f101 0714 	add.w	r7, r1, #20
 8006bde:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006be2:	f100 0614 	add.w	r6, r0, #20
 8006be6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006bea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006bee:	eb06 030c 	add.w	r3, r6, ip
 8006bf2:	3501      	adds	r5, #1
 8006bf4:	eb07 090c 	add.w	r9, r7, ip
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	fbb0 f5f5 	udiv	r5, r0, r5
 8006bfe:	b395      	cbz	r5, 8006c66 <quorem+0x9e>
 8006c00:	f04f 0a00 	mov.w	sl, #0
 8006c04:	4638      	mov	r0, r7
 8006c06:	46b6      	mov	lr, r6
 8006c08:	46d3      	mov	fp, sl
 8006c0a:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c0e:	b293      	uxth	r3, r2
 8006c10:	fb05 a303 	mla	r3, r5, r3, sl
 8006c14:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	ebab 0303 	sub.w	r3, fp, r3
 8006c1e:	0c12      	lsrs	r2, r2, #16
 8006c20:	f8de b000 	ldr.w	fp, [lr]
 8006c24:	fb05 a202 	mla	r2, r5, r2, sl
 8006c28:	fa13 f38b 	uxtah	r3, r3, fp
 8006c2c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006c30:	fa1f fb82 	uxth.w	fp, r2
 8006c34:	f8de 2000 	ldr.w	r2, [lr]
 8006c38:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006c3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c40:	b29b      	uxth	r3, r3
 8006c42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c46:	4581      	cmp	r9, r0
 8006c48:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006c4c:	f84e 3b04 	str.w	r3, [lr], #4
 8006c50:	d2db      	bcs.n	8006c0a <quorem+0x42>
 8006c52:	f856 300c 	ldr.w	r3, [r6, ip]
 8006c56:	b933      	cbnz	r3, 8006c66 <quorem+0x9e>
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	3b04      	subs	r3, #4
 8006c5c:	429e      	cmp	r6, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	d330      	bcc.n	8006cc4 <quorem+0xfc>
 8006c62:	f8c8 4010 	str.w	r4, [r8, #16]
 8006c66:	4640      	mov	r0, r8
 8006c68:	f001 f81e 	bl	8007ca8 <__mcmp>
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	db25      	blt.n	8006cbc <quorem+0xf4>
 8006c70:	3501      	adds	r5, #1
 8006c72:	4630      	mov	r0, r6
 8006c74:	f04f 0c00 	mov.w	ip, #0
 8006c78:	f857 2b04 	ldr.w	r2, [r7], #4
 8006c7c:	f8d0 e000 	ldr.w	lr, [r0]
 8006c80:	b293      	uxth	r3, r2
 8006c82:	ebac 0303 	sub.w	r3, ip, r3
 8006c86:	0c12      	lsrs	r2, r2, #16
 8006c88:	fa13 f38e 	uxtah	r3, r3, lr
 8006c8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006c90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c9a:	45b9      	cmp	r9, r7
 8006c9c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ca0:	f840 3b04 	str.w	r3, [r0], #4
 8006ca4:	d2e8      	bcs.n	8006c78 <quorem+0xb0>
 8006ca6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006caa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006cae:	b92a      	cbnz	r2, 8006cbc <quorem+0xf4>
 8006cb0:	3b04      	subs	r3, #4
 8006cb2:	429e      	cmp	r6, r3
 8006cb4:	461a      	mov	r2, r3
 8006cb6:	d30b      	bcc.n	8006cd0 <quorem+0x108>
 8006cb8:	f8c8 4010 	str.w	r4, [r8, #16]
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	b003      	add	sp, #12
 8006cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cc4:	6812      	ldr	r2, [r2, #0]
 8006cc6:	3b04      	subs	r3, #4
 8006cc8:	2a00      	cmp	r2, #0
 8006cca:	d1ca      	bne.n	8006c62 <quorem+0x9a>
 8006ccc:	3c01      	subs	r4, #1
 8006cce:	e7c5      	b.n	8006c5c <quorem+0x94>
 8006cd0:	6812      	ldr	r2, [r2, #0]
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d1ef      	bne.n	8006cb8 <quorem+0xf0>
 8006cd8:	3c01      	subs	r4, #1
 8006cda:	e7ea      	b.n	8006cb2 <quorem+0xea>
 8006cdc:	2000      	movs	r0, #0
 8006cde:	e7ee      	b.n	8006cbe <quorem+0xf6>

08006ce0 <_dtoa_r>:
 8006ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce4:	ec57 6b10 	vmov	r6, r7, d0
 8006ce8:	b097      	sub	sp, #92	; 0x5c
 8006cea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006cec:	9106      	str	r1, [sp, #24]
 8006cee:	4604      	mov	r4, r0
 8006cf0:	920b      	str	r2, [sp, #44]	; 0x2c
 8006cf2:	9312      	str	r3, [sp, #72]	; 0x48
 8006cf4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006cf8:	e9cd 6700 	strd	r6, r7, [sp]
 8006cfc:	b93d      	cbnz	r5, 8006d0e <_dtoa_r+0x2e>
 8006cfe:	2010      	movs	r0, #16
 8006d00:	f000 fdb4 	bl	800786c <malloc>
 8006d04:	6260      	str	r0, [r4, #36]	; 0x24
 8006d06:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d0a:	6005      	str	r5, [r0, #0]
 8006d0c:	60c5      	str	r5, [r0, #12]
 8006d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d10:	6819      	ldr	r1, [r3, #0]
 8006d12:	b151      	cbz	r1, 8006d2a <_dtoa_r+0x4a>
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	604a      	str	r2, [r1, #4]
 8006d18:	2301      	movs	r3, #1
 8006d1a:	4093      	lsls	r3, r2
 8006d1c:	608b      	str	r3, [r1, #8]
 8006d1e:	4620      	mov	r0, r4
 8006d20:	f000 fde0 	bl	80078e4 <_Bfree>
 8006d24:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006d26:	2200      	movs	r2, #0
 8006d28:	601a      	str	r2, [r3, #0]
 8006d2a:	1e3b      	subs	r3, r7, #0
 8006d2c:	bfbb      	ittet	lt
 8006d2e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d32:	9301      	strlt	r3, [sp, #4]
 8006d34:	2300      	movge	r3, #0
 8006d36:	2201      	movlt	r2, #1
 8006d38:	bfac      	ite	ge
 8006d3a:	f8c8 3000 	strge.w	r3, [r8]
 8006d3e:	f8c8 2000 	strlt.w	r2, [r8]
 8006d42:	4baf      	ldr	r3, [pc, #700]	; (8007000 <_dtoa_r+0x320>)
 8006d44:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006d48:	ea33 0308 	bics.w	r3, r3, r8
 8006d4c:	d114      	bne.n	8006d78 <_dtoa_r+0x98>
 8006d4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d50:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	9b00      	ldr	r3, [sp, #0]
 8006d58:	b923      	cbnz	r3, 8006d64 <_dtoa_r+0x84>
 8006d5a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f000 8542 	beq.w	80077e8 <_dtoa_r+0xb08>
 8006d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d66:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007014 <_dtoa_r+0x334>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	f000 8544 	beq.w	80077f8 <_dtoa_r+0xb18>
 8006d70:	f10b 0303 	add.w	r3, fp, #3
 8006d74:	f000 bd3e 	b.w	80077f4 <_dtoa_r+0xb14>
 8006d78:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4630      	mov	r0, r6
 8006d82:	4639      	mov	r1, r7
 8006d84:	f7f9 fea8 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d88:	4681      	mov	r9, r0
 8006d8a:	b168      	cbz	r0, 8006da8 <_dtoa_r+0xc8>
 8006d8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006d8e:	2301      	movs	r3, #1
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	f000 8524 	beq.w	80077e2 <_dtoa_r+0xb02>
 8006d9a:	4b9a      	ldr	r3, [pc, #616]	; (8007004 <_dtoa_r+0x324>)
 8006d9c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006d9e:	f103 3bff 	add.w	fp, r3, #4294967295
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	f000 bd28 	b.w	80077f8 <_dtoa_r+0xb18>
 8006da8:	aa14      	add	r2, sp, #80	; 0x50
 8006daa:	a915      	add	r1, sp, #84	; 0x54
 8006dac:	ec47 6b10 	vmov	d0, r6, r7
 8006db0:	4620      	mov	r0, r4
 8006db2:	f000 fff0 	bl	8007d96 <__d2b>
 8006db6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006dba:	9004      	str	r0, [sp, #16]
 8006dbc:	2d00      	cmp	r5, #0
 8006dbe:	d07c      	beq.n	8006eba <_dtoa_r+0x1da>
 8006dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006dc4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8006dc8:	46b2      	mov	sl, r6
 8006dca:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8006dce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006dd2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	4b8b      	ldr	r3, [pc, #556]	; (8007008 <_dtoa_r+0x328>)
 8006dda:	4650      	mov	r0, sl
 8006ddc:	4659      	mov	r1, fp
 8006dde:	f7f9 fa5b 	bl	8000298 <__aeabi_dsub>
 8006de2:	a381      	add	r3, pc, #516	; (adr r3, 8006fe8 <_dtoa_r+0x308>)
 8006de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de8:	f7f9 fc0e 	bl	8000608 <__aeabi_dmul>
 8006dec:	a380      	add	r3, pc, #512	; (adr r3, 8006ff0 <_dtoa_r+0x310>)
 8006dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df2:	f7f9 fa53 	bl	800029c <__adddf3>
 8006df6:	4606      	mov	r6, r0
 8006df8:	4628      	mov	r0, r5
 8006dfa:	460f      	mov	r7, r1
 8006dfc:	f7f9 fb9a 	bl	8000534 <__aeabi_i2d>
 8006e00:	a37d      	add	r3, pc, #500	; (adr r3, 8006ff8 <_dtoa_r+0x318>)
 8006e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e06:	f7f9 fbff 	bl	8000608 <__aeabi_dmul>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4630      	mov	r0, r6
 8006e10:	4639      	mov	r1, r7
 8006e12:	f7f9 fa43 	bl	800029c <__adddf3>
 8006e16:	4606      	mov	r6, r0
 8006e18:	460f      	mov	r7, r1
 8006e1a:	f7f9 fea5 	bl	8000b68 <__aeabi_d2iz>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4682      	mov	sl, r0
 8006e22:	2300      	movs	r3, #0
 8006e24:	4630      	mov	r0, r6
 8006e26:	4639      	mov	r1, r7
 8006e28:	f7f9 fe60 	bl	8000aec <__aeabi_dcmplt>
 8006e2c:	b148      	cbz	r0, 8006e42 <_dtoa_r+0x162>
 8006e2e:	4650      	mov	r0, sl
 8006e30:	f7f9 fb80 	bl	8000534 <__aeabi_i2d>
 8006e34:	4632      	mov	r2, r6
 8006e36:	463b      	mov	r3, r7
 8006e38:	f7f9 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006e3c:	b908      	cbnz	r0, 8006e42 <_dtoa_r+0x162>
 8006e3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e42:	f1ba 0f16 	cmp.w	sl, #22
 8006e46:	d859      	bhi.n	8006efc <_dtoa_r+0x21c>
 8006e48:	4970      	ldr	r1, [pc, #448]	; (800700c <_dtoa_r+0x32c>)
 8006e4a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006e4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e52:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e56:	f7f9 fe67 	bl	8000b28 <__aeabi_dcmpgt>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d050      	beq.n	8006f00 <_dtoa_r+0x220>
 8006e5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e62:	2300      	movs	r3, #0
 8006e64:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e68:	1b5d      	subs	r5, r3, r5
 8006e6a:	f1b5 0801 	subs.w	r8, r5, #1
 8006e6e:	bf49      	itett	mi
 8006e70:	f1c5 0301 	rsbmi	r3, r5, #1
 8006e74:	2300      	movpl	r3, #0
 8006e76:	9305      	strmi	r3, [sp, #20]
 8006e78:	f04f 0800 	movmi.w	r8, #0
 8006e7c:	bf58      	it	pl
 8006e7e:	9305      	strpl	r3, [sp, #20]
 8006e80:	f1ba 0f00 	cmp.w	sl, #0
 8006e84:	db3e      	blt.n	8006f04 <_dtoa_r+0x224>
 8006e86:	2300      	movs	r3, #0
 8006e88:	44d0      	add	r8, sl
 8006e8a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8006e8e:	9307      	str	r3, [sp, #28]
 8006e90:	9b06      	ldr	r3, [sp, #24]
 8006e92:	2b09      	cmp	r3, #9
 8006e94:	f200 8090 	bhi.w	8006fb8 <_dtoa_r+0x2d8>
 8006e98:	2b05      	cmp	r3, #5
 8006e9a:	bfc4      	itt	gt
 8006e9c:	3b04      	subgt	r3, #4
 8006e9e:	9306      	strgt	r3, [sp, #24]
 8006ea0:	9b06      	ldr	r3, [sp, #24]
 8006ea2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ea6:	bfcc      	ite	gt
 8006ea8:	2500      	movgt	r5, #0
 8006eaa:	2501      	movle	r5, #1
 8006eac:	2b03      	cmp	r3, #3
 8006eae:	f200 808f 	bhi.w	8006fd0 <_dtoa_r+0x2f0>
 8006eb2:	e8df f003 	tbb	[pc, r3]
 8006eb6:	7f7d      	.short	0x7f7d
 8006eb8:	7131      	.short	0x7131
 8006eba:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8006ebe:	441d      	add	r5, r3
 8006ec0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006ec4:	2820      	cmp	r0, #32
 8006ec6:	dd13      	ble.n	8006ef0 <_dtoa_r+0x210>
 8006ec8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006ecc:	9b00      	ldr	r3, [sp, #0]
 8006ece:	fa08 f800 	lsl.w	r8, r8, r0
 8006ed2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006ed6:	fa23 f000 	lsr.w	r0, r3, r0
 8006eda:	ea48 0000 	orr.w	r0, r8, r0
 8006ede:	f7f9 fb19 	bl	8000514 <__aeabi_ui2d>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	4682      	mov	sl, r0
 8006ee6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8006eea:	3d01      	subs	r5, #1
 8006eec:	9313      	str	r3, [sp, #76]	; 0x4c
 8006eee:	e772      	b.n	8006dd6 <_dtoa_r+0xf6>
 8006ef0:	9b00      	ldr	r3, [sp, #0]
 8006ef2:	f1c0 0020 	rsb	r0, r0, #32
 8006ef6:	fa03 f000 	lsl.w	r0, r3, r0
 8006efa:	e7f0      	b.n	8006ede <_dtoa_r+0x1fe>
 8006efc:	2301      	movs	r3, #1
 8006efe:	e7b1      	b.n	8006e64 <_dtoa_r+0x184>
 8006f00:	900f      	str	r0, [sp, #60]	; 0x3c
 8006f02:	e7b0      	b.n	8006e66 <_dtoa_r+0x186>
 8006f04:	9b05      	ldr	r3, [sp, #20]
 8006f06:	eba3 030a 	sub.w	r3, r3, sl
 8006f0a:	9305      	str	r3, [sp, #20]
 8006f0c:	f1ca 0300 	rsb	r3, sl, #0
 8006f10:	9307      	str	r3, [sp, #28]
 8006f12:	2300      	movs	r3, #0
 8006f14:	930e      	str	r3, [sp, #56]	; 0x38
 8006f16:	e7bb      	b.n	8006e90 <_dtoa_r+0x1b0>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	dd59      	ble.n	8006fd6 <_dtoa_r+0x2f6>
 8006f22:	9302      	str	r3, [sp, #8]
 8006f24:	4699      	mov	r9, r3
 8006f26:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f28:	2200      	movs	r2, #0
 8006f2a:	6072      	str	r2, [r6, #4]
 8006f2c:	2204      	movs	r2, #4
 8006f2e:	f102 0014 	add.w	r0, r2, #20
 8006f32:	4298      	cmp	r0, r3
 8006f34:	6871      	ldr	r1, [r6, #4]
 8006f36:	d953      	bls.n	8006fe0 <_dtoa_r+0x300>
 8006f38:	4620      	mov	r0, r4
 8006f3a:	f000 fc9f 	bl	800787c <_Balloc>
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	6030      	str	r0, [r6, #0]
 8006f42:	f1b9 0f0e 	cmp.w	r9, #14
 8006f46:	f8d3 b000 	ldr.w	fp, [r3]
 8006f4a:	f200 80e6 	bhi.w	800711a <_dtoa_r+0x43a>
 8006f4e:	2d00      	cmp	r5, #0
 8006f50:	f000 80e3 	beq.w	800711a <_dtoa_r+0x43a>
 8006f54:	ed9d 7b00 	vldr	d7, [sp]
 8006f58:	f1ba 0f00 	cmp.w	sl, #0
 8006f5c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006f60:	dd74      	ble.n	800704c <_dtoa_r+0x36c>
 8006f62:	4a2a      	ldr	r2, [pc, #168]	; (800700c <_dtoa_r+0x32c>)
 8006f64:	f00a 030f 	and.w	r3, sl, #15
 8006f68:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006f6c:	ed93 7b00 	vldr	d7, [r3]
 8006f70:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006f74:	06f0      	lsls	r0, r6, #27
 8006f76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8006f7a:	d565      	bpl.n	8007048 <_dtoa_r+0x368>
 8006f7c:	4b24      	ldr	r3, [pc, #144]	; (8007010 <_dtoa_r+0x330>)
 8006f7e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f82:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006f86:	f7f9 fc69 	bl	800085c <__aeabi_ddiv>
 8006f8a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f8e:	f006 060f 	and.w	r6, r6, #15
 8006f92:	2503      	movs	r5, #3
 8006f94:	4f1e      	ldr	r7, [pc, #120]	; (8007010 <_dtoa_r+0x330>)
 8006f96:	e04c      	b.n	8007032 <_dtoa_r+0x352>
 8006f98:	2301      	movs	r3, #1
 8006f9a:	930a      	str	r3, [sp, #40]	; 0x28
 8006f9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f9e:	4453      	add	r3, sl
 8006fa0:	f103 0901 	add.w	r9, r3, #1
 8006fa4:	9302      	str	r3, [sp, #8]
 8006fa6:	464b      	mov	r3, r9
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	bfb8      	it	lt
 8006fac:	2301      	movlt	r3, #1
 8006fae:	e7ba      	b.n	8006f26 <_dtoa_r+0x246>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	e7b2      	b.n	8006f1a <_dtoa_r+0x23a>
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	e7f0      	b.n	8006f9a <_dtoa_r+0x2ba>
 8006fb8:	2501      	movs	r5, #1
 8006fba:	2300      	movs	r3, #0
 8006fbc:	9306      	str	r3, [sp, #24]
 8006fbe:	950a      	str	r5, [sp, #40]	; 0x28
 8006fc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc4:	9302      	str	r3, [sp, #8]
 8006fc6:	4699      	mov	r9, r3
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2312      	movs	r3, #18
 8006fcc:	920b      	str	r2, [sp, #44]	; 0x2c
 8006fce:	e7aa      	b.n	8006f26 <_dtoa_r+0x246>
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd4:	e7f4      	b.n	8006fc0 <_dtoa_r+0x2e0>
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	9302      	str	r3, [sp, #8]
 8006fda:	4699      	mov	r9, r3
 8006fdc:	461a      	mov	r2, r3
 8006fde:	e7f5      	b.n	8006fcc <_dtoa_r+0x2ec>
 8006fe0:	3101      	adds	r1, #1
 8006fe2:	6071      	str	r1, [r6, #4]
 8006fe4:	0052      	lsls	r2, r2, #1
 8006fe6:	e7a2      	b.n	8006f2e <_dtoa_r+0x24e>
 8006fe8:	636f4361 	.word	0x636f4361
 8006fec:	3fd287a7 	.word	0x3fd287a7
 8006ff0:	8b60c8b3 	.word	0x8b60c8b3
 8006ff4:	3fc68a28 	.word	0x3fc68a28
 8006ff8:	509f79fb 	.word	0x509f79fb
 8006ffc:	3fd34413 	.word	0x3fd34413
 8007000:	7ff00000 	.word	0x7ff00000
 8007004:	08008999 	.word	0x08008999
 8007008:	3ff80000 	.word	0x3ff80000
 800700c:	080089f8 	.word	0x080089f8
 8007010:	080089d0 	.word	0x080089d0
 8007014:	080089c5 	.word	0x080089c5
 8007018:	07f1      	lsls	r1, r6, #31
 800701a:	d508      	bpl.n	800702e <_dtoa_r+0x34e>
 800701c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007020:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007024:	f7f9 faf0 	bl	8000608 <__aeabi_dmul>
 8007028:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800702c:	3501      	adds	r5, #1
 800702e:	1076      	asrs	r6, r6, #1
 8007030:	3708      	adds	r7, #8
 8007032:	2e00      	cmp	r6, #0
 8007034:	d1f0      	bne.n	8007018 <_dtoa_r+0x338>
 8007036:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800703a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800703e:	f7f9 fc0d 	bl	800085c <__aeabi_ddiv>
 8007042:	e9cd 0100 	strd	r0, r1, [sp]
 8007046:	e01a      	b.n	800707e <_dtoa_r+0x39e>
 8007048:	2502      	movs	r5, #2
 800704a:	e7a3      	b.n	8006f94 <_dtoa_r+0x2b4>
 800704c:	f000 80a0 	beq.w	8007190 <_dtoa_r+0x4b0>
 8007050:	f1ca 0600 	rsb	r6, sl, #0
 8007054:	4b9f      	ldr	r3, [pc, #636]	; (80072d4 <_dtoa_r+0x5f4>)
 8007056:	4fa0      	ldr	r7, [pc, #640]	; (80072d8 <_dtoa_r+0x5f8>)
 8007058:	f006 020f 	and.w	r2, r6, #15
 800705c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007068:	f7f9 face 	bl	8000608 <__aeabi_dmul>
 800706c:	e9cd 0100 	strd	r0, r1, [sp]
 8007070:	1136      	asrs	r6, r6, #4
 8007072:	2300      	movs	r3, #0
 8007074:	2502      	movs	r5, #2
 8007076:	2e00      	cmp	r6, #0
 8007078:	d17f      	bne.n	800717a <_dtoa_r+0x49a>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1e1      	bne.n	8007042 <_dtoa_r+0x362>
 800707e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 8087 	beq.w	8007194 <_dtoa_r+0x4b4>
 8007086:	e9dd 6700 	ldrd	r6, r7, [sp]
 800708a:	2200      	movs	r2, #0
 800708c:	4b93      	ldr	r3, [pc, #588]	; (80072dc <_dtoa_r+0x5fc>)
 800708e:	4630      	mov	r0, r6
 8007090:	4639      	mov	r1, r7
 8007092:	f7f9 fd2b 	bl	8000aec <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	d07c      	beq.n	8007194 <_dtoa_r+0x4b4>
 800709a:	f1b9 0f00 	cmp.w	r9, #0
 800709e:	d079      	beq.n	8007194 <_dtoa_r+0x4b4>
 80070a0:	9b02      	ldr	r3, [sp, #8]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	dd35      	ble.n	8007112 <_dtoa_r+0x432>
 80070a6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80070aa:	9308      	str	r3, [sp, #32]
 80070ac:	4639      	mov	r1, r7
 80070ae:	2200      	movs	r2, #0
 80070b0:	4b8b      	ldr	r3, [pc, #556]	; (80072e0 <_dtoa_r+0x600>)
 80070b2:	4630      	mov	r0, r6
 80070b4:	f7f9 faa8 	bl	8000608 <__aeabi_dmul>
 80070b8:	e9cd 0100 	strd	r0, r1, [sp]
 80070bc:	9f02      	ldr	r7, [sp, #8]
 80070be:	3501      	adds	r5, #1
 80070c0:	4628      	mov	r0, r5
 80070c2:	f7f9 fa37 	bl	8000534 <__aeabi_i2d>
 80070c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80070ca:	f7f9 fa9d 	bl	8000608 <__aeabi_dmul>
 80070ce:	2200      	movs	r2, #0
 80070d0:	4b84      	ldr	r3, [pc, #528]	; (80072e4 <_dtoa_r+0x604>)
 80070d2:	f7f9 f8e3 	bl	800029c <__adddf3>
 80070d6:	4605      	mov	r5, r0
 80070d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80070dc:	2f00      	cmp	r7, #0
 80070de:	d15d      	bne.n	800719c <_dtoa_r+0x4bc>
 80070e0:	2200      	movs	r2, #0
 80070e2:	4b81      	ldr	r3, [pc, #516]	; (80072e8 <_dtoa_r+0x608>)
 80070e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80070e8:	f7f9 f8d6 	bl	8000298 <__aeabi_dsub>
 80070ec:	462a      	mov	r2, r5
 80070ee:	4633      	mov	r3, r6
 80070f0:	e9cd 0100 	strd	r0, r1, [sp]
 80070f4:	f7f9 fd18 	bl	8000b28 <__aeabi_dcmpgt>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	f040 8288 	bne.w	800760e <_dtoa_r+0x92e>
 80070fe:	462a      	mov	r2, r5
 8007100:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007104:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007108:	f7f9 fcf0 	bl	8000aec <__aeabi_dcmplt>
 800710c:	2800      	cmp	r0, #0
 800710e:	f040 827c 	bne.w	800760a <_dtoa_r+0x92a>
 8007112:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007116:	e9cd 2300 	strd	r2, r3, [sp]
 800711a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800711c:	2b00      	cmp	r3, #0
 800711e:	f2c0 8150 	blt.w	80073c2 <_dtoa_r+0x6e2>
 8007122:	f1ba 0f0e 	cmp.w	sl, #14
 8007126:	f300 814c 	bgt.w	80073c2 <_dtoa_r+0x6e2>
 800712a:	4b6a      	ldr	r3, [pc, #424]	; (80072d4 <_dtoa_r+0x5f4>)
 800712c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007130:	ed93 7b00 	vldr	d7, [r3]
 8007134:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007136:	2b00      	cmp	r3, #0
 8007138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800713c:	f280 80d8 	bge.w	80072f0 <_dtoa_r+0x610>
 8007140:	f1b9 0f00 	cmp.w	r9, #0
 8007144:	f300 80d4 	bgt.w	80072f0 <_dtoa_r+0x610>
 8007148:	f040 825e 	bne.w	8007608 <_dtoa_r+0x928>
 800714c:	2200      	movs	r2, #0
 800714e:	4b66      	ldr	r3, [pc, #408]	; (80072e8 <_dtoa_r+0x608>)
 8007150:	ec51 0b17 	vmov	r0, r1, d7
 8007154:	f7f9 fa58 	bl	8000608 <__aeabi_dmul>
 8007158:	e9dd 2300 	ldrd	r2, r3, [sp]
 800715c:	f7f9 fcda 	bl	8000b14 <__aeabi_dcmpge>
 8007160:	464f      	mov	r7, r9
 8007162:	464e      	mov	r6, r9
 8007164:	2800      	cmp	r0, #0
 8007166:	f040 8234 	bne.w	80075d2 <_dtoa_r+0x8f2>
 800716a:	2331      	movs	r3, #49	; 0x31
 800716c:	f10b 0501 	add.w	r5, fp, #1
 8007170:	f88b 3000 	strb.w	r3, [fp]
 8007174:	f10a 0a01 	add.w	sl, sl, #1
 8007178:	e22f      	b.n	80075da <_dtoa_r+0x8fa>
 800717a:	07f2      	lsls	r2, r6, #31
 800717c:	d505      	bpl.n	800718a <_dtoa_r+0x4aa>
 800717e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007182:	f7f9 fa41 	bl	8000608 <__aeabi_dmul>
 8007186:	3501      	adds	r5, #1
 8007188:	2301      	movs	r3, #1
 800718a:	1076      	asrs	r6, r6, #1
 800718c:	3708      	adds	r7, #8
 800718e:	e772      	b.n	8007076 <_dtoa_r+0x396>
 8007190:	2502      	movs	r5, #2
 8007192:	e774      	b.n	800707e <_dtoa_r+0x39e>
 8007194:	f8cd a020 	str.w	sl, [sp, #32]
 8007198:	464f      	mov	r7, r9
 800719a:	e791      	b.n	80070c0 <_dtoa_r+0x3e0>
 800719c:	4b4d      	ldr	r3, [pc, #308]	; (80072d4 <_dtoa_r+0x5f4>)
 800719e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071a2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80071a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d047      	beq.n	800723c <_dtoa_r+0x55c>
 80071ac:	4602      	mov	r2, r0
 80071ae:	460b      	mov	r3, r1
 80071b0:	2000      	movs	r0, #0
 80071b2:	494e      	ldr	r1, [pc, #312]	; (80072ec <_dtoa_r+0x60c>)
 80071b4:	f7f9 fb52 	bl	800085c <__aeabi_ddiv>
 80071b8:	462a      	mov	r2, r5
 80071ba:	4633      	mov	r3, r6
 80071bc:	f7f9 f86c 	bl	8000298 <__aeabi_dsub>
 80071c0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80071c4:	465d      	mov	r5, fp
 80071c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071ca:	f7f9 fccd 	bl	8000b68 <__aeabi_d2iz>
 80071ce:	4606      	mov	r6, r0
 80071d0:	f7f9 f9b0 	bl	8000534 <__aeabi_i2d>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80071dc:	f7f9 f85c 	bl	8000298 <__aeabi_dsub>
 80071e0:	3630      	adds	r6, #48	; 0x30
 80071e2:	f805 6b01 	strb.w	r6, [r5], #1
 80071e6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80071ea:	e9cd 0100 	strd	r0, r1, [sp]
 80071ee:	f7f9 fc7d 	bl	8000aec <__aeabi_dcmplt>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	d163      	bne.n	80072be <_dtoa_r+0x5de>
 80071f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80071fa:	2000      	movs	r0, #0
 80071fc:	4937      	ldr	r1, [pc, #220]	; (80072dc <_dtoa_r+0x5fc>)
 80071fe:	f7f9 f84b 	bl	8000298 <__aeabi_dsub>
 8007202:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007206:	f7f9 fc71 	bl	8000aec <__aeabi_dcmplt>
 800720a:	2800      	cmp	r0, #0
 800720c:	f040 80b7 	bne.w	800737e <_dtoa_r+0x69e>
 8007210:	eba5 030b 	sub.w	r3, r5, fp
 8007214:	429f      	cmp	r7, r3
 8007216:	f77f af7c 	ble.w	8007112 <_dtoa_r+0x432>
 800721a:	2200      	movs	r2, #0
 800721c:	4b30      	ldr	r3, [pc, #192]	; (80072e0 <_dtoa_r+0x600>)
 800721e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007222:	f7f9 f9f1 	bl	8000608 <__aeabi_dmul>
 8007226:	2200      	movs	r2, #0
 8007228:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800722c:	4b2c      	ldr	r3, [pc, #176]	; (80072e0 <_dtoa_r+0x600>)
 800722e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007232:	f7f9 f9e9 	bl	8000608 <__aeabi_dmul>
 8007236:	e9cd 0100 	strd	r0, r1, [sp]
 800723a:	e7c4      	b.n	80071c6 <_dtoa_r+0x4e6>
 800723c:	462a      	mov	r2, r5
 800723e:	4633      	mov	r3, r6
 8007240:	f7f9 f9e2 	bl	8000608 <__aeabi_dmul>
 8007244:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007248:	eb0b 0507 	add.w	r5, fp, r7
 800724c:	465e      	mov	r6, fp
 800724e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007252:	f7f9 fc89 	bl	8000b68 <__aeabi_d2iz>
 8007256:	4607      	mov	r7, r0
 8007258:	f7f9 f96c 	bl	8000534 <__aeabi_i2d>
 800725c:	3730      	adds	r7, #48	; 0x30
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007266:	f7f9 f817 	bl	8000298 <__aeabi_dsub>
 800726a:	f806 7b01 	strb.w	r7, [r6], #1
 800726e:	42ae      	cmp	r6, r5
 8007270:	e9cd 0100 	strd	r0, r1, [sp]
 8007274:	f04f 0200 	mov.w	r2, #0
 8007278:	d126      	bne.n	80072c8 <_dtoa_r+0x5e8>
 800727a:	4b1c      	ldr	r3, [pc, #112]	; (80072ec <_dtoa_r+0x60c>)
 800727c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007280:	f7f9 f80c 	bl	800029c <__adddf3>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	e9dd 0100 	ldrd	r0, r1, [sp]
 800728c:	f7f9 fc4c 	bl	8000b28 <__aeabi_dcmpgt>
 8007290:	2800      	cmp	r0, #0
 8007292:	d174      	bne.n	800737e <_dtoa_r+0x69e>
 8007294:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007298:	2000      	movs	r0, #0
 800729a:	4914      	ldr	r1, [pc, #80]	; (80072ec <_dtoa_r+0x60c>)
 800729c:	f7f8 fffc 	bl	8000298 <__aeabi_dsub>
 80072a0:	4602      	mov	r2, r0
 80072a2:	460b      	mov	r3, r1
 80072a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80072a8:	f7f9 fc20 	bl	8000aec <__aeabi_dcmplt>
 80072ac:	2800      	cmp	r0, #0
 80072ae:	f43f af30 	beq.w	8007112 <_dtoa_r+0x432>
 80072b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80072b6:	2b30      	cmp	r3, #48	; 0x30
 80072b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80072bc:	d002      	beq.n	80072c4 <_dtoa_r+0x5e4>
 80072be:	f8dd a020 	ldr.w	sl, [sp, #32]
 80072c2:	e04a      	b.n	800735a <_dtoa_r+0x67a>
 80072c4:	4615      	mov	r5, r2
 80072c6:	e7f4      	b.n	80072b2 <_dtoa_r+0x5d2>
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <_dtoa_r+0x600>)
 80072ca:	f7f9 f99d 	bl	8000608 <__aeabi_dmul>
 80072ce:	e9cd 0100 	strd	r0, r1, [sp]
 80072d2:	e7bc      	b.n	800724e <_dtoa_r+0x56e>
 80072d4:	080089f8 	.word	0x080089f8
 80072d8:	080089d0 	.word	0x080089d0
 80072dc:	3ff00000 	.word	0x3ff00000
 80072e0:	40240000 	.word	0x40240000
 80072e4:	401c0000 	.word	0x401c0000
 80072e8:	40140000 	.word	0x40140000
 80072ec:	3fe00000 	.word	0x3fe00000
 80072f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072f4:	465d      	mov	r5, fp
 80072f6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072fa:	4630      	mov	r0, r6
 80072fc:	4639      	mov	r1, r7
 80072fe:	f7f9 faad 	bl	800085c <__aeabi_ddiv>
 8007302:	f7f9 fc31 	bl	8000b68 <__aeabi_d2iz>
 8007306:	4680      	mov	r8, r0
 8007308:	f7f9 f914 	bl	8000534 <__aeabi_i2d>
 800730c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007310:	f7f9 f97a 	bl	8000608 <__aeabi_dmul>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4630      	mov	r0, r6
 800731a:	4639      	mov	r1, r7
 800731c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007320:	f7f8 ffba 	bl	8000298 <__aeabi_dsub>
 8007324:	f805 6b01 	strb.w	r6, [r5], #1
 8007328:	eba5 060b 	sub.w	r6, r5, fp
 800732c:	45b1      	cmp	r9, r6
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	d139      	bne.n	80073a8 <_dtoa_r+0x6c8>
 8007334:	f7f8 ffb2 	bl	800029c <__adddf3>
 8007338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800733c:	4606      	mov	r6, r0
 800733e:	460f      	mov	r7, r1
 8007340:	f7f9 fbf2 	bl	8000b28 <__aeabi_dcmpgt>
 8007344:	b9c8      	cbnz	r0, 800737a <_dtoa_r+0x69a>
 8007346:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800734a:	4630      	mov	r0, r6
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 fbc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007352:	b110      	cbz	r0, 800735a <_dtoa_r+0x67a>
 8007354:	f018 0f01 	tst.w	r8, #1
 8007358:	d10f      	bne.n	800737a <_dtoa_r+0x69a>
 800735a:	9904      	ldr	r1, [sp, #16]
 800735c:	4620      	mov	r0, r4
 800735e:	f000 fac1 	bl	80078e4 <_Bfree>
 8007362:	2300      	movs	r3, #0
 8007364:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007366:	702b      	strb	r3, [r5, #0]
 8007368:	f10a 0301 	add.w	r3, sl, #1
 800736c:	6013      	str	r3, [r2, #0]
 800736e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007370:	2b00      	cmp	r3, #0
 8007372:	f000 8241 	beq.w	80077f8 <_dtoa_r+0xb18>
 8007376:	601d      	str	r5, [r3, #0]
 8007378:	e23e      	b.n	80077f8 <_dtoa_r+0xb18>
 800737a:	f8cd a020 	str.w	sl, [sp, #32]
 800737e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007382:	2a39      	cmp	r2, #57	; 0x39
 8007384:	f105 33ff 	add.w	r3, r5, #4294967295
 8007388:	d108      	bne.n	800739c <_dtoa_r+0x6bc>
 800738a:	459b      	cmp	fp, r3
 800738c:	d10a      	bne.n	80073a4 <_dtoa_r+0x6c4>
 800738e:	9b08      	ldr	r3, [sp, #32]
 8007390:	3301      	adds	r3, #1
 8007392:	9308      	str	r3, [sp, #32]
 8007394:	2330      	movs	r3, #48	; 0x30
 8007396:	f88b 3000 	strb.w	r3, [fp]
 800739a:	465b      	mov	r3, fp
 800739c:	781a      	ldrb	r2, [r3, #0]
 800739e:	3201      	adds	r2, #1
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	e78c      	b.n	80072be <_dtoa_r+0x5de>
 80073a4:	461d      	mov	r5, r3
 80073a6:	e7ea      	b.n	800737e <_dtoa_r+0x69e>
 80073a8:	2200      	movs	r2, #0
 80073aa:	4b9b      	ldr	r3, [pc, #620]	; (8007618 <_dtoa_r+0x938>)
 80073ac:	f7f9 f92c 	bl	8000608 <__aeabi_dmul>
 80073b0:	2200      	movs	r2, #0
 80073b2:	2300      	movs	r3, #0
 80073b4:	4606      	mov	r6, r0
 80073b6:	460f      	mov	r7, r1
 80073b8:	f7f9 fb8e 	bl	8000ad8 <__aeabi_dcmpeq>
 80073bc:	2800      	cmp	r0, #0
 80073be:	d09a      	beq.n	80072f6 <_dtoa_r+0x616>
 80073c0:	e7cb      	b.n	800735a <_dtoa_r+0x67a>
 80073c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073c4:	2a00      	cmp	r2, #0
 80073c6:	f000 808b 	beq.w	80074e0 <_dtoa_r+0x800>
 80073ca:	9a06      	ldr	r2, [sp, #24]
 80073cc:	2a01      	cmp	r2, #1
 80073ce:	dc6e      	bgt.n	80074ae <_dtoa_r+0x7ce>
 80073d0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80073d2:	2a00      	cmp	r2, #0
 80073d4:	d067      	beq.n	80074a6 <_dtoa_r+0x7c6>
 80073d6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80073da:	9f07      	ldr	r7, [sp, #28]
 80073dc:	9d05      	ldr	r5, [sp, #20]
 80073de:	9a05      	ldr	r2, [sp, #20]
 80073e0:	2101      	movs	r1, #1
 80073e2:	441a      	add	r2, r3
 80073e4:	4620      	mov	r0, r4
 80073e6:	9205      	str	r2, [sp, #20]
 80073e8:	4498      	add	r8, r3
 80073ea:	f000 fb1b 	bl	8007a24 <__i2b>
 80073ee:	4606      	mov	r6, r0
 80073f0:	2d00      	cmp	r5, #0
 80073f2:	dd0c      	ble.n	800740e <_dtoa_r+0x72e>
 80073f4:	f1b8 0f00 	cmp.w	r8, #0
 80073f8:	dd09      	ble.n	800740e <_dtoa_r+0x72e>
 80073fa:	4545      	cmp	r5, r8
 80073fc:	9a05      	ldr	r2, [sp, #20]
 80073fe:	462b      	mov	r3, r5
 8007400:	bfa8      	it	ge
 8007402:	4643      	movge	r3, r8
 8007404:	1ad2      	subs	r2, r2, r3
 8007406:	9205      	str	r2, [sp, #20]
 8007408:	1aed      	subs	r5, r5, r3
 800740a:	eba8 0803 	sub.w	r8, r8, r3
 800740e:	9b07      	ldr	r3, [sp, #28]
 8007410:	b1eb      	cbz	r3, 800744e <_dtoa_r+0x76e>
 8007412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d067      	beq.n	80074e8 <_dtoa_r+0x808>
 8007418:	b18f      	cbz	r7, 800743e <_dtoa_r+0x75e>
 800741a:	4631      	mov	r1, r6
 800741c:	463a      	mov	r2, r7
 800741e:	4620      	mov	r0, r4
 8007420:	f000 fba0 	bl	8007b64 <__pow5mult>
 8007424:	9a04      	ldr	r2, [sp, #16]
 8007426:	4601      	mov	r1, r0
 8007428:	4606      	mov	r6, r0
 800742a:	4620      	mov	r0, r4
 800742c:	f000 fb03 	bl	8007a36 <__multiply>
 8007430:	9904      	ldr	r1, [sp, #16]
 8007432:	9008      	str	r0, [sp, #32]
 8007434:	4620      	mov	r0, r4
 8007436:	f000 fa55 	bl	80078e4 <_Bfree>
 800743a:	9b08      	ldr	r3, [sp, #32]
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	9b07      	ldr	r3, [sp, #28]
 8007440:	1bda      	subs	r2, r3, r7
 8007442:	d004      	beq.n	800744e <_dtoa_r+0x76e>
 8007444:	9904      	ldr	r1, [sp, #16]
 8007446:	4620      	mov	r0, r4
 8007448:	f000 fb8c 	bl	8007b64 <__pow5mult>
 800744c:	9004      	str	r0, [sp, #16]
 800744e:	2101      	movs	r1, #1
 8007450:	4620      	mov	r0, r4
 8007452:	f000 fae7 	bl	8007a24 <__i2b>
 8007456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007458:	4607      	mov	r7, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 81d0 	beq.w	8007800 <_dtoa_r+0xb20>
 8007460:	461a      	mov	r2, r3
 8007462:	4601      	mov	r1, r0
 8007464:	4620      	mov	r0, r4
 8007466:	f000 fb7d 	bl	8007b64 <__pow5mult>
 800746a:	9b06      	ldr	r3, [sp, #24]
 800746c:	2b01      	cmp	r3, #1
 800746e:	4607      	mov	r7, r0
 8007470:	dc40      	bgt.n	80074f4 <_dtoa_r+0x814>
 8007472:	9b00      	ldr	r3, [sp, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d139      	bne.n	80074ec <_dtoa_r+0x80c>
 8007478:	9b01      	ldr	r3, [sp, #4]
 800747a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800747e:	2b00      	cmp	r3, #0
 8007480:	d136      	bne.n	80074f0 <_dtoa_r+0x810>
 8007482:	9b01      	ldr	r3, [sp, #4]
 8007484:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007488:	0d1b      	lsrs	r3, r3, #20
 800748a:	051b      	lsls	r3, r3, #20
 800748c:	b12b      	cbz	r3, 800749a <_dtoa_r+0x7ba>
 800748e:	9b05      	ldr	r3, [sp, #20]
 8007490:	3301      	adds	r3, #1
 8007492:	9305      	str	r3, [sp, #20]
 8007494:	f108 0801 	add.w	r8, r8, #1
 8007498:	2301      	movs	r3, #1
 800749a:	9307      	str	r3, [sp, #28]
 800749c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d12a      	bne.n	80074f8 <_dtoa_r+0x818>
 80074a2:	2001      	movs	r0, #1
 80074a4:	e030      	b.n	8007508 <_dtoa_r+0x828>
 80074a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074a8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80074ac:	e795      	b.n	80073da <_dtoa_r+0x6fa>
 80074ae:	9b07      	ldr	r3, [sp, #28]
 80074b0:	f109 37ff 	add.w	r7, r9, #4294967295
 80074b4:	42bb      	cmp	r3, r7
 80074b6:	bfbf      	itttt	lt
 80074b8:	9b07      	ldrlt	r3, [sp, #28]
 80074ba:	9707      	strlt	r7, [sp, #28]
 80074bc:	1afa      	sublt	r2, r7, r3
 80074be:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80074c0:	bfbb      	ittet	lt
 80074c2:	189b      	addlt	r3, r3, r2
 80074c4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80074c6:	1bdf      	subge	r7, r3, r7
 80074c8:	2700      	movlt	r7, #0
 80074ca:	f1b9 0f00 	cmp.w	r9, #0
 80074ce:	bfb5      	itete	lt
 80074d0:	9b05      	ldrlt	r3, [sp, #20]
 80074d2:	9d05      	ldrge	r5, [sp, #20]
 80074d4:	eba3 0509 	sublt.w	r5, r3, r9
 80074d8:	464b      	movge	r3, r9
 80074da:	bfb8      	it	lt
 80074dc:	2300      	movlt	r3, #0
 80074de:	e77e      	b.n	80073de <_dtoa_r+0x6fe>
 80074e0:	9f07      	ldr	r7, [sp, #28]
 80074e2:	9d05      	ldr	r5, [sp, #20]
 80074e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80074e6:	e783      	b.n	80073f0 <_dtoa_r+0x710>
 80074e8:	9a07      	ldr	r2, [sp, #28]
 80074ea:	e7ab      	b.n	8007444 <_dtoa_r+0x764>
 80074ec:	2300      	movs	r3, #0
 80074ee:	e7d4      	b.n	800749a <_dtoa_r+0x7ba>
 80074f0:	9b00      	ldr	r3, [sp, #0]
 80074f2:	e7d2      	b.n	800749a <_dtoa_r+0x7ba>
 80074f4:	2300      	movs	r3, #0
 80074f6:	9307      	str	r3, [sp, #28]
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80074fe:	6918      	ldr	r0, [r3, #16]
 8007500:	f000 fa42 	bl	8007988 <__hi0bits>
 8007504:	f1c0 0020 	rsb	r0, r0, #32
 8007508:	4440      	add	r0, r8
 800750a:	f010 001f 	ands.w	r0, r0, #31
 800750e:	d047      	beq.n	80075a0 <_dtoa_r+0x8c0>
 8007510:	f1c0 0320 	rsb	r3, r0, #32
 8007514:	2b04      	cmp	r3, #4
 8007516:	dd3b      	ble.n	8007590 <_dtoa_r+0x8b0>
 8007518:	9b05      	ldr	r3, [sp, #20]
 800751a:	f1c0 001c 	rsb	r0, r0, #28
 800751e:	4403      	add	r3, r0
 8007520:	9305      	str	r3, [sp, #20]
 8007522:	4405      	add	r5, r0
 8007524:	4480      	add	r8, r0
 8007526:	9b05      	ldr	r3, [sp, #20]
 8007528:	2b00      	cmp	r3, #0
 800752a:	dd05      	ble.n	8007538 <_dtoa_r+0x858>
 800752c:	461a      	mov	r2, r3
 800752e:	9904      	ldr	r1, [sp, #16]
 8007530:	4620      	mov	r0, r4
 8007532:	f000 fb65 	bl	8007c00 <__lshift>
 8007536:	9004      	str	r0, [sp, #16]
 8007538:	f1b8 0f00 	cmp.w	r8, #0
 800753c:	dd05      	ble.n	800754a <_dtoa_r+0x86a>
 800753e:	4639      	mov	r1, r7
 8007540:	4642      	mov	r2, r8
 8007542:	4620      	mov	r0, r4
 8007544:	f000 fb5c 	bl	8007c00 <__lshift>
 8007548:	4607      	mov	r7, r0
 800754a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800754c:	b353      	cbz	r3, 80075a4 <_dtoa_r+0x8c4>
 800754e:	4639      	mov	r1, r7
 8007550:	9804      	ldr	r0, [sp, #16]
 8007552:	f000 fba9 	bl	8007ca8 <__mcmp>
 8007556:	2800      	cmp	r0, #0
 8007558:	da24      	bge.n	80075a4 <_dtoa_r+0x8c4>
 800755a:	2300      	movs	r3, #0
 800755c:	220a      	movs	r2, #10
 800755e:	9904      	ldr	r1, [sp, #16]
 8007560:	4620      	mov	r0, r4
 8007562:	f000 f9d6 	bl	8007912 <__multadd>
 8007566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007568:	9004      	str	r0, [sp, #16]
 800756a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800756e:	2b00      	cmp	r3, #0
 8007570:	f000 814d 	beq.w	800780e <_dtoa_r+0xb2e>
 8007574:	2300      	movs	r3, #0
 8007576:	4631      	mov	r1, r6
 8007578:	220a      	movs	r2, #10
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f9c9 	bl	8007912 <__multadd>
 8007580:	9b02      	ldr	r3, [sp, #8]
 8007582:	2b00      	cmp	r3, #0
 8007584:	4606      	mov	r6, r0
 8007586:	dc4f      	bgt.n	8007628 <_dtoa_r+0x948>
 8007588:	9b06      	ldr	r3, [sp, #24]
 800758a:	2b02      	cmp	r3, #2
 800758c:	dd4c      	ble.n	8007628 <_dtoa_r+0x948>
 800758e:	e011      	b.n	80075b4 <_dtoa_r+0x8d4>
 8007590:	d0c9      	beq.n	8007526 <_dtoa_r+0x846>
 8007592:	9a05      	ldr	r2, [sp, #20]
 8007594:	331c      	adds	r3, #28
 8007596:	441a      	add	r2, r3
 8007598:	9205      	str	r2, [sp, #20]
 800759a:	441d      	add	r5, r3
 800759c:	4498      	add	r8, r3
 800759e:	e7c2      	b.n	8007526 <_dtoa_r+0x846>
 80075a0:	4603      	mov	r3, r0
 80075a2:	e7f6      	b.n	8007592 <_dtoa_r+0x8b2>
 80075a4:	f1b9 0f00 	cmp.w	r9, #0
 80075a8:	dc38      	bgt.n	800761c <_dtoa_r+0x93c>
 80075aa:	9b06      	ldr	r3, [sp, #24]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	dd35      	ble.n	800761c <_dtoa_r+0x93c>
 80075b0:	f8cd 9008 	str.w	r9, [sp, #8]
 80075b4:	9b02      	ldr	r3, [sp, #8]
 80075b6:	b963      	cbnz	r3, 80075d2 <_dtoa_r+0x8f2>
 80075b8:	4639      	mov	r1, r7
 80075ba:	2205      	movs	r2, #5
 80075bc:	4620      	mov	r0, r4
 80075be:	f000 f9a8 	bl	8007912 <__multadd>
 80075c2:	4601      	mov	r1, r0
 80075c4:	4607      	mov	r7, r0
 80075c6:	9804      	ldr	r0, [sp, #16]
 80075c8:	f000 fb6e 	bl	8007ca8 <__mcmp>
 80075cc:	2800      	cmp	r0, #0
 80075ce:	f73f adcc 	bgt.w	800716a <_dtoa_r+0x48a>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	465d      	mov	r5, fp
 80075d6:	ea6f 0a03 	mvn.w	sl, r3
 80075da:	f04f 0900 	mov.w	r9, #0
 80075de:	4639      	mov	r1, r7
 80075e0:	4620      	mov	r0, r4
 80075e2:	f000 f97f 	bl	80078e4 <_Bfree>
 80075e6:	2e00      	cmp	r6, #0
 80075e8:	f43f aeb7 	beq.w	800735a <_dtoa_r+0x67a>
 80075ec:	f1b9 0f00 	cmp.w	r9, #0
 80075f0:	d005      	beq.n	80075fe <_dtoa_r+0x91e>
 80075f2:	45b1      	cmp	r9, r6
 80075f4:	d003      	beq.n	80075fe <_dtoa_r+0x91e>
 80075f6:	4649      	mov	r1, r9
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 f973 	bl	80078e4 <_Bfree>
 80075fe:	4631      	mov	r1, r6
 8007600:	4620      	mov	r0, r4
 8007602:	f000 f96f 	bl	80078e4 <_Bfree>
 8007606:	e6a8      	b.n	800735a <_dtoa_r+0x67a>
 8007608:	2700      	movs	r7, #0
 800760a:	463e      	mov	r6, r7
 800760c:	e7e1      	b.n	80075d2 <_dtoa_r+0x8f2>
 800760e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007612:	463e      	mov	r6, r7
 8007614:	e5a9      	b.n	800716a <_dtoa_r+0x48a>
 8007616:	bf00      	nop
 8007618:	40240000 	.word	0x40240000
 800761c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800761e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007622:	2b00      	cmp	r3, #0
 8007624:	f000 80fa 	beq.w	800781c <_dtoa_r+0xb3c>
 8007628:	2d00      	cmp	r5, #0
 800762a:	dd05      	ble.n	8007638 <_dtoa_r+0x958>
 800762c:	4631      	mov	r1, r6
 800762e:	462a      	mov	r2, r5
 8007630:	4620      	mov	r0, r4
 8007632:	f000 fae5 	bl	8007c00 <__lshift>
 8007636:	4606      	mov	r6, r0
 8007638:	9b07      	ldr	r3, [sp, #28]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d04c      	beq.n	80076d8 <_dtoa_r+0x9f8>
 800763e:	6871      	ldr	r1, [r6, #4]
 8007640:	4620      	mov	r0, r4
 8007642:	f000 f91b 	bl	800787c <_Balloc>
 8007646:	6932      	ldr	r2, [r6, #16]
 8007648:	3202      	adds	r2, #2
 800764a:	4605      	mov	r5, r0
 800764c:	0092      	lsls	r2, r2, #2
 800764e:	f106 010c 	add.w	r1, r6, #12
 8007652:	300c      	adds	r0, #12
 8007654:	f7fe fe28 	bl	80062a8 <memcpy>
 8007658:	2201      	movs	r2, #1
 800765a:	4629      	mov	r1, r5
 800765c:	4620      	mov	r0, r4
 800765e:	f000 facf 	bl	8007c00 <__lshift>
 8007662:	9b00      	ldr	r3, [sp, #0]
 8007664:	f8cd b014 	str.w	fp, [sp, #20]
 8007668:	f003 0301 	and.w	r3, r3, #1
 800766c:	46b1      	mov	r9, r6
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	4606      	mov	r6, r0
 8007672:	4639      	mov	r1, r7
 8007674:	9804      	ldr	r0, [sp, #16]
 8007676:	f7ff faa7 	bl	8006bc8 <quorem>
 800767a:	4649      	mov	r1, r9
 800767c:	4605      	mov	r5, r0
 800767e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007682:	9804      	ldr	r0, [sp, #16]
 8007684:	f000 fb10 	bl	8007ca8 <__mcmp>
 8007688:	4632      	mov	r2, r6
 800768a:	9000      	str	r0, [sp, #0]
 800768c:	4639      	mov	r1, r7
 800768e:	4620      	mov	r0, r4
 8007690:	f000 fb24 	bl	8007cdc <__mdiff>
 8007694:	68c3      	ldr	r3, [r0, #12]
 8007696:	4602      	mov	r2, r0
 8007698:	bb03      	cbnz	r3, 80076dc <_dtoa_r+0x9fc>
 800769a:	4601      	mov	r1, r0
 800769c:	9008      	str	r0, [sp, #32]
 800769e:	9804      	ldr	r0, [sp, #16]
 80076a0:	f000 fb02 	bl	8007ca8 <__mcmp>
 80076a4:	9a08      	ldr	r2, [sp, #32]
 80076a6:	4603      	mov	r3, r0
 80076a8:	4611      	mov	r1, r2
 80076aa:	4620      	mov	r0, r4
 80076ac:	9308      	str	r3, [sp, #32]
 80076ae:	f000 f919 	bl	80078e4 <_Bfree>
 80076b2:	9b08      	ldr	r3, [sp, #32]
 80076b4:	b9a3      	cbnz	r3, 80076e0 <_dtoa_r+0xa00>
 80076b6:	9a06      	ldr	r2, [sp, #24]
 80076b8:	b992      	cbnz	r2, 80076e0 <_dtoa_r+0xa00>
 80076ba:	9a07      	ldr	r2, [sp, #28]
 80076bc:	b982      	cbnz	r2, 80076e0 <_dtoa_r+0xa00>
 80076be:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80076c2:	d029      	beq.n	8007718 <_dtoa_r+0xa38>
 80076c4:	9b00      	ldr	r3, [sp, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	dd01      	ble.n	80076ce <_dtoa_r+0x9ee>
 80076ca:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80076ce:	9b05      	ldr	r3, [sp, #20]
 80076d0:	1c5d      	adds	r5, r3, #1
 80076d2:	f883 8000 	strb.w	r8, [r3]
 80076d6:	e782      	b.n	80075de <_dtoa_r+0x8fe>
 80076d8:	4630      	mov	r0, r6
 80076da:	e7c2      	b.n	8007662 <_dtoa_r+0x982>
 80076dc:	2301      	movs	r3, #1
 80076de:	e7e3      	b.n	80076a8 <_dtoa_r+0x9c8>
 80076e0:	9a00      	ldr	r2, [sp, #0]
 80076e2:	2a00      	cmp	r2, #0
 80076e4:	db04      	blt.n	80076f0 <_dtoa_r+0xa10>
 80076e6:	d125      	bne.n	8007734 <_dtoa_r+0xa54>
 80076e8:	9a06      	ldr	r2, [sp, #24]
 80076ea:	bb1a      	cbnz	r2, 8007734 <_dtoa_r+0xa54>
 80076ec:	9a07      	ldr	r2, [sp, #28]
 80076ee:	bb0a      	cbnz	r2, 8007734 <_dtoa_r+0xa54>
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	ddec      	ble.n	80076ce <_dtoa_r+0x9ee>
 80076f4:	2201      	movs	r2, #1
 80076f6:	9904      	ldr	r1, [sp, #16]
 80076f8:	4620      	mov	r0, r4
 80076fa:	f000 fa81 	bl	8007c00 <__lshift>
 80076fe:	4639      	mov	r1, r7
 8007700:	9004      	str	r0, [sp, #16]
 8007702:	f000 fad1 	bl	8007ca8 <__mcmp>
 8007706:	2800      	cmp	r0, #0
 8007708:	dc03      	bgt.n	8007712 <_dtoa_r+0xa32>
 800770a:	d1e0      	bne.n	80076ce <_dtoa_r+0x9ee>
 800770c:	f018 0f01 	tst.w	r8, #1
 8007710:	d0dd      	beq.n	80076ce <_dtoa_r+0x9ee>
 8007712:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007716:	d1d8      	bne.n	80076ca <_dtoa_r+0x9ea>
 8007718:	9b05      	ldr	r3, [sp, #20]
 800771a:	9a05      	ldr	r2, [sp, #20]
 800771c:	1c5d      	adds	r5, r3, #1
 800771e:	2339      	movs	r3, #57	; 0x39
 8007720:	7013      	strb	r3, [r2, #0]
 8007722:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007726:	2b39      	cmp	r3, #57	; 0x39
 8007728:	f105 32ff 	add.w	r2, r5, #4294967295
 800772c:	d04f      	beq.n	80077ce <_dtoa_r+0xaee>
 800772e:	3301      	adds	r3, #1
 8007730:	7013      	strb	r3, [r2, #0]
 8007732:	e754      	b.n	80075de <_dtoa_r+0x8fe>
 8007734:	9a05      	ldr	r2, [sp, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	f102 0501 	add.w	r5, r2, #1
 800773c:	dd06      	ble.n	800774c <_dtoa_r+0xa6c>
 800773e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007742:	d0e9      	beq.n	8007718 <_dtoa_r+0xa38>
 8007744:	f108 0801 	add.w	r8, r8, #1
 8007748:	9b05      	ldr	r3, [sp, #20]
 800774a:	e7c2      	b.n	80076d2 <_dtoa_r+0x9f2>
 800774c:	9a02      	ldr	r2, [sp, #8]
 800774e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007752:	eba5 030b 	sub.w	r3, r5, fp
 8007756:	4293      	cmp	r3, r2
 8007758:	d021      	beq.n	800779e <_dtoa_r+0xabe>
 800775a:	2300      	movs	r3, #0
 800775c:	220a      	movs	r2, #10
 800775e:	9904      	ldr	r1, [sp, #16]
 8007760:	4620      	mov	r0, r4
 8007762:	f000 f8d6 	bl	8007912 <__multadd>
 8007766:	45b1      	cmp	r9, r6
 8007768:	9004      	str	r0, [sp, #16]
 800776a:	f04f 0300 	mov.w	r3, #0
 800776e:	f04f 020a 	mov.w	r2, #10
 8007772:	4649      	mov	r1, r9
 8007774:	4620      	mov	r0, r4
 8007776:	d105      	bne.n	8007784 <_dtoa_r+0xaa4>
 8007778:	f000 f8cb 	bl	8007912 <__multadd>
 800777c:	4681      	mov	r9, r0
 800777e:	4606      	mov	r6, r0
 8007780:	9505      	str	r5, [sp, #20]
 8007782:	e776      	b.n	8007672 <_dtoa_r+0x992>
 8007784:	f000 f8c5 	bl	8007912 <__multadd>
 8007788:	4631      	mov	r1, r6
 800778a:	4681      	mov	r9, r0
 800778c:	2300      	movs	r3, #0
 800778e:	220a      	movs	r2, #10
 8007790:	4620      	mov	r0, r4
 8007792:	f000 f8be 	bl	8007912 <__multadd>
 8007796:	4606      	mov	r6, r0
 8007798:	e7f2      	b.n	8007780 <_dtoa_r+0xaa0>
 800779a:	f04f 0900 	mov.w	r9, #0
 800779e:	2201      	movs	r2, #1
 80077a0:	9904      	ldr	r1, [sp, #16]
 80077a2:	4620      	mov	r0, r4
 80077a4:	f000 fa2c 	bl	8007c00 <__lshift>
 80077a8:	4639      	mov	r1, r7
 80077aa:	9004      	str	r0, [sp, #16]
 80077ac:	f000 fa7c 	bl	8007ca8 <__mcmp>
 80077b0:	2800      	cmp	r0, #0
 80077b2:	dcb6      	bgt.n	8007722 <_dtoa_r+0xa42>
 80077b4:	d102      	bne.n	80077bc <_dtoa_r+0xadc>
 80077b6:	f018 0f01 	tst.w	r8, #1
 80077ba:	d1b2      	bne.n	8007722 <_dtoa_r+0xa42>
 80077bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80077c0:	2b30      	cmp	r3, #48	; 0x30
 80077c2:	f105 32ff 	add.w	r2, r5, #4294967295
 80077c6:	f47f af0a 	bne.w	80075de <_dtoa_r+0x8fe>
 80077ca:	4615      	mov	r5, r2
 80077cc:	e7f6      	b.n	80077bc <_dtoa_r+0xadc>
 80077ce:	4593      	cmp	fp, r2
 80077d0:	d105      	bne.n	80077de <_dtoa_r+0xafe>
 80077d2:	2331      	movs	r3, #49	; 0x31
 80077d4:	f10a 0a01 	add.w	sl, sl, #1
 80077d8:	f88b 3000 	strb.w	r3, [fp]
 80077dc:	e6ff      	b.n	80075de <_dtoa_r+0x8fe>
 80077de:	4615      	mov	r5, r2
 80077e0:	e79f      	b.n	8007722 <_dtoa_r+0xa42>
 80077e2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007848 <_dtoa_r+0xb68>
 80077e6:	e007      	b.n	80077f8 <_dtoa_r+0xb18>
 80077e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80077ea:	f8df b060 	ldr.w	fp, [pc, #96]	; 800784c <_dtoa_r+0xb6c>
 80077ee:	b11b      	cbz	r3, 80077f8 <_dtoa_r+0xb18>
 80077f0:	f10b 0308 	add.w	r3, fp, #8
 80077f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80077f6:	6013      	str	r3, [r2, #0]
 80077f8:	4658      	mov	r0, fp
 80077fa:	b017      	add	sp, #92	; 0x5c
 80077fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	9b06      	ldr	r3, [sp, #24]
 8007802:	2b01      	cmp	r3, #1
 8007804:	f77f ae35 	ble.w	8007472 <_dtoa_r+0x792>
 8007808:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800780a:	9307      	str	r3, [sp, #28]
 800780c:	e649      	b.n	80074a2 <_dtoa_r+0x7c2>
 800780e:	9b02      	ldr	r3, [sp, #8]
 8007810:	2b00      	cmp	r3, #0
 8007812:	dc03      	bgt.n	800781c <_dtoa_r+0xb3c>
 8007814:	9b06      	ldr	r3, [sp, #24]
 8007816:	2b02      	cmp	r3, #2
 8007818:	f73f aecc 	bgt.w	80075b4 <_dtoa_r+0x8d4>
 800781c:	465d      	mov	r5, fp
 800781e:	4639      	mov	r1, r7
 8007820:	9804      	ldr	r0, [sp, #16]
 8007822:	f7ff f9d1 	bl	8006bc8 <quorem>
 8007826:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800782a:	f805 8b01 	strb.w	r8, [r5], #1
 800782e:	9a02      	ldr	r2, [sp, #8]
 8007830:	eba5 030b 	sub.w	r3, r5, fp
 8007834:	429a      	cmp	r2, r3
 8007836:	ddb0      	ble.n	800779a <_dtoa_r+0xaba>
 8007838:	2300      	movs	r3, #0
 800783a:	220a      	movs	r2, #10
 800783c:	9904      	ldr	r1, [sp, #16]
 800783e:	4620      	mov	r0, r4
 8007840:	f000 f867 	bl	8007912 <__multadd>
 8007844:	9004      	str	r0, [sp, #16]
 8007846:	e7ea      	b.n	800781e <_dtoa_r+0xb3e>
 8007848:	08008998 	.word	0x08008998
 800784c:	080089bc 	.word	0x080089bc

08007850 <_localeconv_r>:
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <_localeconv_r+0x14>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	6a18      	ldr	r0, [r3, #32]
 8007856:	4b04      	ldr	r3, [pc, #16]	; (8007868 <_localeconv_r+0x18>)
 8007858:	2800      	cmp	r0, #0
 800785a:	bf08      	it	eq
 800785c:	4618      	moveq	r0, r3
 800785e:	30f0      	adds	r0, #240	; 0xf0
 8007860:	4770      	bx	lr
 8007862:	bf00      	nop
 8007864:	2000001c 	.word	0x2000001c
 8007868:	20000080 	.word	0x20000080

0800786c <malloc>:
 800786c:	4b02      	ldr	r3, [pc, #8]	; (8007878 <malloc+0xc>)
 800786e:	4601      	mov	r1, r0
 8007870:	6818      	ldr	r0, [r3, #0]
 8007872:	f000 bb3b 	b.w	8007eec <_malloc_r>
 8007876:	bf00      	nop
 8007878:	2000001c 	.word	0x2000001c

0800787c <_Balloc>:
 800787c:	b570      	push	{r4, r5, r6, lr}
 800787e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007880:	4604      	mov	r4, r0
 8007882:	460e      	mov	r6, r1
 8007884:	b93d      	cbnz	r5, 8007896 <_Balloc+0x1a>
 8007886:	2010      	movs	r0, #16
 8007888:	f7ff fff0 	bl	800786c <malloc>
 800788c:	6260      	str	r0, [r4, #36]	; 0x24
 800788e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007892:	6005      	str	r5, [r0, #0]
 8007894:	60c5      	str	r5, [r0, #12]
 8007896:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007898:	68eb      	ldr	r3, [r5, #12]
 800789a:	b183      	cbz	r3, 80078be <_Balloc+0x42>
 800789c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80078a4:	b9b8      	cbnz	r0, 80078d6 <_Balloc+0x5a>
 80078a6:	2101      	movs	r1, #1
 80078a8:	fa01 f506 	lsl.w	r5, r1, r6
 80078ac:	1d6a      	adds	r2, r5, #5
 80078ae:	0092      	lsls	r2, r2, #2
 80078b0:	4620      	mov	r0, r4
 80078b2:	f000 fabf 	bl	8007e34 <_calloc_r>
 80078b6:	b160      	cbz	r0, 80078d2 <_Balloc+0x56>
 80078b8:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80078bc:	e00e      	b.n	80078dc <_Balloc+0x60>
 80078be:	2221      	movs	r2, #33	; 0x21
 80078c0:	2104      	movs	r1, #4
 80078c2:	4620      	mov	r0, r4
 80078c4:	f000 fab6 	bl	8007e34 <_calloc_r>
 80078c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80078ca:	60e8      	str	r0, [r5, #12]
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d1e4      	bne.n	800789c <_Balloc+0x20>
 80078d2:	2000      	movs	r0, #0
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	6802      	ldr	r2, [r0, #0]
 80078d8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80078dc:	2300      	movs	r3, #0
 80078de:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80078e2:	e7f7      	b.n	80078d4 <_Balloc+0x58>

080078e4 <_Bfree>:
 80078e4:	b570      	push	{r4, r5, r6, lr}
 80078e6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80078e8:	4606      	mov	r6, r0
 80078ea:	460d      	mov	r5, r1
 80078ec:	b93c      	cbnz	r4, 80078fe <_Bfree+0x1a>
 80078ee:	2010      	movs	r0, #16
 80078f0:	f7ff ffbc 	bl	800786c <malloc>
 80078f4:	6270      	str	r0, [r6, #36]	; 0x24
 80078f6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80078fa:	6004      	str	r4, [r0, #0]
 80078fc:	60c4      	str	r4, [r0, #12]
 80078fe:	b13d      	cbz	r5, 8007910 <_Bfree+0x2c>
 8007900:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007902:	686a      	ldr	r2, [r5, #4]
 8007904:	68db      	ldr	r3, [r3, #12]
 8007906:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800790a:	6029      	str	r1, [r5, #0]
 800790c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007910:	bd70      	pop	{r4, r5, r6, pc}

08007912 <__multadd>:
 8007912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007916:	690d      	ldr	r5, [r1, #16]
 8007918:	461f      	mov	r7, r3
 800791a:	4606      	mov	r6, r0
 800791c:	460c      	mov	r4, r1
 800791e:	f101 0c14 	add.w	ip, r1, #20
 8007922:	2300      	movs	r3, #0
 8007924:	f8dc 0000 	ldr.w	r0, [ip]
 8007928:	b281      	uxth	r1, r0
 800792a:	fb02 7101 	mla	r1, r2, r1, r7
 800792e:	0c0f      	lsrs	r7, r1, #16
 8007930:	0c00      	lsrs	r0, r0, #16
 8007932:	fb02 7000 	mla	r0, r2, r0, r7
 8007936:	b289      	uxth	r1, r1
 8007938:	3301      	adds	r3, #1
 800793a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800793e:	429d      	cmp	r5, r3
 8007940:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007944:	f84c 1b04 	str.w	r1, [ip], #4
 8007948:	dcec      	bgt.n	8007924 <__multadd+0x12>
 800794a:	b1d7      	cbz	r7, 8007982 <__multadd+0x70>
 800794c:	68a3      	ldr	r3, [r4, #8]
 800794e:	42ab      	cmp	r3, r5
 8007950:	dc12      	bgt.n	8007978 <__multadd+0x66>
 8007952:	6861      	ldr	r1, [r4, #4]
 8007954:	4630      	mov	r0, r6
 8007956:	3101      	adds	r1, #1
 8007958:	f7ff ff90 	bl	800787c <_Balloc>
 800795c:	6922      	ldr	r2, [r4, #16]
 800795e:	3202      	adds	r2, #2
 8007960:	f104 010c 	add.w	r1, r4, #12
 8007964:	4680      	mov	r8, r0
 8007966:	0092      	lsls	r2, r2, #2
 8007968:	300c      	adds	r0, #12
 800796a:	f7fe fc9d 	bl	80062a8 <memcpy>
 800796e:	4621      	mov	r1, r4
 8007970:	4630      	mov	r0, r6
 8007972:	f7ff ffb7 	bl	80078e4 <_Bfree>
 8007976:	4644      	mov	r4, r8
 8007978:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800797c:	3501      	adds	r5, #1
 800797e:	615f      	str	r7, [r3, #20]
 8007980:	6125      	str	r5, [r4, #16]
 8007982:	4620      	mov	r0, r4
 8007984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007988 <__hi0bits>:
 8007988:	0c02      	lsrs	r2, r0, #16
 800798a:	0412      	lsls	r2, r2, #16
 800798c:	4603      	mov	r3, r0
 800798e:	b9b2      	cbnz	r2, 80079be <__hi0bits+0x36>
 8007990:	0403      	lsls	r3, r0, #16
 8007992:	2010      	movs	r0, #16
 8007994:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007998:	bf04      	itt	eq
 800799a:	021b      	lsleq	r3, r3, #8
 800799c:	3008      	addeq	r0, #8
 800799e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80079a2:	bf04      	itt	eq
 80079a4:	011b      	lsleq	r3, r3, #4
 80079a6:	3004      	addeq	r0, #4
 80079a8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80079ac:	bf04      	itt	eq
 80079ae:	009b      	lsleq	r3, r3, #2
 80079b0:	3002      	addeq	r0, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	db06      	blt.n	80079c4 <__hi0bits+0x3c>
 80079b6:	005b      	lsls	r3, r3, #1
 80079b8:	d503      	bpl.n	80079c2 <__hi0bits+0x3a>
 80079ba:	3001      	adds	r0, #1
 80079bc:	4770      	bx	lr
 80079be:	2000      	movs	r0, #0
 80079c0:	e7e8      	b.n	8007994 <__hi0bits+0xc>
 80079c2:	2020      	movs	r0, #32
 80079c4:	4770      	bx	lr

080079c6 <__lo0bits>:
 80079c6:	6803      	ldr	r3, [r0, #0]
 80079c8:	f013 0207 	ands.w	r2, r3, #7
 80079cc:	4601      	mov	r1, r0
 80079ce:	d00b      	beq.n	80079e8 <__lo0bits+0x22>
 80079d0:	07da      	lsls	r2, r3, #31
 80079d2:	d423      	bmi.n	8007a1c <__lo0bits+0x56>
 80079d4:	0798      	lsls	r0, r3, #30
 80079d6:	bf49      	itett	mi
 80079d8:	085b      	lsrmi	r3, r3, #1
 80079da:	089b      	lsrpl	r3, r3, #2
 80079dc:	2001      	movmi	r0, #1
 80079de:	600b      	strmi	r3, [r1, #0]
 80079e0:	bf5c      	itt	pl
 80079e2:	600b      	strpl	r3, [r1, #0]
 80079e4:	2002      	movpl	r0, #2
 80079e6:	4770      	bx	lr
 80079e8:	b298      	uxth	r0, r3
 80079ea:	b9a8      	cbnz	r0, 8007a18 <__lo0bits+0x52>
 80079ec:	0c1b      	lsrs	r3, r3, #16
 80079ee:	2010      	movs	r0, #16
 80079f0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80079f4:	bf04      	itt	eq
 80079f6:	0a1b      	lsreq	r3, r3, #8
 80079f8:	3008      	addeq	r0, #8
 80079fa:	071a      	lsls	r2, r3, #28
 80079fc:	bf04      	itt	eq
 80079fe:	091b      	lsreq	r3, r3, #4
 8007a00:	3004      	addeq	r0, #4
 8007a02:	079a      	lsls	r2, r3, #30
 8007a04:	bf04      	itt	eq
 8007a06:	089b      	lsreq	r3, r3, #2
 8007a08:	3002      	addeq	r0, #2
 8007a0a:	07da      	lsls	r2, r3, #31
 8007a0c:	d402      	bmi.n	8007a14 <__lo0bits+0x4e>
 8007a0e:	085b      	lsrs	r3, r3, #1
 8007a10:	d006      	beq.n	8007a20 <__lo0bits+0x5a>
 8007a12:	3001      	adds	r0, #1
 8007a14:	600b      	str	r3, [r1, #0]
 8007a16:	4770      	bx	lr
 8007a18:	4610      	mov	r0, r2
 8007a1a:	e7e9      	b.n	80079f0 <__lo0bits+0x2a>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	4770      	bx	lr
 8007a20:	2020      	movs	r0, #32
 8007a22:	4770      	bx	lr

08007a24 <__i2b>:
 8007a24:	b510      	push	{r4, lr}
 8007a26:	460c      	mov	r4, r1
 8007a28:	2101      	movs	r1, #1
 8007a2a:	f7ff ff27 	bl	800787c <_Balloc>
 8007a2e:	2201      	movs	r2, #1
 8007a30:	6144      	str	r4, [r0, #20]
 8007a32:	6102      	str	r2, [r0, #16]
 8007a34:	bd10      	pop	{r4, pc}

08007a36 <__multiply>:
 8007a36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a3a:	4614      	mov	r4, r2
 8007a3c:	690a      	ldr	r2, [r1, #16]
 8007a3e:	6923      	ldr	r3, [r4, #16]
 8007a40:	429a      	cmp	r2, r3
 8007a42:	bfb8      	it	lt
 8007a44:	460b      	movlt	r3, r1
 8007a46:	4688      	mov	r8, r1
 8007a48:	bfbc      	itt	lt
 8007a4a:	46a0      	movlt	r8, r4
 8007a4c:	461c      	movlt	r4, r3
 8007a4e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a52:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007a56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007a5a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a5e:	eb07 0609 	add.w	r6, r7, r9
 8007a62:	42b3      	cmp	r3, r6
 8007a64:	bfb8      	it	lt
 8007a66:	3101      	addlt	r1, #1
 8007a68:	f7ff ff08 	bl	800787c <_Balloc>
 8007a6c:	f100 0514 	add.w	r5, r0, #20
 8007a70:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8007a74:	462b      	mov	r3, r5
 8007a76:	2200      	movs	r2, #0
 8007a78:	4573      	cmp	r3, lr
 8007a7a:	d316      	bcc.n	8007aaa <__multiply+0x74>
 8007a7c:	f104 0214 	add.w	r2, r4, #20
 8007a80:	f108 0114 	add.w	r1, r8, #20
 8007a84:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8007a88:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8007a8c:	9300      	str	r3, [sp, #0]
 8007a8e:	9b00      	ldr	r3, [sp, #0]
 8007a90:	9201      	str	r2, [sp, #4]
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d80c      	bhi.n	8007ab0 <__multiply+0x7a>
 8007a96:	2e00      	cmp	r6, #0
 8007a98:	dd03      	ble.n	8007aa2 <__multiply+0x6c>
 8007a9a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d05d      	beq.n	8007b5e <__multiply+0x128>
 8007aa2:	6106      	str	r6, [r0, #16]
 8007aa4:	b003      	add	sp, #12
 8007aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aaa:	f843 2b04 	str.w	r2, [r3], #4
 8007aae:	e7e3      	b.n	8007a78 <__multiply+0x42>
 8007ab0:	f8b2 b000 	ldrh.w	fp, [r2]
 8007ab4:	f1bb 0f00 	cmp.w	fp, #0
 8007ab8:	d023      	beq.n	8007b02 <__multiply+0xcc>
 8007aba:	4689      	mov	r9, r1
 8007abc:	46ac      	mov	ip, r5
 8007abe:	f04f 0800 	mov.w	r8, #0
 8007ac2:	f859 4b04 	ldr.w	r4, [r9], #4
 8007ac6:	f8dc a000 	ldr.w	sl, [ip]
 8007aca:	b2a3      	uxth	r3, r4
 8007acc:	fa1f fa8a 	uxth.w	sl, sl
 8007ad0:	fb0b a303 	mla	r3, fp, r3, sl
 8007ad4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007ad8:	f8dc 4000 	ldr.w	r4, [ip]
 8007adc:	4443      	add	r3, r8
 8007ade:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007ae2:	fb0b 840a 	mla	r4, fp, sl, r8
 8007ae6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8007aea:	46e2      	mov	sl, ip
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007af2:	454f      	cmp	r7, r9
 8007af4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007af8:	f84a 3b04 	str.w	r3, [sl], #4
 8007afc:	d82b      	bhi.n	8007b56 <__multiply+0x120>
 8007afe:	f8cc 8004 	str.w	r8, [ip, #4]
 8007b02:	9b01      	ldr	r3, [sp, #4]
 8007b04:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8007b08:	3204      	adds	r2, #4
 8007b0a:	f1ba 0f00 	cmp.w	sl, #0
 8007b0e:	d020      	beq.n	8007b52 <__multiply+0x11c>
 8007b10:	682b      	ldr	r3, [r5, #0]
 8007b12:	4689      	mov	r9, r1
 8007b14:	46a8      	mov	r8, r5
 8007b16:	f04f 0b00 	mov.w	fp, #0
 8007b1a:	f8b9 c000 	ldrh.w	ip, [r9]
 8007b1e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007b22:	fb0a 440c 	mla	r4, sl, ip, r4
 8007b26:	445c      	add	r4, fp
 8007b28:	46c4      	mov	ip, r8
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007b30:	f84c 3b04 	str.w	r3, [ip], #4
 8007b34:	f859 3b04 	ldr.w	r3, [r9], #4
 8007b38:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8007b3c:	0c1b      	lsrs	r3, r3, #16
 8007b3e:	fb0a b303 	mla	r3, sl, r3, fp
 8007b42:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007b46:	454f      	cmp	r7, r9
 8007b48:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8007b4c:	d805      	bhi.n	8007b5a <__multiply+0x124>
 8007b4e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007b52:	3504      	adds	r5, #4
 8007b54:	e79b      	b.n	8007a8e <__multiply+0x58>
 8007b56:	46d4      	mov	ip, sl
 8007b58:	e7b3      	b.n	8007ac2 <__multiply+0x8c>
 8007b5a:	46e0      	mov	r8, ip
 8007b5c:	e7dd      	b.n	8007b1a <__multiply+0xe4>
 8007b5e:	3e01      	subs	r6, #1
 8007b60:	e799      	b.n	8007a96 <__multiply+0x60>
	...

08007b64 <__pow5mult>:
 8007b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b68:	4615      	mov	r5, r2
 8007b6a:	f012 0203 	ands.w	r2, r2, #3
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	d007      	beq.n	8007b84 <__pow5mult+0x20>
 8007b74:	3a01      	subs	r2, #1
 8007b76:	4c21      	ldr	r4, [pc, #132]	; (8007bfc <__pow5mult+0x98>)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b7e:	f7ff fec8 	bl	8007912 <__multadd>
 8007b82:	4607      	mov	r7, r0
 8007b84:	10ad      	asrs	r5, r5, #2
 8007b86:	d035      	beq.n	8007bf4 <__pow5mult+0x90>
 8007b88:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007b8a:	b93c      	cbnz	r4, 8007b9c <__pow5mult+0x38>
 8007b8c:	2010      	movs	r0, #16
 8007b8e:	f7ff fe6d 	bl	800786c <malloc>
 8007b92:	6270      	str	r0, [r6, #36]	; 0x24
 8007b94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007b98:	6004      	str	r4, [r0, #0]
 8007b9a:	60c4      	str	r4, [r0, #12]
 8007b9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ba0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ba4:	b94c      	cbnz	r4, 8007bba <__pow5mult+0x56>
 8007ba6:	f240 2171 	movw	r1, #625	; 0x271
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ff3a 	bl	8007a24 <__i2b>
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	07eb      	lsls	r3, r5, #31
 8007bc0:	d50a      	bpl.n	8007bd8 <__pow5mult+0x74>
 8007bc2:	4639      	mov	r1, r7
 8007bc4:	4622      	mov	r2, r4
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ff35 	bl	8007a36 <__multiply>
 8007bcc:	4639      	mov	r1, r7
 8007bce:	4681      	mov	r9, r0
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f7ff fe87 	bl	80078e4 <_Bfree>
 8007bd6:	464f      	mov	r7, r9
 8007bd8:	106d      	asrs	r5, r5, #1
 8007bda:	d00b      	beq.n	8007bf4 <__pow5mult+0x90>
 8007bdc:	6820      	ldr	r0, [r4, #0]
 8007bde:	b938      	cbnz	r0, 8007bf0 <__pow5mult+0x8c>
 8007be0:	4622      	mov	r2, r4
 8007be2:	4621      	mov	r1, r4
 8007be4:	4630      	mov	r0, r6
 8007be6:	f7ff ff26 	bl	8007a36 <__multiply>
 8007bea:	6020      	str	r0, [r4, #0]
 8007bec:	f8c0 8000 	str.w	r8, [r0]
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e7e4      	b.n	8007bbe <__pow5mult+0x5a>
 8007bf4:	4638      	mov	r0, r7
 8007bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08008ac0 	.word	0x08008ac0

08007c00 <__lshift>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	460c      	mov	r4, r1
 8007c06:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c0a:	6923      	ldr	r3, [r4, #16]
 8007c0c:	6849      	ldr	r1, [r1, #4]
 8007c0e:	eb0a 0903 	add.w	r9, sl, r3
 8007c12:	68a3      	ldr	r3, [r4, #8]
 8007c14:	4607      	mov	r7, r0
 8007c16:	4616      	mov	r6, r2
 8007c18:	f109 0501 	add.w	r5, r9, #1
 8007c1c:	42ab      	cmp	r3, r5
 8007c1e:	db32      	blt.n	8007c86 <__lshift+0x86>
 8007c20:	4638      	mov	r0, r7
 8007c22:	f7ff fe2b 	bl	800787c <_Balloc>
 8007c26:	2300      	movs	r3, #0
 8007c28:	4680      	mov	r8, r0
 8007c2a:	f100 0114 	add.w	r1, r0, #20
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4553      	cmp	r3, sl
 8007c32:	db2b      	blt.n	8007c8c <__lshift+0x8c>
 8007c34:	6920      	ldr	r0, [r4, #16]
 8007c36:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c3a:	f104 0314 	add.w	r3, r4, #20
 8007c3e:	f016 021f 	ands.w	r2, r6, #31
 8007c42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c46:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c4a:	d025      	beq.n	8007c98 <__lshift+0x98>
 8007c4c:	f1c2 0e20 	rsb	lr, r2, #32
 8007c50:	2000      	movs	r0, #0
 8007c52:	681e      	ldr	r6, [r3, #0]
 8007c54:	468a      	mov	sl, r1
 8007c56:	4096      	lsls	r6, r2
 8007c58:	4330      	orrs	r0, r6
 8007c5a:	f84a 0b04 	str.w	r0, [sl], #4
 8007c5e:	f853 0b04 	ldr.w	r0, [r3], #4
 8007c62:	459c      	cmp	ip, r3
 8007c64:	fa20 f00e 	lsr.w	r0, r0, lr
 8007c68:	d814      	bhi.n	8007c94 <__lshift+0x94>
 8007c6a:	6048      	str	r0, [r1, #4]
 8007c6c:	b108      	cbz	r0, 8007c72 <__lshift+0x72>
 8007c6e:	f109 0502 	add.w	r5, r9, #2
 8007c72:	3d01      	subs	r5, #1
 8007c74:	4638      	mov	r0, r7
 8007c76:	f8c8 5010 	str.w	r5, [r8, #16]
 8007c7a:	4621      	mov	r1, r4
 8007c7c:	f7ff fe32 	bl	80078e4 <_Bfree>
 8007c80:	4640      	mov	r0, r8
 8007c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c86:	3101      	adds	r1, #1
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	e7c7      	b.n	8007c1c <__lshift+0x1c>
 8007c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007c90:	3301      	adds	r3, #1
 8007c92:	e7cd      	b.n	8007c30 <__lshift+0x30>
 8007c94:	4651      	mov	r1, sl
 8007c96:	e7dc      	b.n	8007c52 <__lshift+0x52>
 8007c98:	3904      	subs	r1, #4
 8007c9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ca2:	459c      	cmp	ip, r3
 8007ca4:	d8f9      	bhi.n	8007c9a <__lshift+0x9a>
 8007ca6:	e7e4      	b.n	8007c72 <__lshift+0x72>

08007ca8 <__mcmp>:
 8007ca8:	6903      	ldr	r3, [r0, #16]
 8007caa:	690a      	ldr	r2, [r1, #16]
 8007cac:	1a9b      	subs	r3, r3, r2
 8007cae:	b530      	push	{r4, r5, lr}
 8007cb0:	d10c      	bne.n	8007ccc <__mcmp+0x24>
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	3014      	adds	r0, #20
 8007cb6:	3114      	adds	r1, #20
 8007cb8:	1884      	adds	r4, r0, r2
 8007cba:	4411      	add	r1, r2
 8007cbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007cc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007cc4:	4295      	cmp	r5, r2
 8007cc6:	d003      	beq.n	8007cd0 <__mcmp+0x28>
 8007cc8:	d305      	bcc.n	8007cd6 <__mcmp+0x2e>
 8007cca:	2301      	movs	r3, #1
 8007ccc:	4618      	mov	r0, r3
 8007cce:	bd30      	pop	{r4, r5, pc}
 8007cd0:	42a0      	cmp	r0, r4
 8007cd2:	d3f3      	bcc.n	8007cbc <__mcmp+0x14>
 8007cd4:	e7fa      	b.n	8007ccc <__mcmp+0x24>
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	e7f7      	b.n	8007ccc <__mcmp+0x24>

08007cdc <__mdiff>:
 8007cdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	460d      	mov	r5, r1
 8007ce2:	4607      	mov	r7, r0
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	4614      	mov	r4, r2
 8007cea:	f7ff ffdd 	bl	8007ca8 <__mcmp>
 8007cee:	1e06      	subs	r6, r0, #0
 8007cf0:	d108      	bne.n	8007d04 <__mdiff+0x28>
 8007cf2:	4631      	mov	r1, r6
 8007cf4:	4638      	mov	r0, r7
 8007cf6:	f7ff fdc1 	bl	800787c <_Balloc>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d04:	bfa4      	itt	ge
 8007d06:	4623      	movge	r3, r4
 8007d08:	462c      	movge	r4, r5
 8007d0a:	4638      	mov	r0, r7
 8007d0c:	6861      	ldr	r1, [r4, #4]
 8007d0e:	bfa6      	itte	ge
 8007d10:	461d      	movge	r5, r3
 8007d12:	2600      	movge	r6, #0
 8007d14:	2601      	movlt	r6, #1
 8007d16:	f7ff fdb1 	bl	800787c <_Balloc>
 8007d1a:	692b      	ldr	r3, [r5, #16]
 8007d1c:	60c6      	str	r6, [r0, #12]
 8007d1e:	6926      	ldr	r6, [r4, #16]
 8007d20:	f105 0914 	add.w	r9, r5, #20
 8007d24:	f104 0214 	add.w	r2, r4, #20
 8007d28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007d2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007d30:	f100 0514 	add.w	r5, r0, #20
 8007d34:	f04f 0e00 	mov.w	lr, #0
 8007d38:	f852 ab04 	ldr.w	sl, [r2], #4
 8007d3c:	f859 4b04 	ldr.w	r4, [r9], #4
 8007d40:	fa1e f18a 	uxtah	r1, lr, sl
 8007d44:	b2a3      	uxth	r3, r4
 8007d46:	1ac9      	subs	r1, r1, r3
 8007d48:	0c23      	lsrs	r3, r4, #16
 8007d4a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8007d4e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007d52:	b289      	uxth	r1, r1
 8007d54:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007d58:	45c8      	cmp	r8, r9
 8007d5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8007d5e:	4694      	mov	ip, r2
 8007d60:	f845 3b04 	str.w	r3, [r5], #4
 8007d64:	d8e8      	bhi.n	8007d38 <__mdiff+0x5c>
 8007d66:	45bc      	cmp	ip, r7
 8007d68:	d304      	bcc.n	8007d74 <__mdiff+0x98>
 8007d6a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8007d6e:	b183      	cbz	r3, 8007d92 <__mdiff+0xb6>
 8007d70:	6106      	str	r6, [r0, #16]
 8007d72:	e7c5      	b.n	8007d00 <__mdiff+0x24>
 8007d74:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007d78:	fa1e f381 	uxtah	r3, lr, r1
 8007d7c:	141a      	asrs	r2, r3, #16
 8007d7e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d82:	b29b      	uxth	r3, r3
 8007d84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d88:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8007d8c:	f845 3b04 	str.w	r3, [r5], #4
 8007d90:	e7e9      	b.n	8007d66 <__mdiff+0x8a>
 8007d92:	3e01      	subs	r6, #1
 8007d94:	e7e9      	b.n	8007d6a <__mdiff+0x8e>

08007d96 <__d2b>:
 8007d96:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d9a:	460e      	mov	r6, r1
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	ec59 8b10 	vmov	r8, r9, d0
 8007da2:	4615      	mov	r5, r2
 8007da4:	f7ff fd6a 	bl	800787c <_Balloc>
 8007da8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007dac:	4607      	mov	r7, r0
 8007dae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007db2:	bb34      	cbnz	r4, 8007e02 <__d2b+0x6c>
 8007db4:	9301      	str	r3, [sp, #4]
 8007db6:	f1b8 0300 	subs.w	r3, r8, #0
 8007dba:	d027      	beq.n	8007e0c <__d2b+0x76>
 8007dbc:	a802      	add	r0, sp, #8
 8007dbe:	f840 3d08 	str.w	r3, [r0, #-8]!
 8007dc2:	f7ff fe00 	bl	80079c6 <__lo0bits>
 8007dc6:	9900      	ldr	r1, [sp, #0]
 8007dc8:	b1f0      	cbz	r0, 8007e08 <__d2b+0x72>
 8007dca:	9a01      	ldr	r2, [sp, #4]
 8007dcc:	f1c0 0320 	rsb	r3, r0, #32
 8007dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd4:	430b      	orrs	r3, r1
 8007dd6:	40c2      	lsrs	r2, r0
 8007dd8:	617b      	str	r3, [r7, #20]
 8007dda:	9201      	str	r2, [sp, #4]
 8007ddc:	9b01      	ldr	r3, [sp, #4]
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	bf14      	ite	ne
 8007de4:	2102      	movne	r1, #2
 8007de6:	2101      	moveq	r1, #1
 8007de8:	6139      	str	r1, [r7, #16]
 8007dea:	b1c4      	cbz	r4, 8007e1e <__d2b+0x88>
 8007dec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007df0:	4404      	add	r4, r0
 8007df2:	6034      	str	r4, [r6, #0]
 8007df4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007df8:	6028      	str	r0, [r5, #0]
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	b003      	add	sp, #12
 8007dfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e06:	e7d5      	b.n	8007db4 <__d2b+0x1e>
 8007e08:	6179      	str	r1, [r7, #20]
 8007e0a:	e7e7      	b.n	8007ddc <__d2b+0x46>
 8007e0c:	a801      	add	r0, sp, #4
 8007e0e:	f7ff fdda 	bl	80079c6 <__lo0bits>
 8007e12:	9b01      	ldr	r3, [sp, #4]
 8007e14:	617b      	str	r3, [r7, #20]
 8007e16:	2101      	movs	r1, #1
 8007e18:	6139      	str	r1, [r7, #16]
 8007e1a:	3020      	adds	r0, #32
 8007e1c:	e7e5      	b.n	8007dea <__d2b+0x54>
 8007e1e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007e22:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007e26:	6030      	str	r0, [r6, #0]
 8007e28:	6918      	ldr	r0, [r3, #16]
 8007e2a:	f7ff fdad 	bl	8007988 <__hi0bits>
 8007e2e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007e32:	e7e1      	b.n	8007df8 <__d2b+0x62>

08007e34 <_calloc_r>:
 8007e34:	b538      	push	{r3, r4, r5, lr}
 8007e36:	fb02 f401 	mul.w	r4, r2, r1
 8007e3a:	4621      	mov	r1, r4
 8007e3c:	f000 f856 	bl	8007eec <_malloc_r>
 8007e40:	4605      	mov	r5, r0
 8007e42:	b118      	cbz	r0, 8007e4c <_calloc_r+0x18>
 8007e44:	4622      	mov	r2, r4
 8007e46:	2100      	movs	r1, #0
 8007e48:	f7fe fa39 	bl	80062be <memset>
 8007e4c:	4628      	mov	r0, r5
 8007e4e:	bd38      	pop	{r3, r4, r5, pc}

08007e50 <_free_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4605      	mov	r5, r0
 8007e54:	2900      	cmp	r1, #0
 8007e56:	d045      	beq.n	8007ee4 <_free_r+0x94>
 8007e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5c:	1f0c      	subs	r4, r1, #4
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	bfb8      	it	lt
 8007e62:	18e4      	addlt	r4, r4, r3
 8007e64:	f000 fa29 	bl	80082ba <__malloc_lock>
 8007e68:	4a1f      	ldr	r2, [pc, #124]	; (8007ee8 <_free_r+0x98>)
 8007e6a:	6813      	ldr	r3, [r2, #0]
 8007e6c:	4610      	mov	r0, r2
 8007e6e:	b933      	cbnz	r3, 8007e7e <_free_r+0x2e>
 8007e70:	6063      	str	r3, [r4, #4]
 8007e72:	6014      	str	r4, [r2, #0]
 8007e74:	4628      	mov	r0, r5
 8007e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e7a:	f000 ba1f 	b.w	80082bc <__malloc_unlock>
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	d90c      	bls.n	8007e9c <_free_r+0x4c>
 8007e82:	6821      	ldr	r1, [r4, #0]
 8007e84:	1862      	adds	r2, r4, r1
 8007e86:	4293      	cmp	r3, r2
 8007e88:	bf04      	itt	eq
 8007e8a:	681a      	ldreq	r2, [r3, #0]
 8007e8c:	685b      	ldreq	r3, [r3, #4]
 8007e8e:	6063      	str	r3, [r4, #4]
 8007e90:	bf04      	itt	eq
 8007e92:	1852      	addeq	r2, r2, r1
 8007e94:	6022      	streq	r2, [r4, #0]
 8007e96:	6004      	str	r4, [r0, #0]
 8007e98:	e7ec      	b.n	8007e74 <_free_r+0x24>
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	b10a      	cbz	r2, 8007ea4 <_free_r+0x54>
 8007ea0:	42a2      	cmp	r2, r4
 8007ea2:	d9fa      	bls.n	8007e9a <_free_r+0x4a>
 8007ea4:	6819      	ldr	r1, [r3, #0]
 8007ea6:	1858      	adds	r0, r3, r1
 8007ea8:	42a0      	cmp	r0, r4
 8007eaa:	d10b      	bne.n	8007ec4 <_free_r+0x74>
 8007eac:	6820      	ldr	r0, [r4, #0]
 8007eae:	4401      	add	r1, r0
 8007eb0:	1858      	adds	r0, r3, r1
 8007eb2:	4282      	cmp	r2, r0
 8007eb4:	6019      	str	r1, [r3, #0]
 8007eb6:	d1dd      	bne.n	8007e74 <_free_r+0x24>
 8007eb8:	6810      	ldr	r0, [r2, #0]
 8007eba:	6852      	ldr	r2, [r2, #4]
 8007ebc:	605a      	str	r2, [r3, #4]
 8007ebe:	4401      	add	r1, r0
 8007ec0:	6019      	str	r1, [r3, #0]
 8007ec2:	e7d7      	b.n	8007e74 <_free_r+0x24>
 8007ec4:	d902      	bls.n	8007ecc <_free_r+0x7c>
 8007ec6:	230c      	movs	r3, #12
 8007ec8:	602b      	str	r3, [r5, #0]
 8007eca:	e7d3      	b.n	8007e74 <_free_r+0x24>
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	1821      	adds	r1, r4, r0
 8007ed0:	428a      	cmp	r2, r1
 8007ed2:	bf04      	itt	eq
 8007ed4:	6811      	ldreq	r1, [r2, #0]
 8007ed6:	6852      	ldreq	r2, [r2, #4]
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	bf04      	itt	eq
 8007edc:	1809      	addeq	r1, r1, r0
 8007ede:	6021      	streq	r1, [r4, #0]
 8007ee0:	605c      	str	r4, [r3, #4]
 8007ee2:	e7c7      	b.n	8007e74 <_free_r+0x24>
 8007ee4:	bd38      	pop	{r3, r4, r5, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000310 	.word	0x20000310

08007eec <_malloc_r>:
 8007eec:	b570      	push	{r4, r5, r6, lr}
 8007eee:	1ccd      	adds	r5, r1, #3
 8007ef0:	f025 0503 	bic.w	r5, r5, #3
 8007ef4:	3508      	adds	r5, #8
 8007ef6:	2d0c      	cmp	r5, #12
 8007ef8:	bf38      	it	cc
 8007efa:	250c      	movcc	r5, #12
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	4606      	mov	r6, r0
 8007f00:	db01      	blt.n	8007f06 <_malloc_r+0x1a>
 8007f02:	42a9      	cmp	r1, r5
 8007f04:	d903      	bls.n	8007f0e <_malloc_r+0x22>
 8007f06:	230c      	movs	r3, #12
 8007f08:	6033      	str	r3, [r6, #0]
 8007f0a:	2000      	movs	r0, #0
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}
 8007f0e:	f000 f9d4 	bl	80082ba <__malloc_lock>
 8007f12:	4a21      	ldr	r2, [pc, #132]	; (8007f98 <_malloc_r+0xac>)
 8007f14:	6814      	ldr	r4, [r2, #0]
 8007f16:	4621      	mov	r1, r4
 8007f18:	b991      	cbnz	r1, 8007f40 <_malloc_r+0x54>
 8007f1a:	4c20      	ldr	r4, [pc, #128]	; (8007f9c <_malloc_r+0xb0>)
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	b91b      	cbnz	r3, 8007f28 <_malloc_r+0x3c>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f000 f98f 	bl	8008244 <_sbrk_r>
 8007f26:	6020      	str	r0, [r4, #0]
 8007f28:	4629      	mov	r1, r5
 8007f2a:	4630      	mov	r0, r6
 8007f2c:	f000 f98a 	bl	8008244 <_sbrk_r>
 8007f30:	1c43      	adds	r3, r0, #1
 8007f32:	d124      	bne.n	8007f7e <_malloc_r+0x92>
 8007f34:	230c      	movs	r3, #12
 8007f36:	6033      	str	r3, [r6, #0]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 f9bf 	bl	80082bc <__malloc_unlock>
 8007f3e:	e7e4      	b.n	8007f0a <_malloc_r+0x1e>
 8007f40:	680b      	ldr	r3, [r1, #0]
 8007f42:	1b5b      	subs	r3, r3, r5
 8007f44:	d418      	bmi.n	8007f78 <_malloc_r+0x8c>
 8007f46:	2b0b      	cmp	r3, #11
 8007f48:	d90f      	bls.n	8007f6a <_malloc_r+0x7e>
 8007f4a:	600b      	str	r3, [r1, #0]
 8007f4c:	50cd      	str	r5, [r1, r3]
 8007f4e:	18cc      	adds	r4, r1, r3
 8007f50:	4630      	mov	r0, r6
 8007f52:	f000 f9b3 	bl	80082bc <__malloc_unlock>
 8007f56:	f104 000b 	add.w	r0, r4, #11
 8007f5a:	1d23      	adds	r3, r4, #4
 8007f5c:	f020 0007 	bic.w	r0, r0, #7
 8007f60:	1ac3      	subs	r3, r0, r3
 8007f62:	d0d3      	beq.n	8007f0c <_malloc_r+0x20>
 8007f64:	425a      	negs	r2, r3
 8007f66:	50e2      	str	r2, [r4, r3]
 8007f68:	e7d0      	b.n	8007f0c <_malloc_r+0x20>
 8007f6a:	428c      	cmp	r4, r1
 8007f6c:	684b      	ldr	r3, [r1, #4]
 8007f6e:	bf16      	itet	ne
 8007f70:	6063      	strne	r3, [r4, #4]
 8007f72:	6013      	streq	r3, [r2, #0]
 8007f74:	460c      	movne	r4, r1
 8007f76:	e7eb      	b.n	8007f50 <_malloc_r+0x64>
 8007f78:	460c      	mov	r4, r1
 8007f7a:	6849      	ldr	r1, [r1, #4]
 8007f7c:	e7cc      	b.n	8007f18 <_malloc_r+0x2c>
 8007f7e:	1cc4      	adds	r4, r0, #3
 8007f80:	f024 0403 	bic.w	r4, r4, #3
 8007f84:	42a0      	cmp	r0, r4
 8007f86:	d005      	beq.n	8007f94 <_malloc_r+0xa8>
 8007f88:	1a21      	subs	r1, r4, r0
 8007f8a:	4630      	mov	r0, r6
 8007f8c:	f000 f95a 	bl	8008244 <_sbrk_r>
 8007f90:	3001      	adds	r0, #1
 8007f92:	d0cf      	beq.n	8007f34 <_malloc_r+0x48>
 8007f94:	6025      	str	r5, [r4, #0]
 8007f96:	e7db      	b.n	8007f50 <_malloc_r+0x64>
 8007f98:	20000310 	.word	0x20000310
 8007f9c:	20000314 	.word	0x20000314

08007fa0 <__ssputs_r>:
 8007fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fa4:	688e      	ldr	r6, [r1, #8]
 8007fa6:	429e      	cmp	r6, r3
 8007fa8:	4682      	mov	sl, r0
 8007faa:	460c      	mov	r4, r1
 8007fac:	4690      	mov	r8, r2
 8007fae:	4699      	mov	r9, r3
 8007fb0:	d837      	bhi.n	8008022 <__ssputs_r+0x82>
 8007fb2:	898a      	ldrh	r2, [r1, #12]
 8007fb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fb8:	d031      	beq.n	800801e <__ssputs_r+0x7e>
 8007fba:	6825      	ldr	r5, [r4, #0]
 8007fbc:	6909      	ldr	r1, [r1, #16]
 8007fbe:	1a6f      	subs	r7, r5, r1
 8007fc0:	6965      	ldr	r5, [r4, #20]
 8007fc2:	2302      	movs	r3, #2
 8007fc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fc8:	fb95 f5f3 	sdiv	r5, r5, r3
 8007fcc:	f109 0301 	add.w	r3, r9, #1
 8007fd0:	443b      	add	r3, r7
 8007fd2:	429d      	cmp	r5, r3
 8007fd4:	bf38      	it	cc
 8007fd6:	461d      	movcc	r5, r3
 8007fd8:	0553      	lsls	r3, r2, #21
 8007fda:	d530      	bpl.n	800803e <__ssputs_r+0x9e>
 8007fdc:	4629      	mov	r1, r5
 8007fde:	f7ff ff85 	bl	8007eec <_malloc_r>
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	b950      	cbnz	r0, 8007ffc <__ssputs_r+0x5c>
 8007fe6:	230c      	movs	r3, #12
 8007fe8:	f8ca 3000 	str.w	r3, [sl]
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff2:	81a3      	strh	r3, [r4, #12]
 8007ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ffc:	463a      	mov	r2, r7
 8007ffe:	6921      	ldr	r1, [r4, #16]
 8008000:	f7fe f952 	bl	80062a8 <memcpy>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800800a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	6126      	str	r6, [r4, #16]
 8008012:	6165      	str	r5, [r4, #20]
 8008014:	443e      	add	r6, r7
 8008016:	1bed      	subs	r5, r5, r7
 8008018:	6026      	str	r6, [r4, #0]
 800801a:	60a5      	str	r5, [r4, #8]
 800801c:	464e      	mov	r6, r9
 800801e:	454e      	cmp	r6, r9
 8008020:	d900      	bls.n	8008024 <__ssputs_r+0x84>
 8008022:	464e      	mov	r6, r9
 8008024:	4632      	mov	r2, r6
 8008026:	4641      	mov	r1, r8
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	f000 f92d 	bl	8008288 <memmove>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	1b9b      	subs	r3, r3, r6
 8008032:	60a3      	str	r3, [r4, #8]
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	441e      	add	r6, r3
 8008038:	6026      	str	r6, [r4, #0]
 800803a:	2000      	movs	r0, #0
 800803c:	e7dc      	b.n	8007ff8 <__ssputs_r+0x58>
 800803e:	462a      	mov	r2, r5
 8008040:	f000 f93d 	bl	80082be <_realloc_r>
 8008044:	4606      	mov	r6, r0
 8008046:	2800      	cmp	r0, #0
 8008048:	d1e2      	bne.n	8008010 <__ssputs_r+0x70>
 800804a:	6921      	ldr	r1, [r4, #16]
 800804c:	4650      	mov	r0, sl
 800804e:	f7ff feff 	bl	8007e50 <_free_r>
 8008052:	e7c8      	b.n	8007fe6 <__ssputs_r+0x46>

08008054 <_svfiprintf_r>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	461d      	mov	r5, r3
 800805a:	898b      	ldrh	r3, [r1, #12]
 800805c:	061f      	lsls	r7, r3, #24
 800805e:	b09d      	sub	sp, #116	; 0x74
 8008060:	4680      	mov	r8, r0
 8008062:	460c      	mov	r4, r1
 8008064:	4616      	mov	r6, r2
 8008066:	d50f      	bpl.n	8008088 <_svfiprintf_r+0x34>
 8008068:	690b      	ldr	r3, [r1, #16]
 800806a:	b96b      	cbnz	r3, 8008088 <_svfiprintf_r+0x34>
 800806c:	2140      	movs	r1, #64	; 0x40
 800806e:	f7ff ff3d 	bl	8007eec <_malloc_r>
 8008072:	6020      	str	r0, [r4, #0]
 8008074:	6120      	str	r0, [r4, #16]
 8008076:	b928      	cbnz	r0, 8008084 <_svfiprintf_r+0x30>
 8008078:	230c      	movs	r3, #12
 800807a:	f8c8 3000 	str.w	r3, [r8]
 800807e:	f04f 30ff 	mov.w	r0, #4294967295
 8008082:	e0c8      	b.n	8008216 <_svfiprintf_r+0x1c2>
 8008084:	2340      	movs	r3, #64	; 0x40
 8008086:	6163      	str	r3, [r4, #20]
 8008088:	2300      	movs	r3, #0
 800808a:	9309      	str	r3, [sp, #36]	; 0x24
 800808c:	2320      	movs	r3, #32
 800808e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008092:	2330      	movs	r3, #48	; 0x30
 8008094:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008098:	9503      	str	r5, [sp, #12]
 800809a:	f04f 0b01 	mov.w	fp, #1
 800809e:	4637      	mov	r7, r6
 80080a0:	463d      	mov	r5, r7
 80080a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80080a6:	b10b      	cbz	r3, 80080ac <_svfiprintf_r+0x58>
 80080a8:	2b25      	cmp	r3, #37	; 0x25
 80080aa:	d13e      	bne.n	800812a <_svfiprintf_r+0xd6>
 80080ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80080b0:	d00b      	beq.n	80080ca <_svfiprintf_r+0x76>
 80080b2:	4653      	mov	r3, sl
 80080b4:	4632      	mov	r2, r6
 80080b6:	4621      	mov	r1, r4
 80080b8:	4640      	mov	r0, r8
 80080ba:	f7ff ff71 	bl	8007fa0 <__ssputs_r>
 80080be:	3001      	adds	r0, #1
 80080c0:	f000 80a4 	beq.w	800820c <_svfiprintf_r+0x1b8>
 80080c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c6:	4453      	add	r3, sl
 80080c8:	9309      	str	r3, [sp, #36]	; 0x24
 80080ca:	783b      	ldrb	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f000 809d 	beq.w	800820c <_svfiprintf_r+0x1b8>
 80080d2:	2300      	movs	r3, #0
 80080d4:	f04f 32ff 	mov.w	r2, #4294967295
 80080d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080dc:	9304      	str	r3, [sp, #16]
 80080de:	9307      	str	r3, [sp, #28]
 80080e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080e4:	931a      	str	r3, [sp, #104]	; 0x68
 80080e6:	462f      	mov	r7, r5
 80080e8:	2205      	movs	r2, #5
 80080ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80080ee:	4850      	ldr	r0, [pc, #320]	; (8008230 <_svfiprintf_r+0x1dc>)
 80080f0:	f7f8 f87e 	bl	80001f0 <memchr>
 80080f4:	9b04      	ldr	r3, [sp, #16]
 80080f6:	b9d0      	cbnz	r0, 800812e <_svfiprintf_r+0xda>
 80080f8:	06d9      	lsls	r1, r3, #27
 80080fa:	bf44      	itt	mi
 80080fc:	2220      	movmi	r2, #32
 80080fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008102:	071a      	lsls	r2, r3, #28
 8008104:	bf44      	itt	mi
 8008106:	222b      	movmi	r2, #43	; 0x2b
 8008108:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800810c:	782a      	ldrb	r2, [r5, #0]
 800810e:	2a2a      	cmp	r2, #42	; 0x2a
 8008110:	d015      	beq.n	800813e <_svfiprintf_r+0xea>
 8008112:	9a07      	ldr	r2, [sp, #28]
 8008114:	462f      	mov	r7, r5
 8008116:	2000      	movs	r0, #0
 8008118:	250a      	movs	r5, #10
 800811a:	4639      	mov	r1, r7
 800811c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008120:	3b30      	subs	r3, #48	; 0x30
 8008122:	2b09      	cmp	r3, #9
 8008124:	d94d      	bls.n	80081c2 <_svfiprintf_r+0x16e>
 8008126:	b1b8      	cbz	r0, 8008158 <_svfiprintf_r+0x104>
 8008128:	e00f      	b.n	800814a <_svfiprintf_r+0xf6>
 800812a:	462f      	mov	r7, r5
 800812c:	e7b8      	b.n	80080a0 <_svfiprintf_r+0x4c>
 800812e:	4a40      	ldr	r2, [pc, #256]	; (8008230 <_svfiprintf_r+0x1dc>)
 8008130:	1a80      	subs	r0, r0, r2
 8008132:	fa0b f000 	lsl.w	r0, fp, r0
 8008136:	4318      	orrs	r0, r3
 8008138:	9004      	str	r0, [sp, #16]
 800813a:	463d      	mov	r5, r7
 800813c:	e7d3      	b.n	80080e6 <_svfiprintf_r+0x92>
 800813e:	9a03      	ldr	r2, [sp, #12]
 8008140:	1d11      	adds	r1, r2, #4
 8008142:	6812      	ldr	r2, [r2, #0]
 8008144:	9103      	str	r1, [sp, #12]
 8008146:	2a00      	cmp	r2, #0
 8008148:	db01      	blt.n	800814e <_svfiprintf_r+0xfa>
 800814a:	9207      	str	r2, [sp, #28]
 800814c:	e004      	b.n	8008158 <_svfiprintf_r+0x104>
 800814e:	4252      	negs	r2, r2
 8008150:	f043 0302 	orr.w	r3, r3, #2
 8008154:	9207      	str	r2, [sp, #28]
 8008156:	9304      	str	r3, [sp, #16]
 8008158:	783b      	ldrb	r3, [r7, #0]
 800815a:	2b2e      	cmp	r3, #46	; 0x2e
 800815c:	d10c      	bne.n	8008178 <_svfiprintf_r+0x124>
 800815e:	787b      	ldrb	r3, [r7, #1]
 8008160:	2b2a      	cmp	r3, #42	; 0x2a
 8008162:	d133      	bne.n	80081cc <_svfiprintf_r+0x178>
 8008164:	9b03      	ldr	r3, [sp, #12]
 8008166:	1d1a      	adds	r2, r3, #4
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	9203      	str	r2, [sp, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	bfb8      	it	lt
 8008170:	f04f 33ff 	movlt.w	r3, #4294967295
 8008174:	3702      	adds	r7, #2
 8008176:	9305      	str	r3, [sp, #20]
 8008178:	4d2e      	ldr	r5, [pc, #184]	; (8008234 <_svfiprintf_r+0x1e0>)
 800817a:	7839      	ldrb	r1, [r7, #0]
 800817c:	2203      	movs	r2, #3
 800817e:	4628      	mov	r0, r5
 8008180:	f7f8 f836 	bl	80001f0 <memchr>
 8008184:	b138      	cbz	r0, 8008196 <_svfiprintf_r+0x142>
 8008186:	2340      	movs	r3, #64	; 0x40
 8008188:	1b40      	subs	r0, r0, r5
 800818a:	fa03 f000 	lsl.w	r0, r3, r0
 800818e:	9b04      	ldr	r3, [sp, #16]
 8008190:	4303      	orrs	r3, r0
 8008192:	3701      	adds	r7, #1
 8008194:	9304      	str	r3, [sp, #16]
 8008196:	7839      	ldrb	r1, [r7, #0]
 8008198:	4827      	ldr	r0, [pc, #156]	; (8008238 <_svfiprintf_r+0x1e4>)
 800819a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819e:	2206      	movs	r2, #6
 80081a0:	1c7e      	adds	r6, r7, #1
 80081a2:	f7f8 f825 	bl	80001f0 <memchr>
 80081a6:	2800      	cmp	r0, #0
 80081a8:	d038      	beq.n	800821c <_svfiprintf_r+0x1c8>
 80081aa:	4b24      	ldr	r3, [pc, #144]	; (800823c <_svfiprintf_r+0x1e8>)
 80081ac:	bb13      	cbnz	r3, 80081f4 <_svfiprintf_r+0x1a0>
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	3307      	adds	r3, #7
 80081b2:	f023 0307 	bic.w	r3, r3, #7
 80081b6:	3308      	adds	r3, #8
 80081b8:	9303      	str	r3, [sp, #12]
 80081ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081bc:	444b      	add	r3, r9
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	e76d      	b.n	800809e <_svfiprintf_r+0x4a>
 80081c2:	fb05 3202 	mla	r2, r5, r2, r3
 80081c6:	2001      	movs	r0, #1
 80081c8:	460f      	mov	r7, r1
 80081ca:	e7a6      	b.n	800811a <_svfiprintf_r+0xc6>
 80081cc:	2300      	movs	r3, #0
 80081ce:	3701      	adds	r7, #1
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	4619      	mov	r1, r3
 80081d4:	250a      	movs	r5, #10
 80081d6:	4638      	mov	r0, r7
 80081d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081dc:	3a30      	subs	r2, #48	; 0x30
 80081de:	2a09      	cmp	r2, #9
 80081e0:	d903      	bls.n	80081ea <_svfiprintf_r+0x196>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0c8      	beq.n	8008178 <_svfiprintf_r+0x124>
 80081e6:	9105      	str	r1, [sp, #20]
 80081e8:	e7c6      	b.n	8008178 <_svfiprintf_r+0x124>
 80081ea:	fb05 2101 	mla	r1, r5, r1, r2
 80081ee:	2301      	movs	r3, #1
 80081f0:	4607      	mov	r7, r0
 80081f2:	e7f0      	b.n	80081d6 <_svfiprintf_r+0x182>
 80081f4:	ab03      	add	r3, sp, #12
 80081f6:	9300      	str	r3, [sp, #0]
 80081f8:	4622      	mov	r2, r4
 80081fa:	4b11      	ldr	r3, [pc, #68]	; (8008240 <_svfiprintf_r+0x1ec>)
 80081fc:	a904      	add	r1, sp, #16
 80081fe:	4640      	mov	r0, r8
 8008200:	f7fe f8fa 	bl	80063f8 <_printf_float>
 8008204:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008208:	4681      	mov	r9, r0
 800820a:	d1d6      	bne.n	80081ba <_svfiprintf_r+0x166>
 800820c:	89a3      	ldrh	r3, [r4, #12]
 800820e:	065b      	lsls	r3, r3, #25
 8008210:	f53f af35 	bmi.w	800807e <_svfiprintf_r+0x2a>
 8008214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008216:	b01d      	add	sp, #116	; 0x74
 8008218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	4622      	mov	r2, r4
 8008222:	4b07      	ldr	r3, [pc, #28]	; (8008240 <_svfiprintf_r+0x1ec>)
 8008224:	a904      	add	r1, sp, #16
 8008226:	4640      	mov	r0, r8
 8008228:	f7fe fb9c 	bl	8006964 <_printf_i>
 800822c:	e7ea      	b.n	8008204 <_svfiprintf_r+0x1b0>
 800822e:	bf00      	nop
 8008230:	08008acc 	.word	0x08008acc
 8008234:	08008ad2 	.word	0x08008ad2
 8008238:	08008ad6 	.word	0x08008ad6
 800823c:	080063f9 	.word	0x080063f9
 8008240:	08007fa1 	.word	0x08007fa1

08008244 <_sbrk_r>:
 8008244:	b538      	push	{r3, r4, r5, lr}
 8008246:	4c06      	ldr	r4, [pc, #24]	; (8008260 <_sbrk_r+0x1c>)
 8008248:	2300      	movs	r3, #0
 800824a:	4605      	mov	r5, r0
 800824c:	4608      	mov	r0, r1
 800824e:	6023      	str	r3, [r4, #0]
 8008250:	f7fa fb54 	bl	80028fc <_sbrk>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_sbrk_r+0x1a>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	b103      	cbz	r3, 800825e <_sbrk_r+0x1a>
 800825c:	602b      	str	r3, [r5, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	200005a8 	.word	0x200005a8

08008264 <__ascii_mbtowc>:
 8008264:	b082      	sub	sp, #8
 8008266:	b901      	cbnz	r1, 800826a <__ascii_mbtowc+0x6>
 8008268:	a901      	add	r1, sp, #4
 800826a:	b142      	cbz	r2, 800827e <__ascii_mbtowc+0x1a>
 800826c:	b14b      	cbz	r3, 8008282 <__ascii_mbtowc+0x1e>
 800826e:	7813      	ldrb	r3, [r2, #0]
 8008270:	600b      	str	r3, [r1, #0]
 8008272:	7812      	ldrb	r2, [r2, #0]
 8008274:	1c10      	adds	r0, r2, #0
 8008276:	bf18      	it	ne
 8008278:	2001      	movne	r0, #1
 800827a:	b002      	add	sp, #8
 800827c:	4770      	bx	lr
 800827e:	4610      	mov	r0, r2
 8008280:	e7fb      	b.n	800827a <__ascii_mbtowc+0x16>
 8008282:	f06f 0001 	mvn.w	r0, #1
 8008286:	e7f8      	b.n	800827a <__ascii_mbtowc+0x16>

08008288 <memmove>:
 8008288:	4288      	cmp	r0, r1
 800828a:	b510      	push	{r4, lr}
 800828c:	eb01 0302 	add.w	r3, r1, r2
 8008290:	d807      	bhi.n	80082a2 <memmove+0x1a>
 8008292:	1e42      	subs	r2, r0, #1
 8008294:	4299      	cmp	r1, r3
 8008296:	d00a      	beq.n	80082ae <memmove+0x26>
 8008298:	f811 4b01 	ldrb.w	r4, [r1], #1
 800829c:	f802 4f01 	strb.w	r4, [r2, #1]!
 80082a0:	e7f8      	b.n	8008294 <memmove+0xc>
 80082a2:	4283      	cmp	r3, r0
 80082a4:	d9f5      	bls.n	8008292 <memmove+0xa>
 80082a6:	1881      	adds	r1, r0, r2
 80082a8:	1ad2      	subs	r2, r2, r3
 80082aa:	42d3      	cmn	r3, r2
 80082ac:	d100      	bne.n	80082b0 <memmove+0x28>
 80082ae:	bd10      	pop	{r4, pc}
 80082b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80082b8:	e7f7      	b.n	80082aa <memmove+0x22>

080082ba <__malloc_lock>:
 80082ba:	4770      	bx	lr

080082bc <__malloc_unlock>:
 80082bc:	4770      	bx	lr

080082be <_realloc_r>:
 80082be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082c0:	4607      	mov	r7, r0
 80082c2:	4614      	mov	r4, r2
 80082c4:	460e      	mov	r6, r1
 80082c6:	b921      	cbnz	r1, 80082d2 <_realloc_r+0x14>
 80082c8:	4611      	mov	r1, r2
 80082ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80082ce:	f7ff be0d 	b.w	8007eec <_malloc_r>
 80082d2:	b922      	cbnz	r2, 80082de <_realloc_r+0x20>
 80082d4:	f7ff fdbc 	bl	8007e50 <_free_r>
 80082d8:	4625      	mov	r5, r4
 80082da:	4628      	mov	r0, r5
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082de:	f000 f821 	bl	8008324 <_malloc_usable_size_r>
 80082e2:	42a0      	cmp	r0, r4
 80082e4:	d20f      	bcs.n	8008306 <_realloc_r+0x48>
 80082e6:	4621      	mov	r1, r4
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff fdff 	bl	8007eec <_malloc_r>
 80082ee:	4605      	mov	r5, r0
 80082f0:	2800      	cmp	r0, #0
 80082f2:	d0f2      	beq.n	80082da <_realloc_r+0x1c>
 80082f4:	4631      	mov	r1, r6
 80082f6:	4622      	mov	r2, r4
 80082f8:	f7fd ffd6 	bl	80062a8 <memcpy>
 80082fc:	4631      	mov	r1, r6
 80082fe:	4638      	mov	r0, r7
 8008300:	f7ff fda6 	bl	8007e50 <_free_r>
 8008304:	e7e9      	b.n	80082da <_realloc_r+0x1c>
 8008306:	4635      	mov	r5, r6
 8008308:	e7e7      	b.n	80082da <_realloc_r+0x1c>

0800830a <__ascii_wctomb>:
 800830a:	b149      	cbz	r1, 8008320 <__ascii_wctomb+0x16>
 800830c:	2aff      	cmp	r2, #255	; 0xff
 800830e:	bf85      	ittet	hi
 8008310:	238a      	movhi	r3, #138	; 0x8a
 8008312:	6003      	strhi	r3, [r0, #0]
 8008314:	700a      	strbls	r2, [r1, #0]
 8008316:	f04f 30ff 	movhi.w	r0, #4294967295
 800831a:	bf98      	it	ls
 800831c:	2001      	movls	r0, #1
 800831e:	4770      	bx	lr
 8008320:	4608      	mov	r0, r1
 8008322:	4770      	bx	lr

08008324 <_malloc_usable_size_r>:
 8008324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008328:	1f18      	subs	r0, r3, #4
 800832a:	2b00      	cmp	r3, #0
 800832c:	bfbc      	itt	lt
 800832e:	580b      	ldrlt	r3, [r1, r0]
 8008330:	18c0      	addlt	r0, r0, r3
 8008332:	4770      	bx	lr

08008334 <_init>:
 8008334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008336:	bf00      	nop
 8008338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800833a:	bc08      	pop	{r3}
 800833c:	469e      	mov	lr, r3
 800833e:	4770      	bx	lr

08008340 <_fini>:
 8008340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008342:	bf00      	nop
 8008344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008346:	bc08      	pop	{r3}
 8008348:	469e      	mov	lr, r3
 800834a:	4770      	bx	lr
